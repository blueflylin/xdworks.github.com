<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Blog.XDite.net]]></title>
  <link href="http://blog.xdite.net/atom.xml" rel="self"/>
  <link href="http://blog.xdite.net/"/>
  <updated>2012-03-05T12:31:28+08:00</updated>
  <id>http://blog.xdite.net/</id>
  <author>
    <name><![CDATA[xdite]]></name>
    <email><![CDATA[xdite@about.me]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[從 Github 被 hack，談 Rails 的安全性（ mass-assignment ）]]></title>
    <link href="http://blog.xdite.net/posts/2012/03/05/github-hacked-rails-security/"/>
    <updated>2012-03-05T10:51:00+08:00</updated>
    <id>http://blog.xdite.net/posts/2012/03/05/github-hacked-rails-security</id>
    <content type="html"><![CDATA[<p>關於 Github 被入侵這件事，目前在國外開發圈傳的沸沸揚揚。看來中文圈還沒有消息，我來報導一下到底發生了什麼事好了。順便宣導一下開發 Rails 程式碼需要注意的其中一個觀念..</p>

<h2>到底發生了什麼事</h2>

<p><a href="https://github.com/rails/rails">Rails</a> 的 master 被某個 hacker 塞上這一段 <a href="https://github.com/rails/rails/commit/b83965785db1eec019edf1fc272b1aa393e6dc57">commit</a>。以證明 Github 是可以被入侵的。</p>

<h2>為什麼會發生這件事（糾紛起源）</h2>

<p>有個俄羅斯 Hacker : <a href="homakov">homakov</a> 到 Rails 的 Github issue 頁，report 了一個 <a href="https://github.com/rails/rails/issues/5228">issue</a>。</p>

<p>聲稱他發現很多「中等程度以下的」Rails 開發者開發任何網站，都沒有在 model 內作上任何 <a href="http://api.rubyonrails.org/classes/ActiveModel/MassAssignmentSecurity/ClassMethods.html#method-i-attr_accessible">attr_accesible</a> 的防護，這樣會引起很多安全性的問題。</p>

<p>Rails 官方應該設計一個機制強迫大家一定得「使用」<a href="http://api.rubyonrails.org/classes/ActiveModel/MassAssignmentSecurity/ClassMethods.html#method-i-attr_accessible">attr_accesible</a>。</p>

<p>因為寫 code 要塞 attr_accesible 被多數開發者認為是根本是一個「常識」。所以這個 issue 很快就被 Rails core team 關掉了。他的意見是這不是 Rails 的問題，而是開發者的問題。（正常人都會做出這樣的反應）</p>

<p>這個 Hacker 覺得他好心來報告，但是卻被忽視，感到很生氣。</p>

<p>於是！他 Hack 了 Github 證明這件事情是真的。</p>

<p>他不僅利用這個漏洞在 rails/rails 中塞了 <a href="https://github.com/rails/rails/commit/b83965785db1eec019edf1fc272b1aa393e6dc57">commit</a> ，連當初被關掉的 <a href="https://github.com/rails/rails/issues/5228">issue</a> ，也用同樣方法打開了。</p>

<p>所以這下就鬧到舉世震驚了！…XDDDDD</p>

<h2>為什麼會發生這件事（剖析 Rails ）</h2>

<h3>從 Rails 表單機制談起</h3>

<p>Rails 秉持著 Don&#8217;t Repeat Yourself 的精神，將 Form 表單 Helper 直接與 Model 欄位直接結合，節省不少開發者撰寫表單的時間，是一個很聰明的作法。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&lt;</span><span class="sx">%= form_for @post do |f| %&gt;</span>
</span><span class='line'><span class="sx">  &lt;%=</span> <span class="n">f</span><span class="o">.</span><span class="n">text_field</span> <span class="ss">:title</span> <span class="sx">%&gt;</span>
</span><span class='line'><span class="sx">  &lt;%= f.text_area :content %&gt;</span>
</span><span class='line'>  <span class="o">&lt;%=</span> <span class="n">f</span><span class="o">.</span><span class="n">sumbit</span> <span class="s2">&quot;Submit&quot;</span> <span class="sx">%&gt;</span>
</span><span class='line'><span class="sx">&lt;% end %&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>當表單送出後，會被壓縮成一個 params[:post] 這樣的 Hash。controller 裡面透過 massive-assignment 的技巧直接 mapping 進 Model 裡。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">PostController</span> <span class="o">&lt;</span> <span class="no">ApplicationController</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">create</span>
</span><span class='line'>     <span class="vi">@post</span> <span class="o">=</span> <span class="n">current_user</span><span class="o">.</span><span class="n">posts</span><span class="o">.</span><span class="n">build</span><span class="p">(</span><span class="n">params</span><span class="o">[</span><span class="ss">:post</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'>     <span class="k">if</span> <span class="vi">@post</span><span class="o">.</span><span class="n">save</span>
</span><span class='line'>       <span class="c1"># do something</span>
</span><span class='line'>     <span class="k">else</span>
</span><span class='line'>       <span class="c1"># do another thing</span>
</span><span class='line'>     <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>這是一個自 Rails 誕生以來就有的機制了，十分便手。</p>

<p>有些不了解的 Rails 的其他 Developer 批評這是一個不安全設計，並因此拒絕使用 Rails。欄位暴露在外被人知道，讓他們感到非常不自在。</p>

<p>萬一被人猜到 user 權限是用 user.is_admin 作為 boolean 值，這樣豈不是很危險嗎？在修改個人資訊頁時，假造 DOM 就不是可以把自己提升為 admin 了嗎？</p>

<h3>Rails 內建的安全防禦措施</h3>

<p>Rails 也不是沒有針對這件事設計出防禦措施，有兩組 model API ：<a href="http://api.rubyonrails.org/classes/ActiveModel/MassAssignmentSecurity/ClassMethods.html#method-i-attr_accessible">attr_accesible</a> 與 <a href="http://api.rubyonrails.org/classes/ActiveModel/MassAssignmentSecurity/ClassMethods.html#method-i-attr_protected">attr_protected</a>。其實也就是 白名單、黑名單設計。</p>

<p>把 <a href="http://api.rubyonrails.org/classes/ActiveModel/MassAssignmentSecurity/ClassMethods.html#method-i-attr_accessible">attr_accesible</a> 加在 model 裡，可以擋掉所有 massive assignement 傳進來的值，只開放你想讓使用填寫的欄位。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Post</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
</span><span class='line'>  <span class="n">attr_accesible</span> <span class="ss">:title</span><span class="p">,</span> <span class="ss">:content</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>而 <a href="http://api.rubyonrails.org/classes/ActiveModel/MassAssignmentSecurity/ClassMethods.html#method-i-attr_protected">attr_protected</a> 是完全相反地機制。</p>

<h3>知名認證 Plugin 皆內建 attr_accesible</h3>

<p>也因為 user.is_admin 幾乎是所有懶惰開發者會寫出來的 code。因此長久的歷史演變下來，許多知名認證 plugin，如 <a href="https://github.com/plataformatec/devise">devise</a> ，restful-authentication 等等…，在 User model 裡都會加上 attr_accesible（你可能沒有察覺到，因為可能是透過 include Module 塞進來的功能）。</p>

<p>因為是隱藏的內建防禦，很多不夠經驗的開發者，反而會被這道自動防禦整到，在設計修改使用者資訊這個功能時，常常表單明明沒問題，但就是修改不了除了密碼和 email 以外的欄位 XDDD</p>

<h3>User model 自動防禦，那其他 model 呢？</h3>

<p>好問題！這就是這次 Github 發生的問題。嚴格來說，根本不是 rails/rails 的錯，<strong>而是 Github 內某個被罵 mid/junior level 的 developer 的錯</strong>。他根本沒有對其他 model 作上保護，才被 hacker 有機可稱。</p>

<p>Hacker 也是想要證明連 Github 都會犯這種錯，才會鬧出這種事件</p>

<h2>看到 Github 的事件，我該做什麼？</h2>

<p>請回家讀這兩組 model API ：<a href="http://api.rubyonrails.org/classes/ActiveModel/MassAssignmentSecurity/ClassMethods.html#method-i-attr_accessible">attr_accesible</a> 與 <a href="http://api.rubyonrails.org/classes/ActiveModel/MassAssignmentSecurity/ClassMethods.html#method-i-attr_protected">attr_protected</a> 的作用。</p>

<p>並檢查你的 project 內是否有類似問題：一般來說，容易被攻擊的點都跟 relation 比較有關係。也就是 xxxxx_id 的部分都要清查。</p>

<h3>Scoped Mass Assignment</h3>

<p>這是 Rails 3.1 加入的新 feature : scoped mass assignment，
<a href="http://enlightsolutions.com/articles/whats-new-in-edge-scoped-mass-assignment-in-rails-3-1">http://enlightsolutions.com/articles/whats-new-in-edge-scoped-mass-assignment-in-rails-3-1</a>。</p>

<p>我也建議你閱讀。</p>

<h2>Rails core team 目前的解法</h2>

<p>大師 Yahuda Katz (wycats) 目前起草了一份新的 <a href="https://gist.github.com/1974187">proposal</a>，並且丟在 <a href="http://news.ycombinator.com/item?id=3664334">Hacker News</a> 讓鄉民討論。應該可能近期就會近 Rails core 或以 plugin 的方式釋出。</p>

<h2>我個人的感想</h2>

<p>其實昨晚睡前看到一堆人說 Github 被 Hacked 掉，然後追了幾篇討論串之後，覺得真的是沒什麼，因為就我來說，的確應該就是這個 hacker 覺得有必要提醒大家，但這對多數的 Rails Developer 來說，根本是超小的小事，不值得這麼大驚小怪。</p>

<p>結果憤怒的 Hacker 攻擊了 Github，Github 真的還因為某個 developer 犯了低級錯誤中招。但我還是覺得沒什麼…</p>

<h2>XSS V.S. Massive Assignment</h2>

<p>後來睡醒以後才發現不對，其實這東西應該要被拿來跟 auto escape 相比：XSS 是一般設計 Web Application 最容易中招的攻擊。</p>

<p>XSS 的原因肇因是讓開發者開放讓使用者自行輸入內容，然後無保護的讀出來，Hacker 會利用這種漏洞，寫進有害的 JavaScript 讓使用者中招。正確的方式應該是：內容讀出來之後，都要利用 html_escape 濾掉。</p>

<p>問題是，html_escape 濾不勝濾，沒有開發者能夠那麼神，寫任何一段 code 都會自律的加上 h(content)。最後 Rails core 痛定思痛，在 Rails 3.0 後效法 Django 的設計，在讀出 content 時，一律先 escape。除非有必要，才另行設定不需 escape。</p>

<p>我想這次的 massive assignment 問題應該也要比照辦理才對…</p>

<h2>延伸閱讀：</h2>

<p>國外鄉民懶人包：<a href="http://chrisacky.posterous.com/github-you-have-let-us-all-down">GitHub and Rails: You have let us all down.</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[我創業了，我的公司 RocoDev]]></title>
    <link href="http://blog.xdite.net/posts/2012/03/02/my-start-up/"/>
    <updated>2012-03-02T01:59:00+08:00</updated>
    <id>http://blog.xdite.net/posts/2012/03/02/my-start-up</id>
    <content type="html"><![CDATA[<p>我創業了。從 2012/03/01 開始，我跟我的好友：國內頂尖的視覺設計師 <a href="http://twitter.com/evenwu">@evenwu</a> 合組了一間新公司 <a href="http://rocodev.com">RocoDev</a>。</p>

<p>我們專營：</p>

<ul>
<li>Ruby on Rails Web Application 設計</li>
<li>HTML5 / Responsive Design 視覺與網頁設計</li>
<li>網站體質優化 ( SEO / HTML5 semantic / Alexa ranking)</li>
</ul>


<p>有興趣的朋友可以歡迎找我們洽談服務。</p>

<p>至於我創業的原因，寫在這裡：「<a href="http://xdite-smalltalk.tumblr.com/post/18303489993">我為什麼想創業</a>」。</p>

<p>這也是我另外的一個小部落格，我對於人生的感觸和一些沒有那麼硬的短文會放在這裡。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby Podcast / Screencast / Issue 推薦清單]]></title>
    <link href="http://blog.xdite.net/posts/2012/02/19/ruby-podcasts/"/>
    <updated>2012-02-19T06:02:00+08:00</updated>
    <id>http://blog.xdite.net/posts/2012/02/19/ruby-podcasts</id>
    <content type="html"><![CDATA[<p>有些人問我平常日常怎麼補充知識，所以稍微整理一下我平常看的一些東西分享出來。我平常蠻常到處亂看東西，比例大概是這樣：70% 以上是 Ruby，30 % 是 JavaScript 和其他東西…</p>

<p>不過看完之後當然還要練習，東西才會變自己的就是了&#8230;</p>

<h2>PODCAST</h2>

<ul>
<li>Ruby <a href="http://ruby5.envylabs.com/">Ruby5</a></li>
<li>Ruby <a href="http://rubyshow.com/">The Ruby Show</a></li>
<li>Ruby <a href="http://rubyrogues.com/">Ruby Rogues</a></li>
<li>Ruby <a href="http://rubyfreelancers.com/">Ruby FreeLancers</a></li>
<li>JS <a href="http://javascriptjabber.com/">Javascript Jabber</a></li>
<li>Startup <a href="http://www.thisweekinstartups.com/">This Week in Startups</a></li>
<li>Startup <a href="http://mixergy.com/">Mixergy</a></li>
</ul>


<h2>Screencast</h2>

<ul>
<li>Rails <a href="http://railscasts.com/">Railscast</a></li>
<li>Rails / CSS <a href="http://www.codeschool.com/code_tv">CodeTV</a></li>
<li>Rails <a href="https://www.destroyallsoftware.com/screencasts">Destroy All Software</a></li>
<li>General <a href="http://www.cleancoders.com/">The Clean Coders</a></li>
</ul>


<h2>Weekly issue</h2>

<ul>
<li><a href="http://rubyweekly.com/">Ruby Weekly</a></li>
<li><a href="http://javascriptweekly.com/">JavaScript Weekly</a></li>
<li><a href="http://html5weekly.com/">HTML5 Weekly</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Responsive Web Design 的一些技巧和想法]]></title>
    <link href="http://blog.xdite.net/posts/2012/02/16/about-responsive-design-technique/"/>
    <updated>2012-02-16T13:16:00+08:00</updated>
    <id>http://blog.xdite.net/posts/2012/02/16/about-responsive-design-technique</id>
    <content type="html"><![CDATA[<p>昨天在 <a href="http://registrano.com/events/hdm5">Happy Designer 5</a> 上，有聊起了做 Responsive Web Design (特別是 mobile 版)的一些狀況。在這裡我提供一些自己的經驗和技巧：</p>

<ol>
<li><p>Mobile First：如果你要做 Desktop / Mobile 雙版本的網站。先設計 Mobile 版的，而且要從最小的尺寸開始做。</p></li>
<li><p>盡量讓 Mobile 的版本：大部分功能保持唯讀狀態。因為在 Mobile 上要將「輸入」這件事做得好，是很困難的，而且不少的寫入會牽涉到動線及頁面的跳轉，會大幅降低 user experience。雖然某些功能和元素幹掉很可惜，但要懂得「取捨」。</p></li>
<li><p>不要過於迷信 Media Query: media query 只能解決 CSS 的問題。但是 mobile client 上需要解決的問題不只是這些：</p>

<ul>
<li>內圖的尺寸與傳輸速度：圖可能是用 Desktop version 的圖硬縮的。</li>
<li>3rd party social plugin：3rd party social plugin 多半沒有考慮 mobile 版本的問題。所以在 mobile 版面上，幾乎都會有尺寸問題。而這些 social plugin 的 js 因為都是由放置在外國的原站提供，在 mobile 版上 loading 更加的緩慢。</li>
</ul>


<p>所以我會採取「偵測 agent 」與 media query 混合使用的招數進行開發。如果這個 agent 確定是手機，則直接移除掉 social 功能（直接從 server side 幹掉 DOM，而不是用 CSS 隱藏），並且吐尺寸較小的圖片。</p></li>
<li><p>我個人還是認為 Responsive 的用途比較適合用在 Tablet 的 Portrait / Landscape 的用途上。畢竟 Responsive Web Design 的想法，是讓 Desktop / Mobile 擠在同一個版面上，用同一份 code。再 conditional override 或者 remove。在需要「持續維護」的產品上，容易搞死 Developer…</p></li>
</ol>


<p>P.S. 如果你對 Responsive Web Design 好奇，可以用手機打開 <a href="http://www.techbang.com.tw">T 客邦</a> 以及 <a href="http://digiphoto.techbang.com.tw">Digiphoto</a> ，這個站都是用此技巧設計的…</p>

<p>＝＝＝</p>

<p>廣告：二月份 <a href="http://registrano.com/events/xdbg-1202">xdite 家桌遊團</a> 又開放了，限八人，請儘速報名。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Don’t name your Ruby project with underscore on Github]]></title>
    <link href="http://blog.xdite.net/posts/2012/02/09/dont-name-your-project-with-underscore-on-github/"/>
    <updated>2012-02-09T16:15:00+08:00</updated>
    <id>http://blog.xdite.net/posts/2012/02/09/dont-name-your-project-with-underscore-on-github</id>
    <content type="html"><![CDATA[<p>I had a ruby project named &#8221;<a href="https://github.com/xdite/bootstrap_helper">bootstrap_helper</a>&#8221;, which has 43 watchers on Github.</p>

<p><a href="http://www.flickr.com/photos/xdite/6845375847/" title="螢幕快照 2012-02-09 下午4.09.51 by xdite, on Flickr"><img src="http://farm8.staticflickr.com/7026/6845375847_0eed10698d.jpg" width="500" height="100" alt="螢幕快照 2012-02-09 下午4.09.51"></a></p>

<p>I thought having 43 watchers is sort of popular. But there is a weired thing:  when I search keyword : &#8220;bootstrap helper&#8221;, my gem is not in first page result.</p>

<p><a href="http://www.flickr.com/photos/xdite/6845392075/" title="螢幕快照 2012-02-09 下午3.59.56 by xdite, on Flickr"><img src="http://farm8.staticflickr.com/7045/6845392075_cfcd2676c5.jpg" width="500" height="485" alt="螢幕快照 2012-02-09 下午3.59.56"></a></p>

<p>Then I found I made a hugh mistake: Ruby naming convention told Ruby developer to name everything with underscore. So every developer names their projects with underscore.</p>

<p>But it&#8217;s a giant SEO mistake: Search Engine treats snake_keywords as CamelKeywords. If your project&#8217;s name contains  meaningful keywords, it won&#8217;t be matched. Because &#8220;snake_keywords&#8221; means &#8220;SnakeKeyword&#8221; not &#8220;snake keywords&#8221;.</p>

<p>It&#8217;s really bad for SEO.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用 SCSS 的 extend 重複利用 Bootstrap 的 style]]></title>
    <link href="http://blog.xdite.net/posts/2012/02/06/extend-bootstrap-in-compass/"/>
    <updated>2012-02-06T02:20:00+08:00</updated>
    <id>http://blog.xdite.net/posts/2012/02/06/extend-bootstrap-in-compass</id>
    <content type="html"><![CDATA[<p>Twitter 的 <a href="http://twitter.github.com/bootstrap/">Bootstrap</a> 是一套很好用的 CSS Framework。可以讓開發者加上工具類 CSS 如 <code>.btn</code>，就設計出一個按鈕。</p>

<p>但有時候這東西也像 <strong>inline style</strong> 一樣討厭，比如說我要設計一排「按鈕] link，就非得每行都加個 <code>class = "btn"</code>。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&lt;</span><span class="n">div</span> <span class="n">class</span><span class="o">=</span><span class="s2">&quot;job-options&quot;</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="n">span</span> <span class="n">class</span><span class="o">=</span><span class="s2">&quot;option-title&quot;</span><span class="o">&gt;</span> <span class="err">工作類別：</span> <span class="o">&lt;</span><span class="sr">/span&gt;</span>
</span><span class='line'><span class="sr">  &lt;%= link_to(&quot;網站設計師&quot;, jobs_path+&quot;?m_type=1&quot;, :class=&gt;&quot;btn &quot;) %&gt;</span>
</span><span class='line'><span class="sr">  &lt;%= link_to(&quot;美術設計師&quot;, jobs_path+&quot;?m_type=2&quot;, :class=&gt;&quot;btn &quot;) %&gt;</span>
</span><span class='line'><span class="sr">  &lt;%= link_to(&quot;手機APP開發&quot;, jobs_path+&quot;?m_type=3&quot;, :class=&gt;&quot;btn &quot;) %&gt;</span>
</span><span class='line'><span class="sr">  &lt;%= link_to(&quot;市場行銷&quot;, jobs_path+&quot;?m_type=4&quot;, :class=&gt;&quot;btn &quot;) %&gt;</span>
</span><span class='line'><span class="sr">  &lt;%= link_to(&quot;社群管理&quot;, jobs_path+&quot;?m_type=5&quot;, :class=&gt;&quot;btn &quot;) %&gt;</span>
</span><span class='line'><span class="sr">  &lt;%= link_to(&quot;其他&quot;, jobs_path+&quot;?m_type=0&quot;, :class=&gt;&quot;btn &quot;) %&gt;</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">div</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>我在開發時並不是使用 Twitter 自己提供的 LESS 版本，而是採用人家拆好的 SCSS 版本 <a href="https://github.com/anjlab/bootstrap-rails">anjlab/bootstrap-rails</a>。</p>

<p>如何翻修這樣的 code 呢？我使用了 SCSS 的 @extend。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='scss'><span class='line'><span class="nc">.job-options</span><span class="p">{</span>
</span><span class='line'>   <span class="na">padding-bottom</span><span class="o">:</span> <span class="mi">10</span><span class="kt">px</span><span class="p">;</span>
</span><span class='line'>   <span class="nt">a</span><span class="p">{</span>
</span><span class='line'>      <span class="k">@extend</span> <span class="nc">.btn</span><span class="o">;</span>
</span><span class='line'>   <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&lt;</span><span class="n">div</span> <span class="n">class</span><span class="o">=</span><span class="s2">&quot;job-options&quot;</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="n">span</span> <span class="n">class</span><span class="o">=</span><span class="s2">&quot;option-title&quot;</span><span class="o">&gt;</span> <span class="err">工作類別：</span> <span class="o">&lt;</span><span class="sr">/span&gt;</span>
</span><span class='line'><span class="sr">  &lt;%= link_to(&quot;網站設計師&quot;, jobs_path+&quot;?m_type=1&quot;) %&gt;</span>
</span><span class='line'><span class="sr">  &lt;%= link_to(&quot;美術設計師&quot;, jobs_path+&quot;?m_type=2&quot;) %&gt;</span>
</span><span class='line'><span class="sr">  &lt;%= link_to(&quot;手機APP開發&quot;, jobs_path+&quot;?m_type=3&quot;) %&gt;</span>
</span><span class='line'><span class="sr">  &lt;%= link_to(&quot;市場行銷&quot;, jobs_path+&quot;?m_type=4&quot;) %&gt;</span>
</span><span class='line'><span class="sr">  &lt;%= link_to(&quot;社群管理&quot;, jobs_path+&quot;?m_type=5&quot;) %&gt;</span>
</span><span class='line'><span class="sr">  &lt;%= link_to(&quot;其他&quot;, jobs_path+&quot;?m_type=0&quot;) %&gt;</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">div</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>這樣就可以把 .btn 從 HTML 裡面拿掉了。</p>

<h3>其他</h3>

<p>其實表格也可以比較辦理&#8230;</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='scss'><span class='line'><span class="nn">#feeds-list</span><span class="p">{</span>
</span><span class='line'>   <span class="k">@extend</span> <span class="nc">.zebra-striped</span><span class="o">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>====</p>

<p>不過不能 span2 這種定位的 class 不能 @extend。@extend bootstrap 這招只能用在與「位置」無關的 style 上。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[在 Rails 中如何設計 Select]]></title>
    <link href="http://blog.xdite.net/posts/2012/02/06/how-to-design-select-in-rails/"/>
    <updated>2012-02-06T00:27:00+08:00</updated>
    <id>http://blog.xdite.net/posts/2012/02/06/how-to-design-select-in-rails</id>
    <content type="html"><![CDATA[<p>在 Rails 開發中，有時候我們會遇到要在表單中設計 select 的選項。select 吃的 collection 是個 Array 。通常我們會往往第一直覺的想法是將之塞到 model 的 CONSTANT 裡，再寫一個 class method 包裝起來，再寫自己的 collection Helper 叫出來。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&lt;%</span>
</span><span class='line'><span class="k">def</span> <span class="nf">my_collection_select</span><span class="p">(</span><span class="n">title</span><span class="p">,</span> <span class="n">target_id</span><span class="p">,</span> <span class="n">default_val</span><span class="p">,</span> <span class="n">objs</span><span class="p">)</span>
</span><span class='line'>  <span class="n">html</span> <span class="o">=</span> <span class="s1">&#39;&lt;div class=&quot;clearfix&quot;&gt;&lt;label for=&quot;normalSelect&quot;&gt;&#39;</span><span class="o">+</span><span class="n">title</span><span class="o">+</span><span class="s1">&#39;&lt;/label&gt;&lt;div class=&quot;input&quot;&gt;&#39;</span>
</span><span class='line'>  <span class="n">html</span> <span class="o">+=</span> <span class="s1">&#39;&lt;select name=&quot;&#39;</span><span class="o">+</span><span class="n">target_id</span><span class="o">+</span><span class="s1">&#39;&quot; id=&quot;normalSelect&quot;&gt;&#39;</span>
</span><span class='line'>  <span class="n">objs</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">obj</span><span class="o">|</span>
</span><span class='line'>    <span class="n">selected</span> <span class="o">=</span> <span class="p">(</span><span class="n">default_val</span><span class="o">.</span><span class="n">to_s</span> <span class="o">==</span> <span class="n">obj</span><span class="o">[</span><span class="ss">:downcase</span><span class="o">].</span><span class="n">to_s</span><span class="p">)</span> <span class="p">?</span> <span class="s1">&#39;selected=&quot;selected&quot;&#39;</span> <span class="p">:</span> <span class="s1">&#39;&#39;</span>
</span><span class='line'>    <span class="n">html</span> <span class="o">+=</span> <span class="s1">&#39;&lt;option &#39;</span><span class="o">+</span><span class="n">selected</span><span class="o">+</span><span class="s1">&#39;value=&quot;&#39;</span><span class="o">+</span><span class="n">obj</span><span class="o">[</span><span class="ss">:downcase</span><span class="o">].</span><span class="n">to_s</span><span class="o">+</span><span class="s1">&#39;&quot;&gt;&#39;</span><span class="o">+</span><span class="n">obj</span><span class="o">[</span><span class="ss">:titleize</span><span class="o">]+</span><span class="s1">&#39;&lt;/option&gt;&#39;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  <span class="n">html</span> <span class="o">+=</span> <span class="s1">&#39;&lt;/select&gt;&lt;/div&gt;&lt;/div&gt;&#39;</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">raw</span><span class="p">(</span><span class="n">html</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="sx">%&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sx">&lt;%= my_collection_select(&quot;職務類別&quot;, &quot;job[job_category]&quot;, @job.job_category, Job.categories) %&gt;</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Job</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
</span><span class='line'><span class="c1">#職務類別</span>
</span><span class='line'>
</span><span class='line'><span class="no">CAT_OTHER</span>                   <span class="o">=</span> <span class="mi">0</span>   <span class="c1">#其他</span>
</span><span class='line'><span class="no">CAT_WEB_DEVLOPER</span>            <span class="o">=</span> <span class="mi">1</span>   <span class="c1">#網站設計師</span>
</span><span class='line'><span class="no">CAT_DESIGNER</span>                <span class="o">=</span> <span class="mi">2</span>   <span class="c1">#美術設計師</span>
</span><span class='line'><span class="no">CAT_PHONE_APP_DEVLOPER</span>      <span class="o">=</span> <span class="mi">3</span>   <span class="c1">#手機APP開發</span>
</span><span class='line'><span class="no">CAT_MARKETING_SALES</span>         <span class="o">=</span> <span class="mi">4</span>   <span class="c1">#市場規劃 &amp; 業務</span>
</span><span class='line'><span class="no">CAT_WEB_SOCIAL_MANAGER</span>      <span class="o">=</span> <span class="mi">5</span>   <span class="c1">#社群管理</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">categories</span>
</span><span class='line'>  <span class="o">[</span>
</span><span class='line'>      <span class="p">{</span><span class="ss">:downcase</span><span class="o">=&gt;</span><span class="no">CAT_OTHER</span><span class="p">,</span> <span class="ss">:titleize</span><span class="o">=&gt;</span><span class="s1">&#39;其他職缺&#39;</span><span class="p">},</span>
</span><span class='line'>      <span class="p">{</span><span class="ss">:downcase</span><span class="o">=&gt;</span><span class="no">CAT_WEB_DEVLOPER</span><span class="p">,</span> <span class="ss">:titleize</span><span class="o">=&gt;</span><span class="s1">&#39;網站設計師&#39;</span><span class="p">},</span>
</span><span class='line'>      <span class="p">{</span><span class="ss">:downcase</span><span class="o">=&gt;</span><span class="no">CAT_DESIGNER</span><span class="p">,</span> <span class="ss">:titleize</span><span class="o">=&gt;</span><span class="s1">&#39;美術設計師&#39;</span><span class="p">},</span>
</span><span class='line'>      <span class="p">{</span><span class="ss">:downcase</span><span class="o">=&gt;</span><span class="no">CAT_PHONE_APP_DEVLOPER</span><span class="p">,</span> <span class="ss">:titleize</span><span class="o">=&gt;</span><span class="s1">&#39;手機APP開發&#39;</span><span class="p">},</span>
</span><span class='line'>      <span class="p">{</span><span class="ss">:downcase</span><span class="o">=&gt;</span><span class="no">CAT_MARKETING_SALES</span><span class="p">,</span> <span class="ss">:titleize</span><span class="o">=&gt;</span><span class="s1">&#39;行銷&amp;業務&#39;</span><span class="p">},</span>
</span><span class='line'>      <span class="p">{</span><span class="ss">:downcase</span><span class="o">=&gt;</span><span class="no">CAT_WEB_SOCIAL_MANAGER</span><span class="p">,</span> <span class="ss">:titleize</span><span class="o">=&gt;</span><span class="s1">&#39;社群管理&#39;</span><span class="p">}</span>
</span><span class='line'>  <span class="o">]</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">category_str</span>
</span><span class='line'>   <span class="no">Job</span><span class="o">.</span><span class="n">categories</span><span class="o">.</span><span class="n">each</span> <span class="p">{</span> <span class="o">|</span><span class="n">item</span><span class="o">|</span>
</span><span class='line'>     <span class="k">return</span> <span class="n">item</span><span class="o">[</span><span class="ss">:titleize</span><span class="o">]</span> <span class="k">if</span> <span class="n">item</span><span class="o">[</span><span class="ss">:downcase</span><span class="o">]</span> <span class="o">==</span> <span class="nb">self</span><span class="o">.</span><span class="n">job_category</span>
</span><span class='line'>   <span class="p">}</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>會這樣設計的原因是：通常程式設計師會想要對一個值 assign 一個數字，又想要用一個英文字包裝它，以方便取用。</p>

<p>這樣設計的手法很常見，但其實這樣的設計一聞下來就有「壞味道」。我自己也是思考了這個問題好幾年，換了非常多寫法，直到最近終於想出一個比較好的方式去設計 select。</p>

<h2>翻修</h2>

<p>我設計出一個比較漂亮的方式去改寫這樣的 code。當中用到了 <a href="https://github.com/binarylogic/settingslogic">settings_logic</a> 與 <a href="https://github.com/plataformatec/simple_form">simple_form</a> 這兩個 gem。</p>

<h3>Simple Form</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&lt;</span><span class="sx">%= f.input :job_category, :label =</span><span class="o">&gt;</span> <span class="s2">&quot;職務類別&quot;</span> <span class="k">do</span> <span class="sx">%&gt;</span>
</span><span class='line'><span class="sx">    &lt;%= f.select :job_category, Job.categories %&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="sx">% end </span><span class="o">%&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>SettingsLogic</h3>

<figure class='code'><figcaption><span>app/models/job_data.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">JobData</span> <span class="o">&lt;</span> <span class="no">Settingslogic</span>
</span><span class='line'>  <span class="n">source</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="no">Rails</span><span class="o">.</span><span class="n">root</span><span class="si">}</span><span class="s2">/config/job_data.yml&quot;</span>
</span><span class='line'>  <span class="n">namespace</span> <span class="no">Rails</span><span class="o">.</span><span class="n">env</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>把數值塞到 settings</p>

<figure class='code'><figcaption><span>config/job_data.yml</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">defaults</span><span class="p">:</span> <span class="o">&amp;</span><span class="n">defaults</span>
</span><span class='line'>   <span class="n">job_categories</span><span class="p">:</span>
</span><span class='line'>      <span class="n">other</span> <span class="p">:</span> <span class="mi">0</span>
</span><span class='line'>      <span class="n">web_developer</span><span class="p">:</span> <span class="mi">1</span>
</span><span class='line'>      <span class="n">designer</span><span class="p">:</span> <span class="mi">2</span>
</span><span class='line'>      <span class="n">app_developer</span><span class="p">:</span> <span class="mi">3</span>
</span><span class='line'>      <span class="n">marketing_sales</span><span class="p">:</span> <span class="mi">4</span>
</span><span class='line'>      <span class="n">web_social_manager</span><span class="p">:</span> <span class="mi">5</span>
</span><span class='line'><span class="n">development</span><span class="p">:</span>
</span><span class='line'>  <span class="o">&lt;&lt;</span><span class="p">:</span> <span class="o">*</span><span class="n">defaults</span>
</span><span class='line'>
</span><span class='line'><span class="nb">test</span><span class="p">:</span>
</span><span class='line'>  <span class="o">&lt;&lt;</span><span class="p">:</span> <span class="o">*</span><span class="n">defaults</span>
</span><span class='line'>
</span><span class='line'><span class="n">production</span><span class="p">:</span>
</span><span class='line'>  <span class="o">&lt;&lt;</span><span class="p">:</span> <span class="o">*</span><span class="n">defaults</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Rails 內建的 I18n</h3>

<figure class='code'><figcaption><span>config/locals/job.zh-TW.yml</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="s2">&quot;zh-TW&quot;</span><span class="p">:</span>
</span><span class='line'>   <span class="n">job_categories</span><span class="p">:</span>
</span><span class='line'>      <span class="n">other</span> <span class="p">:</span> <span class="s2">&quot;其他職缺&quot;</span>
</span><span class='line'>      <span class="n">web_developer</span><span class="p">:</span> <span class="s2">&quot;網站設計師&quot;</span>
</span><span class='line'>      <span class="n">designer</span><span class="p">:</span> <span class="s2">&quot;美術設計師&quot;</span>
</span><span class='line'>      <span class="n">app_developer</span><span class="p">:</span> <span class="s2">&quot;手機APP開發&quot;</span>
</span><span class='line'>      <span class="n">marketing_sales</span><span class="p">:</span> <span class="s2">&quot;行銷&amp;業務&quot;</span>
</span><span class='line'>      <span class="n">web_social_manager</span><span class="p">:</span> <span class="s2">&quot;社群管理&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Model : Job</h3>

<p>JobData.job_categories 拉出來會是這樣的內容：</p>

<p><code>{"other"=&gt;0, "web_developer"=&gt;1, "designer"=&gt;2, "app_developer"=&gt;3, "marketing_sales"=&gt;4, "web_social_manager"=&gt;5}</code></p>

<p>但 select 要吃的是： <code>[["其他職缺", 0],["網站設計師",1]]</code> 這樣的 Array。所以我們再用 map 去對 I18n 求值包裝。</p>

<figure class='code'><figcaption><span>app/modesl/job.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Job</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">categories</span>
</span><span class='line'>    <span class="no">JobData</span><span class="o">.</span><span class="n">job_categories</span><span class="o">.</span><span class="n">map</span><span class="p">{</span> <span class="o">|</span><span class="n">k</span><span class="p">,</span><span class="n">v</span><span class="o">|</span> <span class="o">[</span><span class="no">I18n</span><span class="o">.</span><span class="n">t</span><span class="p">(</span><span class="s2">&quot;job_categories.</span><span class="si">#{</span><span class="n">k</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">),</span><span class="n">v</span><span class="o">]</span> <span class="p">}</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Helper</h3>

<p>最後是如何把 <code>category_str</code> 從 model 搬出來。</p>

<h4>這樣很明顯是錯的</h4>

<ul>
<li>這應該是 view 要做的事。</li>
<li>應該善用 Ruby 的特性，而不是跑 each 比較拿數值。</li>
</ul>


<figure class='code'><figcaption><span>app/modesl/job.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">category_str</span>
</span><span class='line'>   <span class="no">Job</span><span class="o">.</span><span class="n">categories</span><span class="o">.</span><span class="n">each</span> <span class="p">{</span> <span class="o">|</span><span class="n">item</span><span class="o">|</span>
</span><span class='line'>     <span class="k">return</span> <span class="n">item</span><span class="o">[</span><span class="ss">:titleize</span><span class="o">]</span> <span class="k">if</span> <span class="n">item</span><span class="o">[</span><span class="ss">:downcase</span><span class="o">]</span> <span class="o">==</span> <span class="nb">self</span><span class="o">.</span><span class="n">job_category</span>
</span><span class='line'>   <span class="p">}</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h4>利用 Ruby 的 Hash 的 key，從翻譯檔裡面拿出正確的中文。</h4>

<figure class='code'><figcaption><span>app/helpers/job_helper.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="k">def</span> <span class="nf">render_job_category</span><span class="p">(</span><span class="n">job</span><span class="p">)</span>
</span><span class='line'>    <span class="n">key</span> <span class="o">=</span> <span class="no">JobData</span><span class="o">.</span><span class="n">job_categories</span><span class="o">.</span><span class="n">key</span><span class="p">(</span><span class="n">job</span><span class="o">.</span><span class="n">job_category</span><span class="p">)</span>
</span><span class='line'>    <span class="no">I18n</span><span class="o">.</span><span class="n">t</span><span class="p">(</span><span class="s2">&quot;job_categories.</span><span class="si">#{</span><span class="n">key</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h3>其他</h3>

<p>如果以後想拿數值：</p>

<p>可以這樣下：</p>

<ul>
<li><code>JobData.job_categories[:designer]</code> => 2</li>
<li><code>I18n.t("job_categories.designer")</code> => &#8220;美術設計師&#8221;</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[讀書筆記] CSS 基礎技巧懶人包]]></title>
    <link href="http://blog.xdite.net/posts/2012/01/29/css-tricks-summary/"/>
    <updated>2012-01-29T14:24:00+08:00</updated>
    <id>http://blog.xdite.net/posts/2012/01/29/css-tricks-summary</id>
    <content type="html"><![CDATA[<p>前幾天 Code School 的 <a href="http://www.codeschool.com/courses/css-cross-country">CSS Cross Country</a> 課程釋出了。這一集是我相當期待的一集，整理和澄清了非常多「非常基礎但如果觀念不好」就會搞得一塌糊塗的 CSS 知識。</p>

<p>看完把筆記整理在這裡，不過相較於原網站，我寫的算是非常簡陋的版本。</p>

<p>我相當強烈推薦大家購買回去和練習，相信會對自己的 CSS 掌握能力有高度的提升。</p>

<h2>Ch1</h2>

<h3>Style 生效的位置</h3>

<ul>
<li>inline style</li>
<li>在 <code>&lt;head&gt; &lt;/head&gt;</code> 裡面</li>
<li>external link: 如 <code>link rel="stylesheet" href="style.css"</code></li>
</ul>


<h3>Selectos</h3>

<ul>
<li>Element selector</li>
<li>Class selector</li>
<li>ID selector</li>
<li>Compound selector : <code>h1#header</code></li>
</ul>


<h3>Advanced Selector</h3>

<p>ref: <a href="http://coding.smashingmagazine.com/2009/08/17/taming-advanced-css-selectors/">Taming Advanced CSS Selectors</a></p>

<ul>
<li><code>#sidebar h2</code>— 0, 1, 0, 1</li>
<li><code>h2.title</code> — 0, 0, 1, 1</li>
<li><code>h2 + p</code> — 0, 0, 0, 2</li>
<li><code>#sidebar p:first-line</code> — 0, 1, 0, 2</li>
</ul>


<h3>cascade order</h3>

<p>優先權照</p>

<ul>
<li>external <code>&lt;link&gt;</code></li>
<li><code>&lt;head&gt;</code></li>
<li>inline style</li>
<li>!important</li>
<li>相同的 selector 重複的屬性，後寫的會覆蓋前面的。沒有重複的則會合併。</li>
</ul>


<h3>Float</h3>

<h4>定義</h4>

<ul>
<li>把元素從傳統的 document flow 中移除，然後浮動掛在指定的邊界上。</li>
<li>其他在 parent 元素的內容會繞著這個 float 的元素排列。</li>
</ul>


<h4>種類</h4>

<ul>
<li>float: left</li>
<li>float: right</li>
<li>float: none</li>
</ul>


<h4>Stacking order</h4>

<ul>
<li>浮動的元素從 parent 的左/右邊界開始排，不夠放的話會找另下一個可以停泊的邊界繼續排</li>
<li>如果浮動的元素高度不同，例如左邊的特別長，旁邊的元素的比他短，則下一個停泊的不會是左邊界，而是會停在左邊元素的右邊。（下一個可以停泊的邊界原則）</li>
</ul>


<h4>floating left &amp; right</h4>

<p>同時使用 float:left 與 float:right，寬度夠的話，會分列兩邊。如果寬度不夠，以先 claim 的會是第一排(靠右），後 claim 的會被扔到下一排（靠左）去。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;div&gt;</span>
</span><span class='line'>  <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;content1&quot;</span><span class="nt">&gt;</span> <span class="nt">&lt;/div&gt;</span>
</span><span class='line'>  <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;content2&quot;</span><span class="nt">&gt;</span> <span class="nt">&lt;/div&gt;</span>
</span><span class='line'><span class="nt">&lt;/div&gt;</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nc">.content1</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">float</span><span class="o">:</span><span class="k">right</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="nc">.content2</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">float</span><span class="o">:</span><span class="k">left</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Ch2</h2>

<h3>clearfix</h3>

<h4>為什麼要使用  cleafix</h4>

<ul>
<li>狀況一：float 元素可能比旁邊的非 float 元素高。（因為 float 沒有高度）所以下一段會黏上來。</li>
<li>狀況二：所有的 children 都是 float。（因為 float 沒有高度）所以 container 看起來會太短。</li>
</ul>


<h5>常用  clearfix 技巧</h5>

<h6>clear with a subsequent elemet ( 在下面的元素放 <code>clear: both</code> )</h6>

<ul>
<li>但這一招移動 div 順序就會爆炸</li>
<li>背景和邊界不會被展延</li>
</ul>


<p>失敗！</p>

<h6>manual clearing （手動在下面塞一個空的 div，對它下 <code>clear: both</code>)</h6>

<ul>
<li>需要塞一個空的 element</li>
<li>看起來很礙眼</li>
</ul>


<h4>正解技巧 ( self-cleared )</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'>
</span><span class='line'><span class="nc">.group</span><span class="nd">:before</span><span class="o">,</span> <span class="nc">.group</span><span class="nd">:after</span> <span class="p">{</span>
</span><span class='line'>   <span class="k">content</span><span class="o">:</span> <span class="s2">&quot;&quot;</span><span class="p">;</span>
</span><span class='line'>   <span class="k">display</span><span class="o">:</span> <span class="n">table</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="nc">.group</span><span class="nd">:after</span> <span class="p">{</span>
</span><span class='line'>   <span class="k">clear</span><span class="o">:</span> <span class="k">both</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="nc">.group</span> <span class="p">{</span>
</span><span class='line'>   <span class="n">zoom</span><span class="o">:</span> <span class="m">1</span><span class="p">;</span> <span class="c">/* IE6&amp;7 */</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h5>.group 要下在 parent node</h5>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;group&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>   <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;float-left&quot;</span><span class="nt">&gt;</span> <span class="nt">&lt;/div&gt;</span>
</span><span class='line'>   <span class="nt">&lt;p&gt;</span> blah <span class="nt">&lt;/p&gt;</span>
</span><span class='line'><span class="nt">&lt;/div&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Inheritance &amp; Specificity</h3>

<ul>
<li>巢狀元素會自動繼承 parent 的 style</li>
<li>可以 override parent 的 style</li>
<li>id 比 class 的優先權高</li>
</ul>


<h4>優先權算法</h4>

<p>0,0,0,0</p>

<ul>
<li>第一個數字：inline style</li>
<li>第二個數字：of ID selectors</li>
<li>第三個數字：of class selectors</li>
<li>第四個數字：of element seletors</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>p { color: #fff; }  # 0,0,0,1
</span><span class='line'>.intro { color: #98c7d4; } # 0,0,1,0
</span><span class='line'>#header { color: #444245; } # 0,1,0,0
</span><span class='line'><span class="nt">&lt;h1</span> <span class="na">style=</span><span class="s">&quot;color: #000;&quot;</span><span class="nt">&gt;</span>Mogul<span class="nt">&lt;/h1&gt;</span> # 1,0,0,0
</span><span class='line'>p { color: #fff !important; }
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>越大的可以把祖先蓋掉。</p>

<p>延伸閱讀：[Don’t use ID selectors in CSS]http://screwlewse.com/2010/07/dont-use-id-selectors-in-css/</p>

<h2>Ch3</h2>

<h3>box model</h3>

<p>由內往外是</p>

<ul>
<li>content area</li>
<li>padding area</li>
<li>border area</li>
<li>margin area</li>
</ul>


<p>寬度計算</p>

<p>box width =  content width + padding width + border width</p>

<h3>overflow</h3>

<ul>
<li>visible: the default value, which allows content to extend beyond container boundaries</li>
<li>auto:  adds a scrollbar as needed when content overflows</li>
<li>hidden: hides content that extends beyond the container</li>
<li>scroll:  adds a scrollbar at all times, even if unneeded</li>
</ul>


<h3>positioning</h3>

<p>有四種</p>

<ul>
<li>static</li>
<li>relative</li>
<li>absolute</li>
<li>fixed</li>
</ul>


<p>定義</p>

<ul>
<li>Elements have a position value of static by default</li>
<li>Using a value other than static causes an object to become a positioned element</li>
<li>Positioned elements may use the top, left, bottom, and right properties for placement</li>
</ul>


<h4>Relative positioning</h4>

<p>Renders in the normal flow, then shifted via positioning properties</p>

<h4>Absolute positioning</h4>

<p>Takes an element out of the normal flow for manual positioning</p>

<h4>定位技巧</h4>

<p>parent element 下 relative，內部需要定位的元素下 absolute，就不會超過邊界。</p>

<h4>Fixed positioning</h4>

<p>Affixes an element to a specific place in the window, where it will stay regardless of scrolling。（在螢幕上永遠保持不動，釘住）</p>

<h3>z-index</h3>

<ul>
<li>No z-index or equal z-index = overlap determined by placement in DOM （後放的疊在先放的上面）</li>
<li>Higher values appear above lower values（ z-index 比較大的在比較上面）</li>
<li>Elements must be positioned for z-index to take effect. Use relative if you&#8217;re not interested in moving the object （必須先被「定位」，才能使用 z-index)</li>
</ul>


<p>延伸閱讀： <a href="https://developer.mozilla.org/en/Understanding_CSS_z-index">Understanding CSS z-index</a></p>

<h2>Ch4</h2>

<h3>整理 CSS code</h3>

<h4>用 <code>,</code></h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>p .content h3{
</span><span class='line'>   color: red;
</span><span class='line'>}
</span></code></pre></td></tr></table></div></figure>


<h4>padding/margin 上右下左</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>.content {
</span><span class='line'>   margin: 15px 10px 0 20px; /* top right bottom left */ }
</span><span class='line'>}
</span></code></pre></td></tr></table></div></figure>


<h4>其他綜合</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'>   <span class="nt">font</span><span class="o">:</span> <span class="nt">16px</span><span class="o">/</span><span class="nt">18px</span> <span class="nt">bold</span> <span class="nt">italic</span> <span class="nt">sans-serif</span><span class="o">;</span> <span class="c">/* size/line-height weight style family */</span>
</span><span class='line'>   <span class="nt">background</span><span class="o">:</span> <span class="nf">#000</span> <span class="nt">url</span><span class="o">(</span><span class="nt">image</span><span class="nc">.jpg</span><span class="o">)</span> <span class="nt">no-repeat</span> <span class="nt">center</span> <span class="nt">top</span><span class="o">;</span> <span class="c">/* color image repeat x-pos y-pos */</span>
</span><span class='line'>   <span class="nt">list-style</span><span class="o">:</span> <span class="nt">disc</span> <span class="nt">inside</span> <span class="nt">none</span><span class="o">;</span> <span class="c">/* style position image */</span>
</span><span class='line'>   <span class="nt">margin</span> <span class="nt">or</span> <span class="nt">padding</span><span class="o">:</span> <span class="nt">0</span> <span class="nt">10px</span> <span class="nt">0</span> <span class="nt">10px</span> <span class="o">/</span> <span class="nt">0</span> <span class="nt">10px</span> <span class="nt">0</span> <span class="o">/</span> <span class="nt">0</span> <span class="nt">10px</span><span class="o">;</span> <span class="c">/* top right bottom left / top right&amp;left bottom / top&amp;bottom right&amp;left */</span>
</span><span class='line'>   <span class="nt">border</span><span class="o">:</span> <span class="nt">3px</span> <span class="nt">solid</span> <span class="nf">#ccc</span><span class="o">;</span> <span class="c">/* width style color */</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Display types</h3>

<h4>block</h4>

<ul>
<li>Stretch the full width of their container ( container 有多寬就延伸到多寬)</li>
<li>Behave as though there is a line break before and after the element （有斷行效果）</li>
<li>Full box model can be manipulated￼￼Display Types</li>
</ul>


<p>Block elements: Tags that are block-level by default: <code>&lt;div&gt;</code>, <code>&lt;p&gt;</code>, <code>&lt;ul</code>>, <code>&lt;ol&gt;</code>, <code>&lt;li&gt;</code> and <code>&lt;h1&gt;</code> through <code>&lt;h6&gt;</code>.</p>

<h4>inline</h4>

<ul>
<li>Typically found within block-level elements (通常可以在 block 元素裡找到)</li>
<li>Only take up the space of the content inside （只有內容的寬度）</li>
<li>Do not generate a line break before and after the content （沒有斷行效果）</li>
</ul>


<p>Tags that are inline by default include <code>&lt;span&gt;</code>, <code>&lt;a&gt;</code>, <code>&lt;em&gt;</code>, <code>&lt;img&gt;</code></p>

<h4>inline-block</h4>

<ul>
<li>Same flow as an inline element but behave as a block element (可以玩 box model)</li>
</ul>


<h3>水平置中技巧</h3>

<h4>Centering a block-level element</h4>

<ul>
<li>Define a width, and the element width must be less than that of the parent container</li>
<li>margin: 0 auto;</li>
</ul>


<h3>Centering inline and inline-block elements</h3>

<ul>
<li>text-align: center</li>
</ul>


<h2>Ch5</h2>

<h3>margin 重疊問題</h3>

<p>多個 margin 疊在一起，會有 margin 重疊問題（ margin 會合併計算，取最大的。假設第一個 div margin-bottom: 40px，第二個 div margin-top: 20px。則他們的距離會是 40px ，而不是 60px）。</p>

<h4>解決重疊技巧：</h4>

<p>Collapsing margins will not occur when one or more block element has:</p>

<ul>
<li>Padding or border</li>
<li>Relative or absolute positioning</li>
<li>A float left or right</li>
</ul>


<p>延伸閱讀： <a href="http://www.w3.org/TR/CSS2/box.html#collapsing-margins">Collapsing margins</a></p>

<h3>rest &amp; normalize</h3>

<p><a href="http://meyerweb.com/eric/tools/css/reset/">Eric Meyer&#8217;s Reset CSS</a>
<a href="http://necolas.github.com/normalize.css/">Normalize.css</a></p>

<h2>Ch6</h2>

<h3>Content Image 與 Layout image</h3>

<ul>
<li>Content should be marked up as inline images</li>
<li>Layout elements should be defined as background images</li>
</ul>


<h3>Image Cropping</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;li</span> <span class="na">class=</span><span class="s">&quot;crop&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;img</span> <span class="na">src=</span><span class="s">&quot;snowboard.jpg&quot;</span> <span class="na">alt=</span><span class="s">&quot;Snowboard&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'><span class="nt">&lt;/li&gt;</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nt">crop</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">height</span><span class="o">:</span> <span class="m">300px</span><span class="p">;</span>
</span><span class='line'>  <span class="k">width</span><span class="o">:</span> <span class="m">400px</span><span class="p">;</span>
</span><span class='line'>  <span class="k">overflow</span><span class="o">:</span> <span class="k">hidden</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="nc">.crop</span> <span class="nt">img</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">height</span><span class="o">:</span> <span class="m">300px</span><span class="p">;</span>
</span><span class='line'>  <span class="k">width</span><span class="o">:</span> <span class="k">auto</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>其實沒有多少好的方法，建議取代方案：</p>

<ul>
<li>Resize images to a square &lt; height and width of all of your images</li>
<li>Resize them server-side</li>
<li>Provide image-uploading instructions in your CMS</li>
</ul>


<p>延伸閱讀：<a href="http://clagnut.com/sandbox/imagetest">Experiments with wide images</a></p>

<h2>Ch7</h2>

<h3>圖片取代文字技巧</h3>

<p>使用 text-indent: -9999px;</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nc">.logo</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">background</span><span class="o">:</span> <span class="sx">url(logo.png)</span><span class="p">;</span>
</span><span class='line'>    <span class="k">display</span><span class="o">:</span> <span class="k">block</span><span class="p">;</span>
</span><span class='line'>    <span class="k">height</span><span class="o">:</span> <span class="m">100px</span><span class="p">;</span>
</span><span class='line'>    <span class="k">width</span><span class="o">:</span> <span class="m">200px</span><span class="p">;</span>
</span><span class='line'>    <span class="k">text-indent</span><span class="o">:</span> <span class="m">-9999px</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<h3>css spirite 技巧</h3>

<h4>為什麼要使用 CSS spirite</h4>

<p>Issues with swapping background images:</p>

<ul>
<li>Adds an extra HTTP request</li>
<li>Image is not preloaded （網路不夠快時，hover 感覺畫面會閃一下）</li>
</ul>


<p>Advantages to the sprite approach:</p>

<ul>
<li>Reduces number of HTTP image requests</li>
<li>Removes loading flash / need for preload</li>
</ul>


<h4>使用方法</h4>

<p>Multiple images &amp; states:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'> <span class="nc">.twitter</span><span class="o">,</span> <span class="nc">.github</span> <span class="p">{</span>
</span><span class='line'>     <span class="k">background</span><span class="o">:</span> <span class="sx">url(social.png)</span><span class="p">;</span>
</span><span class='line'>     <span class="k">display</span><span class="o">:</span> <span class="k">block</span><span class="p">;</span>
</span><span class='line'>     <span class="k">height</span><span class="o">:</span> <span class="m">100px</span><span class="p">;</span>
</span><span class='line'>     <span class="k">width</span><span class="o">:</span> <span class="m">100px</span><span class="p">;</span>
</span><span class='line'>     <span class="k">text-indent</span><span class="o">:</span> <span class="m">-9999px</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="nc">.github</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">background-position</span><span class="o">:</span> <span class="m">-100px</span> <span class="m">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="nc">.twitter</span><span class="nd">:hover</span><span class="o">,</span> <span class="nc">.twitter</span><span class="nd">:focus</span> <span class="p">{</span>
</span><span class='line'>   <span class="k">background-position</span><span class="o">:</span> <span class="m">0</span> <span class="m">-100px</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="nc">.github</span><span class="nd">:hover</span><span class="o">,</span> <span class="nc">.github</span><span class="nd">:focus</span> <span class="p">{</span>
</span><span class='line'>   <span class="k">background-position</span><span class="o">:</span> <span class="m">-100px</span> <span class="m">-100px</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>延伸閱讀: <a href="http://www.spritecow.com/">Spritecow</a></p>

<h2>Ch8</h2>

<h2>psuedo class</h2>

<p>Allow you to conditionally select an element based on state or position</p>

<ul>
<li>last-child</li>
<li>nth-child (an+b)</li>
</ul>


<p>延伸閱讀：</p>

<ul>
<li><a href="http://css-tricks.com/pseudo-class-selectors/">Meet the Pseudo Class Selectors</a></li>
<li><a href="https://developer.mozilla.org/en/CSS_Reference">CSS Reference</a> # 支援瀏覽器列表</li>
</ul>


<h2>psuedo element</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;article&gt;</span>
</span><span class='line'>   <span class="nt">&lt;p&gt;</span>Coffee? Hah! Our cocoa is far better.<span class="nt">&lt;/p&gt;</span>
</span><span class='line'>   <span class="nt">&lt;p&gt;</span>Visit from 4-5 for cocoa happy hour!<span class="nt">&lt;/p&gt;</span>
</span><span class='line'><span class="nt">&lt;/article&gt;</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nt">article</span> <span class="nt">p</span><span class="nd">:last-child:after</span> <span class="p">{</span>
</span><span class='line'>   <span class="k">content</span><span class="o">:</span> <span class="s1">&#39;\2744&#39;</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>利用 before, after 技巧</h3>

<h4>取代掉無用 element</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;blockquote&gt;</span>
</span><span class='line'>Coffee? Hah! Our cocoa is far better.
</span><span class='line'><span class="nt">&lt;span&gt;&lt;/span&gt;</span>
</span><span class='line'><span class="nt">&lt;/blockquote&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>原本是對 <code>blockquote span</code> 下 styling。</p>

<p>改成對 <code>blockquote:before</code> 下 styling。</p>

<p>html 可以砍成</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;blockquote&gt;</span>
</span><span class='line'>Coffee? Hah! Our cocoa is far better.
</span><span class='line'><span class="nt">&lt;/blockquote&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h4>利用 before, after 實作縮排</h4>

<p>延伸閱讀：<a href="http://css-tricks.com/pseudo-element-roundup/">A Whole Bunch of Amazing Stuff Pseudo Elements Can Do</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rails 的 cycle helper 以及 CSS 中的 nth-child]]></title>
    <link href="http://blog.xdite.net/posts/2012/01/29/cycle-and-nth-child/"/>
    <updated>2012-01-29T00:03:00+08:00</updated>
    <id>http://blog.xdite.net/posts/2012/01/29/cycle-and-nth-child</id>
    <content type="html"><![CDATA[<p>在設計需要顏色循環的表格時你會怎麼作？</p>

<p><a href="http://www.flickr.com/photos/xdite/6776490237/" title="table by xdite, on Flickr"><img src="http://farm8.staticflickr.com/7157/6776490237_b2418f359b.jpg" width="500" height="146" alt="table"></a></p>

<h2>Rails</h2>

<h3>初入門者</h3>

<h4>使用兩種不同 HTML class : even 與 odd，上不同的顏色</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&lt;</span><span class="sx">% count </span><span class="o">=</span> <span class="mi">0</span> <span class="sx">%&gt;</span>
</span><span class='line'><span class="sx">&lt;table&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="sx">% @items.each </span><span class="k">do</span> <span class="o">|</span><span class="n">item</span><span class="o">|</span> <span class="sx">%&gt;</span>
</span><span class='line'><span class="sx">  &lt;% if count % 2 == 0 %&gt;</span>
</span><span class='line'>    <span class="o">&lt;</span><span class="sx">% css_class </span><span class="o">=</span> <span class="s2">&quot;even &quot;</span><span class="sx">%&gt;</span>
</span><span class='line'><span class="sx">  &lt;% else %&gt;</span>
</span><span class='line'>    <span class="o">&lt;</span><span class="sx">% css_class </span><span class="o">=</span> <span class="s2">&quot;odd&quot;</span> <span class="sx">%&gt;</span>
</span><span class='line'><span class="sx">  &lt;% end %&gt;</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="n">tr</span> <span class="n">class</span><span class="o">=</span><span class="s2">&quot;&lt;%= css_class %&gt;&quot;</span><span class="o">&gt;</span>
</span><span class='line'>    <span class="o">&lt;</span><span class="n">td</span><span class="o">&gt;</span><span class="n">item</span><span class="o">&lt;</span><span class="sr">/td&gt;</span>
</span><span class='line'><span class="sr">  &lt;/</span><span class="n">tr</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="sx">% count </span><span class="o">+=</span> <span class="mi">1</span><span class="sx">%&gt;</span>
</span><span class='line'><span class="sx">&lt;% end %&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="sr">/table&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;% end %&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>懂一點 Ruby</h3>

<h4>Ruby 裡面有 each_with_index，不需要在外部宣告 count</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&lt;</span><span class="n">table</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="sx">% @items.each_with_index </span><span class="k">do</span> <span class="o">|</span><span class="n">item</span><span class="p">,</span> <span class="n">index</span><span class="o">|</span> <span class="sx">%&gt;</span>
</span><span class='line'><span class="sx">  &lt;% if index % 2 == 0 %&gt;</span>
</span><span class='line'>    <span class="o">&lt;</span><span class="sx">% css_class </span><span class="o">=</span> <span class="s2">&quot;even &quot;</span><span class="sx">%&gt;</span>
</span><span class='line'><span class="sx">  &lt;% else %&gt;</span>
</span><span class='line'>    <span class="o">&lt;</span><span class="sx">% css_class </span><span class="o">=</span> <span class="s2">&quot;odd&quot;</span> <span class="sx">%&gt;</span>
</span><span class='line'><span class="sx">  &lt;% end %&gt;</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="n">tr</span> <span class="n">class</span><span class="o">=</span><span class="s2">&quot;&lt;%= css_class %&gt;&quot;</span><span class="o">&gt;</span>
</span><span class='line'>    <span class="o">&lt;</span><span class="n">td</span><span class="o">&gt;</span><span class="n">item</span><span class="o">&lt;</span><span class="sr">/td&gt;</span>
</span><span class='line'><span class="sr">  &lt;/</span><span class="n">tr</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="sx">% end %&gt;</span>
</span><span class='line'><span class="sx">&lt;/table&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>熟 Rails Helper</h3>

<h4>Rails 有 <a href="http://api.rubyonrails.org/classes/ActionView/Helpers/TextHelper.html#method-i-cycle">cycle</a> 這個 helper，可以做出循環效果</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&lt;</span><span class="n">table</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="sx">% @items.each </span><span class="k">do</span> <span class="o">|</span><span class="n">item</span><span class="o">|</span> <span class="sx">%&gt;</span>
</span><span class='line'><span class="sx">  &lt;tr class=&quot;&lt;%= cycle(&quot;odd&quot;, &quot;even&quot;) %&gt;</span><span class="s2">&quot;&gt;</span>
</span><span class='line'><span class="s2">    &lt;td&gt;item&lt;/td&gt;</span>
</span><span class='line'><span class="s2">  &lt;/tr&gt;</span>
</span><span class='line'><span class="s2">&lt;% end %&gt;</span>
</span><span class='line'><span class="s2">&lt;/table&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>熟 CSS</h3>

<h4>使用 pseudo class 中的 <a href="http://reference.sitepoint.com/css/pseudoclass-nthchild">nth-child</a></h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&lt;</span><span class="n">table</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="sx">% @items.each </span><span class="k">do</span> <span class="o">|</span><span class="n">item</span><span class="o">|</span> <span class="sx">%&gt;</span>
</span><span class='line'><span class="sx">  &lt;tr&gt;</span>
</span><span class='line'>    <span class="o">&lt;</span><span class="n">td</span><span class="o">&gt;</span><span class="n">item</span><span class="o">&lt;</span><span class="sr">/td&gt;</span>
</span><span class='line'><span class="sr">  &lt;/</span><span class="n">tr</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="sx">% end %&gt;</span>
</span><span class='line'><span class="sx">&lt;/table&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>用法：<code>:nth-child(an+b)</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nt">tr</span><span class="nd">:nth-child</span><span class="o">(</span><span class="nt">2n</span><span class="o">+</span><span class="nt">1</span><span class="o">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">color</span><span class="o">:</span> <span class="m">#ccc</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="nt">tr</span><span class="nd">:nth-child</span><span class="o">(</span><span class="nt">2n</span><span class="o">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">color</span><span class="o">:</span> <span class="m">#000</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>小結</h2>

<p>快改用 nth-child，不要繼續在 class 裡面寫 even, odd, one, two, three 了 XD</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rails 3.2 新的 Route recognition 引擎 ： Jounery]]></title>
    <link href="http://blog.xdite.net/posts/2012/01/25/rails-3-2-jounery/"/>
    <updated>2012-01-25T20:55:00+08:00</updated>
    <id>http://blog.xdite.net/posts/2012/01/25/rails-3-2-jounery</id>
    <content type="html"><![CDATA[<p>Rails 3.2 四天前 <a href="http://edgeguides.rubyonrails.org/3_2_release_notes.html">Release</a> 了。這次主要的改進幾乎都在效能部分。</p>

<p>最大的改版應該屬於 Route recognition 這部分。原本這部分是由 <a href="http://rubygems.org/gems/rack-mount">rack-mount</a> 擔綱，Aaron Patterson (a.k.a. <a href="http://twitter.com/tenderlove">@tenderlove</a>) 將之抽換成他自己寫的 Gem : <a href="https://github.com/rails/journey">jounery</a>。速度快了非常多倍。</p>

<p>但相關的原理並沒有 <a href="https://github.com/rails/journey">jounery</a> 的 About 頁面並沒有被詳加敘述，</p>

<blockquote><p>SYNOPSIS: Too complex right now. :(</p></blockquote>

<p>不過根據有限的線索，我還是從 @tenderlove 的 slideshare 上挖出來了。</p>

<p>jounery 的原理是用 FSM ( <a href="http://en.wikipedia.org/wiki/Finite-state_machine">Fininte State Machine</a> ) 實做的。有興趣的可以從投影片裡面繼續挖。</p>

<div style="width:425px" id="__ss_10090654"> <strong style="display:block;margin:12px 0 4px"><a href="http://www.slideshare.net/tenderlove/rubyconf-argentina-2011" title="RubyConf Argentina 2011" target="_blank">RubyConf Argentina 2011</a></strong> <iframe src="http://www.slideshare.net/slideshow/embed_code/10090654" width="425" height="355" frameborder="0" marginwidth="0" marginheight="0" scrolling="no"></iframe> <div style="padding:5px 0 12px"> View more <a href="http://www.slideshare.net/" target="_blank">presentations</a> from <a href="http://www.slideshare.net/tenderlove" target="_blank">Aaron Patterson</a> </div> </div>


<h3>其他豆知識：</h3>

<p>ActiveRecord 背後的 SQL 生成引擎 <a href="https://github.com/rails/arel">Arel</a> 背後原理是用 <a href="http://en.wikipedia.org/wiki/Relational_algebra">Relational Algerbra</a> 生成的，可以生成非常複雜的 SQL Query 但又兼顧到效能問題。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[農家樂 (Agricola) - 創業者都應該玩過的一套 Lean Startup 桌遊]]></title>
    <link href="http://blog.xdite.net/posts/2012/01/17/lean-startup-should-play-agricola/"/>
    <updated>2012-01-17T02:13:00+08:00</updated>
    <id>http://blog.xdite.net/posts/2012/01/17/lean-startup-should-play-agricola</id>
    <content type="html"><![CDATA[<p>今天看到 Techorange 的 <a href="http://techorange.com/2012/01/16/%E5%89%B5%E6%8A%95%E5%8C%85%E5%BF%83%E8%8F%9C-vc-%E5%B0%88%E6%AC%84%EF%BC%9A%E5%89%B5%E6%8A%95%E6%9C%80%E5%AE%B3%E6%80%95%E7%9A%84%E9%82%A3%E4%BA%9B%E4%BA%BA-1/">創投包心菜-vc-專欄：創投最害怕的那些人-1</a> 引用了我之前寫的一篇關於創業資金與創業策略的文章： <a href="http://wp.xdite.net/?p=2840">Startup 需不需要一開始注意資金的問題？</a>。</p>

<p>剛好晚上香港推友要來台灣一遊，問我家裡有沒有 <a href="http://www.boardgamer.org/product_info.php?products_id=2999">農家樂 (Agricola)</a> 這套遊戲。突然掉進時光機&#8230;</p>

<p>若是 2008 的我，當時應該寫不出這種關於精實創業的文章。我也可能會像其他人一樣天真，「覺得」作任何網站一定要募很多錢，作一個完美的產品，堅持「純真的想法」到最後，就算遭到嚴重挫敗，也會堅信是自己運氣不好。若有機會重來，絕對再次重蹈覆轍。</p>

<p>後來在事業想法和決策性格上有了大轉變，全因為我玩到了一套遊戲 <a href="http://www.boardgamer.org/product_info.php?products_id=2999">農家樂 (Agricola)</a>。當時我在玩了十場之後，寫下了遊戲感想。</p>

<p>這篇文章被埋在灰塵裡，我覺得很可惜，於是決定再貼一遍。這個遊戲教會我的最重要一件事，就是「<strong>只想放完美的大絕，不懂見機行事，絕對會被天譴到死</strong>」</p>

<h2><a href="http://wp.xdite.net/?p=1459">從農家樂 ( Agricola ) 看 Startup / Website 發展現況與策略</a></h2>

<p>最近迷上打一款 BoardGame：農家樂「Agricola」，玩這個遊戲其實非常有助於我對一些想法的印證，因此花點時間整了下來。</p>

<p>這個遊戲其實並不複雜，也算蠻快結束的。不過新手講解規則可能要很久就是…</p>

<p>大概講解一下遊戲場景：</p>

<blockquote><p>每個玩家經營一對夫妻，起始發給一片農莊，兩間木屋，兩份食物。隨著季節的演變，玩家可以輪流派人出去執行工作。工作大概會有：犁田、種稻、養牲口、生小孩、蓋房 / 翻修、蓋建築物（主要發展卡、次要發展卡）、學習技能（職業卡）、擷取資源（拿木、磚、蘆葦）…這幾類。</p>

<p>執行動作是大家輪流的，如果有人在你之前先搶先犁田了，這一回合其他人就不能犁田。遊戲分為 14 個月 ( 六季 )，每季結束可以繁殖牲畜、收成、但也要支付勞動所得。值得注意的是，通常如果你季節結束，要是每付不出一份糧食（夫妻二人共要支付四份，以此類推），就會得到一張乞討卡（ -3 分），通常拿到乞討卡的人幾乎必輸無疑就是了。</p>

<p>計分標準偏向希望你不能偏廢，少一個達成條件扣一分。但是若達成一個條件，就幾乎加一分以上。最後比計分高低。</p></blockquote>

<p>( 建議各位有興趣的話，買一套回家玩，大致上就能理解我下面說的是什麼。不過這一套不便宜就是了，要 NT 2620 ）</p>

<p>而我非常喜歡這個遊戲的原因，並非最近興起的正夯種田樂。而在於這個遊戲非常考驗玩家隨機的應變能力，以及「不貪心」的忍耐功夫。而這些重點，練起來讓我受益良多…</p>

<p>有這麼誇張？</p>

<p>該怎麼說起呢，我在第一次學習打農家樂時，其實牌拿的不差，但分數卻低的相當難看的…直到回家上了桌遊版，參考了 <a href="http://gist.github.com/206381">chenglap 大大的 Agricola 心得</a>，我才體悟到在這款遊戲中犯了哪些基本人性錯誤。</p>

<p>而回去找朋友打，更從他們的每個犯錯的 move 中學到了更多道理。印證到一些網站發展策略，跟幾年來見聞的心得所見不遠，甚至看到更深的面向，更覺得本款遊戲惠我良多。</p>

<p>下面是整理的一些重點：</p>

<p>( 以下並沒有意思對陪我打牌的朋友有不敬之意，純粹只是拿來舉例佐證）</p>

<h4>1. 別人上一場獲勝的策略，並非就能成為這一場你的致勝主軸，甚至抄襲會成為害死自己的主因。</h4>

<p>農家樂其實是非常注重隨機應變的，通常一個玩家的布局方法會隨著他執行動作的優先順位、場上資源以及 職業 / 次要發展卡而有所變化。有可能這一場我拿的局就適合耕田種菜，但貪心硬要蓋牧場養滿羊反倒害死我自己。</p>

<p>曾經打過一場對手，因為上一局見我生了四個人拿了不少分數（四人 12 分），開局就猛蓋屋生人，結果差一點因為每季糧食湊不到，每到收穫季節就抓襟見肘的局，雖然比其他玩家多一個人，但卻沒多少明顯優勢。</p>

<h4>2. 手上拿了資源，就要適時利用。集了滿山滿谷資源，等到終於想建設時，卻毫無用武之地，也是一種浪費。</h4>

<p>有朋友拿磚拿上癮，手上握了十幾顆磚。進行到遊戲後面，想說集了很多磚，來蓋點烤爐好了。卻發現因為大家覺得缺磚，早早就搶先蓋好烤爐。結果雖然拿了滿手磚，但完全沒有東西可蓋。為了集磚的 move 可以說完全都被浪費。</p>

<h4>3. 搶先卡位以及 perfect combo 未必是正確的道路，甚至是失敗的主因。</h4>

<p>農家樂的特色之一就是，職業卡與次要發展卡相當誘人（每個玩家各發給七張）。有一些卡片組合起來威力無窮，但另一些卡片雖誘人（效果強大）但其廢無比（比如說需要集滿 3 個職業以上才可以施展，但那時候已經接近遊戲尾聲，作用並不大）。</p>

<p>玩家可能費盡心機打出 perfect combo，卻忽略到其實賺的資源以及花費的資源遠不成比例。（因為粗估 28 個 move，可能玩家就花了 7 個以上的 move 在施展卡片，4 個以上的 move 在集施展卡片需要的資源。幾乎佔了一半以上。）</p>

<h4>4. 基本建設的紮實，穩定的 income，才能健康的成長。</h4>

<p>遊戲的 keypoint 就在於糧食匱乏與否（就跟公司現金流 / 獲利程度 ）。養人就是要 做事 + 燒錢，然後用人有效的去賺錢。沒那麼多事可做卻亂燒錢，多養人亂開產品線以為沒差，其實搞得企業上吐下瀉。</p>

<p>因此開場注重的是想辦法建立自己的食物引擎（金流 / 產品健康的運作帶來營收），不虞匱乏才可以隨心所欲有效的施展自己的 move。而非一昧猛攻多人多 move 或者是建造無敵牧場（但其實發現自己到最後什麼動物都抓不到，甚至是養了超多動物物卻買不到烤爐結果做不了食物）。</p>

<h4>5. 別買華而不實的東西，別鑽研很炫卻加分有限的技術。加分有限，應該投資在「有效」（分數夠多）的行動上。</h4>

<p>蓋石屋（要先蓋磚屋才能升級成石屋，此中資源花費多多）其實投資報酬率非常低。木屋夠用就好。</p>

<h4>6. 不會馬上回饋但肯定有正面效益的事，在別人不重視時，可以悄悄地進行。有時候甚至是致勝的關鍵。</h4>

<p>因為在農家樂規則中，每多一塊空地上面沒建設，就會扣一分。因此像犁田這種普通粗活，前期沒人搶，但後期大家搶著犁（但很可惜，一個月只能有一個人犁）。而其實越早犁田 / 種田 其實是蠻不錯的選擇，可以有效衝高 小麥 與 蔬菜 的數量（但並非絕對）。</p>

<h4>7. 回合數有限，效益最大化。</h4>

<p>續上，第五季時有一張不錯的行動：「犁田並播種」。這種就是壓一次 move，卻可以同時做兩個 move 的典型範例。但這時候手上有 麥子 / 蔬菜的人，才多半能顯示押這個 move 的威力。同時，後期其實收穫期非常緊密，因此也只有糧食足夠的人可以安心押這個 move。其他人可能因為糧食緊張在頭疼。</p>

<p>其實做網站的時候，我們是可能犯下一些基本的迷思，更甚是通往地獄卻樂在其中。遊戲中的一些貪婪失恆的場景也反應在網路界現實中</p>

<p>比如：</p>

<ol>
<li>覺得發展 XX 是未來卡位之道，結果蓄積了一堆能力，最後卻完全用不上。</li>
<li>YY 正夯，成本低廉，便覺得浪費一個 move 也無所謂。</li>
<li>為了比敵手更搶先，大幅 hire RD 開發新功能 / 炫功能，卻忽略了自己體質或者是現金流並不健康，結果就是 A 做不好，B 也做不好，RD 累到炸。</li>
<li>看到敵手 F 領先，便花大錢狂投人力抄襲對方，到最後一刻才發現自己體質完全不適合這樣玩，最後搞得自己噴掉。</li>
<li>ZZ 適合大規模環境使用，深信自己用得上，預先砸了一堆 RD 研究。結果完全達不到那個量，浪費成本研發。</li>
<li>開心的用策略打出連環 combo 殺招，上了一連串活動宣傳、廣告、上功能。結果其實在營收上入遠不敷出。</li>
<li>金主的耐心與底線以及 founder 的熱情，通常也只有六個季 ( 18 個月）。隨意在任何一個月亂 move ，看似輕忽，其實是一種嚴重浪費…</li>
</ol>


<p>特別在熬夜打完兩場農家樂後，用僅存一點的清醒意識記之。</p>

<p>======</p>

<h2>感想</h2>

<p>兩年多前寫的感觸，放到目前還是一點沒變…</p>

<p>其實關於「創業」主題的桌遊，我還寫過一篇 <a href="http://wp.xdite.net/?p=894">相當歡樂的桌上遊戲「Burn Rate」</a>。比較偏向人力資源使用的。</p>

<p>Burnrate 這篇文章遠遠比 Agricola 那篇文章有名，我也不懂為什麼。大概是因為所謂的 <a href="http://en.wikipedia.org/wiki/Lean_Startup">Lean Startup</a> 這個概念最近才比較紅吧。</p>

<p>廣告一下：大年初五我在我家開桌遊團，限八人。歡迎<a href="http://registrano.com/events/35a6a1">報名</a>。打桌遊和大食團。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[如何運用 / 設計 Rails Helper (3)]]></title>
    <link href="http://blog.xdite.net/posts/2012/01/15/how-to-design-helper-3/"/>
    <updated>2012-01-15T16:08:00+08:00</updated>
    <id>http://blog.xdite.net/posts/2012/01/15/how-to-design-helper-3</id>
    <content type="html"><![CDATA[<p>本系列其他文章：</p>

<ul>
<li><a href="http://blog.xdite.net/posts/2011/12/08/how-to-design-helpers/">如何運用 / 設計 Rails Helper (1)</a></li>
<li><a href="http://blog.xdite.net/posts/2011/12/09/how-to-design-helpers-2/">如何運用 / 設計 Rails Helper (2)</a></li>
</ul>


<p>===</p>

<h2>Helper AntiPatterns</h2>

<p>Helper （輔助方法）的存在目的是用來輔助整理 View 中內嵌的複雜 Ruby 程式碼。設計得當的 Helper 可以加速專案的開發，以及增進程式的可讀性。然而設計不好的 Helper 卻可能造成嚴重的反效果。</p>

<p>以下列舉常見的幾種糟糕的 Helper 設計模式：</p>

<h3>1. 矯往過正：用 Helper 作 partial 該做的事</h3>

<p>有些開發者以為 partial 效率是低下的，刻意不使用 partial，而使用 Helper 完成所有的動作。就將需要重複使用的 HTML 通通寫成了 Ruby code，串接成 HTML：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">show_index_block</span><span class="p">(</span><span class="n">block_name</span><span class="p">,</span> <span class="n">post</span><span class="p">,</span> <span class="n">is_show_game</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">block_title</span> <span class="o">=</span> <span class="n">content_tag</span><span class="p">(</span><span class="ss">:h3</span><span class="p">,</span> <span class="n">block_name</span><span class="p">)</span>
</span><span class='line'>  <span class="n">section_header</span> <span class="o">=</span> <span class="n">content_tag</span><span class="p">(</span><span class="ss">:div</span><span class="p">,</span> <span class="n">block_title</span><span class="p">,</span> <span class="ss">:class</span> <span class="o">=&gt;</span> <span class="s2">&quot;section-header&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">game_name</span> <span class="o">=</span> <span class="n">is_show_game</span> <span class="p">?</span> <span class="s2">&quot;【 </span><span class="si">#{</span><span class="n">post</span><span class="o">.</span><span class="n">games</span><span class="o">.</span><span class="n">first</span><span class="o">.</span><span class="n">name</span><span class="si">}</span><span class="s2"> 】&quot;</span> <span class="p">:</span> <span class="s2">&quot;&quot;</span>
</span><span class='line'>  <span class="n">title</span> <span class="o">=</span> <span class="n">content_tag</span><span class="p">(</span><span class="ss">:h4</span><span class="p">,</span> <span class="n">link_to</span><span class="p">(</span><span class="s2">&quot;</span><span class="si">#{</span><span class="n">game_name</span><span class="si">}</span><span class="s2"> </span><span class="si">#{</span><span class="n">post</span><span class="o">.</span><span class="n">title</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">,</span> <span class="n">post_path</span><span class="p">(</span><span class="n">post</span><span class="p">)))</span>
</span><span class='line'>  <span class="n">image</span> <span class="o">=</span> <span class="n">content_tag</span><span class="p">(</span><span class="ss">:div</span><span class="p">,</span> <span class="n">render_post_image</span><span class="p">(</span><span class="n">post</span><span class="p">),</span> <span class="ss">:class</span> <span class="o">=&gt;</span> <span class="s2">&quot;thumbnail&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">content</span> <span class="o">=</span> <span class="n">content_tag</span><span class="p">(</span><span class="ss">:p</span><span class="p">,</span> <span class="n">truncate</span><span class="p">(</span> <span class="n">post</span><span class="o">.</span><span class="n">content</span><span class="p">,</span> <span class="ss">:length</span> <span class="o">=&gt;</span> <span class="mi">100</span><span class="p">))</span>
</span><span class='line'>  <span class="n">section_content</span> <span class="o">=</span> <span class="n">content_tag</span><span class="p">(</span><span class="ss">:div</span><span class="p">,</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">title</span><span class="si">}#{</span><span class="n">image</span><span class="si">}#{</span><span class="n">content</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">,</span> <span class="ss">:class</span> <span class="o">=&gt;</span> <span class="s2">&quot;section-content&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">section_footer</span> <span class="o">=</span> <span class="n">content_tag</span><span class="p">(</span><span class="ss">:div</span><span class="p">,</span> <span class="n">link_to</span><span class="p">(</span><span class="s2">&quot;閱讀全文&quot;</span><span class="p">,</span> <span class="n">post_path</span><span class="p">(</span><span class="n">post</span><span class="p">)),</span> <span class="ss">:class</span> <span class="o">=&gt;</span> <span class="s2">&quot;section-footer&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="n">content_tag</span><span class="p">(</span><span class="ss">:div</span><span class="p">,</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">section_header</span><span class="si">}#{</span><span class="n">section_content</span><span class="si">}#{</span><span class="n">section_footer</span><span class="si">}</span><span class="s2">&quot;</span> <span class="p">,</span> <span class="ss">:class</span> <span class="o">=&gt;</span> <span class="s2">&quot;article-teaser&quot;</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Helper 的作用只是協助整理 HTML 中的邏輯程式碼，若有大片 HTML 需要重複使用，應該需要利用 partial 機制進行 HTML 的重複利用。這樣的寫法，非但效率低下（可以用 HTML 產生，卻使用 Ruby 呼叫 Tag Helper，且製造大量 Ruby Object），而且更降低程式的可讀性，其他維護者將難以對這樣的 DOM 進行後續的維護翻修。</p>

<h3>2. 容易混淆：在 Helper 裡面穿插 HTML tag</h3>

<p>這也是另外一個矯枉過正的例子，不過剛好相反，因為覺得使用 Ruby code 產生 HTML tag 可能浪費效能，而直接插入 HTML 在 Helper 裡面與 Ruby Code 混雜。結果造成維護上的困難。因為 Ruby 中的字串是使用雙引號<code>"</code>，而 HTML 也是使用雙引號<code>"</code>，，所以就必須特別加入 <code>\"</code> 跳脫，否則就可能造成 syntax error。</p>

<h4>錯誤</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">post_tags_tag</span><span class="p">(</span><span class="n">post</span><span class="p">,</span> <span class="n">opts</span> <span class="o">=</span> <span class="p">{})</span>
</span><span class='line'>  <span class="c1"># ....</span>
</span><span class='line'>   <span class="n">raw</span> <span class="n">tags</span><span class="o">.</span><span class="n">collect</span> <span class="p">{</span> <span class="o">|</span><span class="n">tag</span><span class="o">|</span>  <span class="s2">&quot;&lt;a href=</span><span class="se">\&quot;</span><span class="si">#{</span><span class="n">posts_path</span><span class="p">(</span><span class="ss">:tag</span> <span class="o">=&gt;</span> <span class="n">tag</span><span class="p">)</span><span class="si">}</span><span class="se">\&quot;</span><span class="s2"> class=</span><span class="se">\&quot;</span><span class="s2">tag</span><span class="se">\&quot;</span><span class="s2">&gt;</span><span class="si">#{</span><span class="n">tag</span><span class="si">}</span><span class="s2">&lt;/a&gt;&quot;</span> <span class="p">}</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="s2">&quot;, &quot;</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>大量的 <code>"</code> 混雜在程式碼裡面，嚴重造成程式的可閱讀性，而且發生 syntax error 時難以 debug。</p>

<h4>錯誤</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">post_tags_tag</span><span class="p">(</span><span class="n">post</span><span class="p">,</span> <span class="n">opts</span> <span class="o">=</span> <span class="p">{})</span>
</span><span class='line'>  <span class="c1"># ....</span>
</span><span class='line'>  <span class="n">raw</span> <span class="n">tags</span><span class="o">.</span><span class="n">collect</span> <span class="p">{</span> <span class="o">|</span><span class="n">tag</span><span class="o">|</span> <span class="s2">&quot;&lt;a href=&#39;</span><span class="si">#{</span><span class="n">posts_path</span><span class="p">(</span><span class="ss">:tag</span> <span class="o">=&gt;</span> <span class="n">tag</span><span class="p">)</span><span class="si">}</span><span class="s2">&#39; class=&#39;tag&#39;&gt;</span><span class="si">#{</span><span class="n">tag</span><span class="si">}</span><span class="s2">&lt;/a&gt;&quot;</span> <span class="p">}</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="s2">&quot;, &quot;</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>即便換成 <code>'</code> 單引號，狀況並沒有好上多少。</p>

<h4>正確</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">post_tags_tag</span><span class="p">(</span><span class="n">post</span><span class="p">,</span> <span class="n">opts</span> <span class="o">=</span> <span class="p">{})</span>
</span><span class='line'><span class="c1"># ...</span>
</span><span class='line'>  <span class="n">raw</span> <span class="n">tags</span><span class="o">.</span><span class="n">collect</span> <span class="p">{</span> <span class="o">|</span><span class="n">tag</span><span class="o">|</span> <span class="n">link_to</span><span class="p">(</span><span class="n">tag</span><span class="p">,</span><span class="n">posts_path</span><span class="p">(</span><span class="ss">:tag</span> <span class="o">=&gt;</span> <span class="n">tag</span><span class="p">))</span> <span class="p">}</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="s2">&quot;, &quot;</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>正確的作法應該是妥善使用 Rails 內建的 Helper，使 Helper 裡面維持著都是 Ruby code 的狀態，並且具有高可讀性。</p>

<h3>3. 強耦合：把 CSS 應該做的事綁在 Ruby Helper 上。</h3>

<h4>錯誤</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">red_alert</span><span class="p">(</span><span class="n">message</span><span class="p">)</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">content_tag</span><span class="p">(</span><span class="ss">:span</span><span class="p">,</span><span class="n">message</span><span class="p">,</span> <span class="ss">:style</span> <span class="o">=&gt;</span> <span class="s2">&quot;font-color: red;&quot;</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">green_notice</span><span class="p">(</span><span class="n">message</span><span class="p">)</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">content_tag</span><span class="p">(</span><span class="ss">:span</span><span class="p">,</span><span class="n">message</span><span class="p">,</span> <span class="ss">:style</span> <span class="o">=&gt;</span> <span class="s2">&quot;font-color: green;&quot;</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>開發者不熟悉 unobtrusive 的設計手法，直接就把 design 就綁上了 Ruby Helper。造成將來有例外時，難以變更設計或擴充。</p>

<h4>正確</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">stickies</span><span class="p">(</span><span class="n">message</span><span class="p">,</span> <span class="n">message_type</span><span class="p">)</span>
</span><span class='line'>  <span class="n">content_tag</span><span class="p">(</span><span class="ss">:span</span><span class="p">,</span><span class="n">message</span><span class="p">,</span> <span class="ss">:class</span> <span class="o">=&gt;</span> <span class="n">message_type</span><span class="o">.</span><span class="n">to_sym</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">span</span> <span class="n">class</span><span class="o">=</span><span class="s2">&quot;alert&quot;</span><span class="o">&gt;</span> <span class="no">Please</span> <span class="no">Login</span><span class="o">!!</span> <span class="o">&lt;</span><span class="sr">/span&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>樣式應該由 CSS 決定，使用 HTML class 控制，而非強行綁在 Helper 上。</p>

<h3>4. 重複發明輪子</h3>

<p>Rails 已內建許多實用 Helper，開發者卻以較糟的方式重造輪子。在此舉幾個比較經典的案例：</p>

<ul>
<li><a href="http://apidock.com/rails/ActionView/Helpers/TextHelper/cycle">cycle</a></li>
</ul>


<p>如何設計 table 的雙色效果？</p>

<h4>劣</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&lt;</span><span class="sx">% count </span><span class="o">=</span> <span class="mi">0</span> <span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">table</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="sx">% @items.each </span><span class="k">do</span> <span class="o">|</span><span class="n">item</span><span class="o">|</span> <span class="sx">%&gt;</span>
</span><span class='line'><span class="sx">  &lt;% if count % 2 == 0 %&gt;</span>
</span><span class='line'>    <span class="o">&lt;</span><span class="sx">% css_class </span><span class="o">=</span> <span class="s2">&quot;even &quot;</span><span class="sx">%&gt;</span>
</span><span class='line'><span class="sx">  &lt;% else %&gt;</span>
</span><span class='line'>    <span class="o">&lt;</span><span class="sx">% css_class </span><span class="o">=</span> <span class="s2">&quot;odd&quot;</span> <span class="sx">%&gt;</span>
</span><span class='line'><span class="sx">  &lt;% end %&gt;</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="n">tr</span> <span class="n">class</span><span class="o">=</span><span class="s2">&quot;&lt;%= css_class %&gt;&quot;</span><span class="o">&gt;</span>
</span><span class='line'>    <span class="o">&lt;</span><span class="n">td</span><span class="o">&gt;</span><span class="n">item</span><span class="o">&lt;</span><span class="sr">/td&gt;</span>
</span><span class='line'><span class="sr">  &lt;/</span><span class="n">tr</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="sx">% count </span><span class="o">+=</span> <span class="mi">1</span><span class="sx">%&gt;</span>
</span><span class='line'><span class="sx">&lt;% end %&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="sr">/table&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>一般的想法會是使用兩種不同 HTML class : event 與 odd，上不同的顏色。</p>

<h4>劣</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&lt;</span><span class="n">table</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="sx">% @items.each_with_index </span><span class="k">do</span> <span class="o">|</span><span class="n">item</span><span class="p">,</span> <span class="n">count</span><span class="o">|</span> <span class="sx">%&gt;</span>
</span><span class='line'><span class="sx">  &lt;% if count % 2 == 0 %&gt;</span>
</span><span class='line'>    <span class="o">&lt;</span><span class="sx">% css_class </span><span class="o">=</span> <span class="s2">&quot;even &quot;</span><span class="sx">%&gt;</span>
</span><span class='line'><span class="sx">  &lt;% else %&gt;</span>
</span><span class='line'>    <span class="o">&lt;</span><span class="sx">% css_class </span><span class="o">=</span> <span class="s2">&quot;odd&quot;</span> <span class="sx">%&gt;</span>
</span><span class='line'><span class="sx">  &lt;% end %&gt;</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="n">tr</span> <span class="n">class</span><span class="o">=</span><span class="s2">&quot;&lt;%= css_class %&gt;&quot;</span><span class="o">&gt;</span>
</span><span class='line'>    <span class="o">&lt;</span><span class="n">td</span><span class="o">&gt;</span><span class="n">item</span><span class="o">&lt;</span><span class="sr">/td&gt;</span>
</span><span class='line'><span class="sr">  &lt;/</span><span class="n">tr</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="sx">% count </span><span class="o">+=</span> <span class="mi">1</span><span class="sx">%&gt;</span>
</span><span class='line'><span class="sx">&lt;% end %&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="sr">/table&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>這是一般初心者會犯的錯誤。實際上 Ruby 中有 <code>each_with_index</code>，不需要另外需要宣告一個 count。</p>

<h4>優</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&lt;</span><span class="n">table</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="sx">% @items.each </span><span class="k">do</span> <span class="o">|</span><span class="n">item</span><span class="o">|</span> <span class="sx">%&gt;</span>
</span><span class='line'><span class="sx">  &lt;tr class=&quot;&lt;%= cycle(&quot;odd&quot;, &quot;even&quot;) %&gt;</span><span class="s2">&quot;&gt;</span>
</span><span class='line'><span class="s2">    &lt;td&gt;item&lt;/td&gt;</span>
</span><span class='line'><span class="s2">  &lt;/tr&gt;</span>
</span><span class='line'><span class="s2">&lt;% end %&gt;</span>
</span><span class='line'><span class="s2">&lt;/table&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>但 Rails 其實內建了 <code>cycle</code> 這個 Helper。實際上只要這樣寫就好了&#8230;</p>

<h4>常用你可能不知道的 Helper</h4>

<p>限於篇幅，直接介紹幾個因為使用機率高，所以很容易被重造輪子的 Helper。開發者會寫出的相關 AntiPattern 部分就跳過了。</p>

<ul>
<li><a href="http://apidock.com/rails/ActionView/Helpers/TextHelper/truncate">truncate</a></li>
<li><a href="http://apidock.com/rails/ActionView/Helpers/TextHelper/auto_link">auto_link</a></li>
<li><a href="http://apidock.com/rails/ActionView/Helpers/RecordTagHelper/div_for">div_for</a> &amp; <a href="http://apidock.com/rails/ActionController/RecordIdentifier/dom_id">dom_id</a></li>
<li><a href="http://apidock.com/rails/ActionView/Helpers/TextHelper/simple_format">simple_format</a></li>
</ul>


<h2>5. Ask, Not Tell</h2>

<p>這也是在 View 中會常出現的問題，直接違反了 Law of Demeter 原則，而造成了效能問題。十之八九某個 View 緩慢無比，最後抓出來背後幾乎都是這樣的原因。</p>

<p>不少開發者會設計出這樣的 helper：</p>

<h4>劣</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">post_tags_tag</span><span class="p">(</span><span class="n">post</span><span class="p">,</span> <span class="n">opts</span> <span class="o">=</span> <span class="p">{})</span>
</span><span class='line'>  <span class="n">tags</span> <span class="o">=</span> <span class="n">post</span><span class="o">.</span><span class="n">tags</span>
</span><span class='line'>  <span class="n">tags</span><span class="o">.</span><span class="n">collect</span> <span class="p">{</span> <span class="o">|</span><span class="n">tag</span><span class="o">|</span> <span class="n">link_to</span><span class="p">(</span><span class="n">tag</span><span class="p">,</span><span class="n">posts_path</span><span class="p">(</span><span class="ss">:tag</span> <span class="o">=&gt;</span> <span class="n">tag</span><span class="p">))</span> <span class="p">}</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="s2">&quot;, &quot;</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&lt;</span><span class="sx">% @posts.each </span><span class="k">do</span> <span class="o">|</span><span class="n">post</span><span class="o">|</span> <span class="sx">%&gt;</span>
</span><span class='line'><span class="sx">  &lt;%= post_tags_tag(post) %&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="sx">% end </span><span class="o">%&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>這種寫法會造成在 View 中，執行迴圈時，造成不必要的大量 query (n+1)，以及在 View 中製造不確定數量的大量物件。View 不僅效率低落也無法被 optimized。</p>

<h4>優</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">post_tags_tag</span><span class="p">(</span><span class="n">tags</span><span class="p">,</span> <span class="n">opts</span> <span class="o">=</span> <span class="p">{})</span>
</span><span class='line'>  <span class="n">tags</span><span class="o">.</span><span class="n">collect</span> <span class="p">{</span> <span class="o">|</span><span class="n">tag</span><span class="o">|</span> <span class="n">link_to</span><span class="p">(</span><span class="n">tag</span><span class="p">,</span><span class="n">posts_path</span><span class="p">(</span><span class="ss">:tag</span> <span class="o">=&gt;</span> <span class="n">tag</span><span class="p">))</span> <span class="p">}</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="s2">&quot;, &quot;</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&lt;</span><span class="sx">% @posts.each </span><span class="k">do</span> <span class="o">|</span><span class="n">post</span><span class="o">|</span> <span class="sx">%&gt;</span>
</span><span class='line'><span class="sx">  &lt;%= post_tags_tag(post.tags) %&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="sx">% end </span><span class="o">%&gt;</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="k">def</span> <span class="nf">index</span>
</span><span class='line'>    <span class="vi">@posts</span> <span class="o">=</span> <span class="no">Post</span><span class="o">.</span><span class="n">recent</span><span class="o">.</span><span class="n">includes</span><span class="p">(</span><span class="ss">:tags</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>正確的方法是使用 <a href="http://pragprog.com/articles/tell-dont-ask">Tell, dont ask</a> 原則，主動告知會使用的物件，而非讓 Helper 去猜。並配合 ActiveRecord 的 includes 減少不必要的 query（ includes 可以製造 join query ，一次把需要的 posts 和 tags 撈出來）。</p>

<p>且在 controller query 有 object cache 效果，在 view 中則無。</p>

<h2>小結</h2>

<p>Helper 是 Rails Developer 時常在接觸的工具。但可惜的是，多數開發者卻無法將此利器使得稱手，反而造成了更多問題。在我所曾經參與的幾十個 Rails 專案中，很多設計和效能問題幾乎都是因為寫的不好的 View / Helper 中的 slow query 或伴隨產生的大量 object 所造成的 memory bloat 導致的。但參與專案的開發者並沒有那麼多的經驗，能夠抓出確切的病因，卻都將矛頭直接是 Rails 的效能問題，或者是沒打上 Cache 的關係。這樣的說法只是把問題掩蓋起來治標，而非治本。</p>

<p>下次若有遇到 performance issue，請先往 View 中瞧看看是不是裡面出現了問題。也許你很快就可以找到解答。</p>

<p>===</p>

<p>接下來兩章我將會介紹：</p>

<p>自用 Helper 的設計整理原則、如何將常用 Helper 抽取出來可以複用。</p>

<p>本篇文章將會收錄在 <a href="http://rails-101.logdown.com/books/3-essential-rails-pattern">Essential Rails Pattern</a>，目前已有部分章節已可<a href="http://erp-book.heroku.com">預覽</a>，歡迎<a href="http://rails-101.logdown.com/books/3-essential-rails-pattern">預購</a>支持我的寫作，謝謝！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[進階]使用 Facade Pattern 取代 Model callbacks]]></title>
    <link href="http://blog.xdite.net/posts/2012/01/09/remove-your-after-save-from-model/"/>
    <updated>2012-01-09T18:56:00+08:00</updated>
    <id>http://blog.xdite.net/posts/2012/01/09/remove-your-after-save-from-model</id>
    <content type="html"><![CDATA[<h2>What is &#8220;callbacks&#8221;?</h2>

<p>Rails 的 ActiveRecord 提供了相當方便的 callbacks，能讓開發者在寫 Controller 時，能夠寫出更加 DRY 的程式碼：</p>

<ul>
<li>before_crearte</li>
<li>before_save</li>
<li>after_create</li>
<li>after_save</li>
<li>…</li>
</ul>


<p>在從前，在 Controller 裡面想要再 object 儲存之後 do_something，直觀的思路會是這樣：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">PostController</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">create</span>
</span><span class='line'>    <span class="vi">@post</span> <span class="o">=</span> <span class="no">Post</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">params</span><span class="o">[</span><span class="ss">:post</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@post</span><span class="o">.</span><span class="n">save</span>
</span><span class='line'>    <span class="vi">@post</span><span class="o">.</span><span class="n">do_something</span>
</span><span class='line'>    <span class="n">redirect_to</span> <span class="n">posts_path</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>當時的最佳模式：通常是建議開發者改用 callbacks 或者是 Observer 模式實作。避免 controller 的髒亂。</p>

<ul>
<li>callbacks : after_create</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">PostController</span> <span class="o">&lt;</span> <span class="no">ApplicationController</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">create</span>
</span><span class='line'>    <span class="vi">@post</span> <span class="o">=</span> <span class="no">Post</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">params</span><span class="o">[</span><span class="ss">:post</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@post</span><span class="o">.</span><span class="n">save</span>
</span><span class='line'>    <span class="n">redirect_to</span> <span class="n">posts_path</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Post</span> <span class="err"></span><span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
</span><span class='line'>  <span class="n">after_create</span> <span class="ss">:do_something</span>
</span><span class='line'>
</span><span class='line'>  <span class="kp">protected</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">do_something</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>或者是使用 Observer</p>

<ul>
<li>Observer</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">PostController</span> <span class="o">&lt;</span> <span class="no">ApplicationController</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">create</span>
</span><span class='line'>    <span class="vi">@post</span> <span class="o">=</span> <span class="no">Post</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">params</span><span class="o">[</span><span class="ss">:post</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@post</span><span class="o">.</span><span class="n">save</span>
</span><span class='line'>    <span class="n">redirect_to</span> <span class="n">posts_path</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">PostObserver</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Observer</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">after_create</span><span class="p">(</span><span class="n">post</span><span class="p">)</span>
</span><span class='line'>    <span class="n">post</span><span class="o">.</span><span class="n">do_something</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Post</span> <span class="err"></span><span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
</span><span class='line'>
</span><span class='line'>  <span class="kp">protected</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">do_something</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h2>使用 callbacks 所產生的問題</h2>

<p>callbacks 雖然很方便，但也產生一些其他的問題。若這個 do_something 是很輕量的 db update，那這個問題還好。但如果是很 heavy 的 hit_3rd_party_api 呢？</p>

<p>在幾個情形下，開發者會遇到不小的麻煩。</p>

<ul>
<li>Model 測試：每次在測試時都會被這個 3rd_party_api 整到，因為外部通訊很慢。</li>
<li>do_something_api 是很 heavy 的操作：每次寫測試還是會被很慢的 db query 整到。</li>
<li>do_something_api 是很輕微的 update：但是綁定 after_save 操作，在要掃描資料庫，做大規模的某欄位修改時，會不小心觸發到不希望引發的 callbacks，造成不必要的效能問題。</li>
</ul>


<p>當然，開發者還是可以用其他招數去閃開：</p>

<p>比如說若綁定 after_save 。</p>

<p>可以在 do_somehting 內加入對 dirty object 的偵測，避免被觸發：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">do_somthing</span>
</span><span class='line'>  <span class="c1"># 資料存在，且變動的欄位包括 content</span>
</span><span class='line'>  <span class="k">if</span> <span class="n">presisited?</span> <span class="o">&amp;&amp;</span> <span class="n">changed</span><span class="o">.</span><span class="n">include?</span><span class="p">(</span><span class="s2">&quot;content&quot;</span><span class="p">)</span>
</span><span class='line'>     <span class="n">the_real_thing</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>但這一招並不算理想，原因有幾：</p>

<ol>
<li>每次儲存還是需要被掃描一次，可能有效能問題。</li>
<li>寫測試時還是會呼叫到可能不需要引發的 do_somehting。</li>
<li>if xxx ＆＆ yyy 這個 condiction chain 可能會無限延伸下去。</li>
</ol>


<h2>Facade Pattern</h2>

<p>那麼要怎樣才能解決這個問題呢？其實我們應該用 Facade Pattern 解決這個問題。</p>

<p>設計模式裡面有一招 Facade Pattern，這一招其實是沒有被寫進 <a href="http://designpatternsinruby.com/">Design Pattern in Ruby</a> 中的。Russ Olson 有寫了<a href="http://designpatternsinruby.com/section02/facade.html">一篇文章</a>解釋沒有收錄的原因：因為在 Ruby 中，這一招太簡單太直觀，所以不想收錄 XDDD。但他還是在網站上提供當時寫的草稿，供人參考。</p>

<h3>What is Facade Pattern?</h3>

<p>Facade Pattern 的目的是「將複雜的介面簡化，將複雜與瑣碎的步驟封裝起來，對外開放簡單的介面，讓客戶端能夠藉由呼叫簡單的介面而完成原本複雜的程式演算。」（<a href="http://www.dotblogs.com.tw/jameswu/archive/2008/06/26/4382.aspx">來源</a>）</p>

<p>延伸閱讀: <a href="http://www.cnblogs.com/oomusou/archive/2007/04/24/725714.html">(原創) 我的Design Pattern之旅[5]：Facade Pattern (OO) (Design Pattern) (C/C++)</a></p>

<h3>實際舉例：</h3>

<p>在上述的例子中，其實 do_something 有可能只會在 PostController 用到，而非所有的 model 操作都「需要」用到。所以我們 <strong>不應該將 do_somehting 丟進 callbacks（等於全域觸發），再一一寫 case 去閃避執行</strong></p>

<p>與其寫在 callbacks 裡。我們更應該寫的是一個 Service Class 將這一系列複雜昂貴的行為包裝起來，以簡單的介面執行。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">PostController</span> <span class="o">&lt;</span> <span class="no">ApplicationController</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">create</span>
</span><span class='line'>    <span class="no">CreatePostService</span><span class="p">(</span><span class="n">params</span><span class="o">[</span><span class="ss">:post</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'>    <span class="n">redirect_to</span> <span class="n">posts_path</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">CreatePostService</span>
</span><span class='line'>  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">create</span><span class="p">(</span><span class="n">params</span><span class="p">)</span>
</span><span class='line'>    <span class="n">post</span> <span class="o">=</span> <span class="no">Post</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">params</span><span class="o">[</span><span class="ss">:post</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'>    <span class="n">post</span><span class="o">.</span><span class="n">save</span>
</span><span class='line'>    <span class="n">post</span><span class="o">.</span><span class="n">do_something_a</span>
</span><span class='line'>    <span class="n">post</span><span class="o">.</span><span class="n">do_something_b</span>
</span><span class='line'>    <span class="n">post</span><span class="o">.</span><span class="n">do_something_c</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>而在寫測試，只需要對 PostCreateService 這個商業邏輯 class 寫測試即可。而 PostController 和 Post Model 就不會被殃及到。</p>

<h2>小結</h2>

<p>不少開發者討厭測試的原因，不只是「因為」寫測試很麻煩的原因，「跑一輪測試超級久」也是讓大家很不爽的主因之一。</p>

<p>其實不是這些測試框架寫的爛造成「寫測試很麻煩」、「執行測試超級久」。而是另有其他因素。</p>

<p>許多資深開發者逐漸意識到，真正的主因是在於目前 Rails 的 model 的設計，耦合度太高了。只要沾到 db 就慢，偏偏 db 是世界的中心。只是測某些邏輯，搞到不小心觸發其他不需要測的東西。</p>

<p>ActiveRecord 的問題在於，讓開發者太誤以為 ORM = model。其實開發者真正要寫的測試應該是對商業邏輯的測試，不是對 db 進行測試。</p>

<p>所以才會出現了用 Facade Pattern 取代 callbacks 的手法。</p>

<h2>其他</h2>

<p>MVC 其實有其不足的部份。坦白說，Rails 也不是真正的 MVC，而是 <a href="http://andrzejonsoftware.blogspot.com/2011/09/rails-is-not-mvc.html">Model2</a></p>

<p>目前 MVC 其實是不足的，演化下來，開發者會發現 User class 裡面會開始出現這些東西：</p>

<ul>
<li>current_user.buy_book(book)</li>
<li>current_user.add_creadit_point(point)</li>
</ul>


<p>這屬於 User 裡面應該放的 method 嗎？well，你也可以說適合，也可以說不適合。</p>

<p>適合的原因是：其實你也不知道應該放哪裡，這好像是 User 執行的事，跟他有關，那就放這裡好了！不然也不知道要擺哪裡。</p>

<p>不適合的原因是：這是一個「商業購買行為」。不是所有人都會購物啊。這應該是一個商業購買邏輯。但是&#8230;.也不知道要放在哪啊。</p>

<p>一直到最近，James Copelin 提出了：<a href="http://en.wikipedia.org/wiki/Data,_Context,_and_Interaction">DCI</a> 去補充了現有的 MVC 的不足，才算勉強解決了目前浮現的這些問題。</p>

<p>DCI ，與本篇談到的 Facade Pattern 算是頗類似的手法。</p>

<p>有關於 DCI ( Data, Context, Interaction ) 的文章，我會在之後發表。我同時也推薦各位去看這方面的主題。這個方向應該會是 Rails 專案設計上未來演化的方向之一。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[關於 Essential Rails Pattern 這本書的近況]]></title>
    <link href="http://blog.xdite.net/posts/2012/01/06/about-erp/"/>
    <updated>2012-01-06T18:09:00+08:00</updated>
    <id>http://blog.xdite.net/posts/2012/01/06/about-erp</id>
    <content type="html"><![CDATA[<p>最近看到不少讀者都在「委婉」的催我最新這一本書「<a href="http://rails-101.logdown.com/books/3-essential-rails-pattern">Essential Rails Pattern</a>」的近況。</p>

<p>跟大家報告一下這本書的近況，其實我每個禮拜都還是有在持續撰寫這本書。但是這本書寫著寫著，我越發現一件可怕的事情，內容太大了，大到比我當初想象中的還大概長五倍。到現在我已經為這本書寫超過 10 萬字了。可是還是看不到盡頭。</p>

<p>而且在當初安排初版結構時，在前三章的結構上安排得有些錯誤。原本是要寫 Ruby / Rails 的設計技巧，卻岔遠路去撰寫基本的程式設計技巧。</p>

<p>草稿的字是累積不少，但是還不能見人，於是就一直放著。改先出零散的文章，所以最近各位可能看到我在撰寫一些回歸基本的教學，其實也是為這本書在做準備。</p>

<p>這幾天，我想了很久，預購的讀者每次抓下來都只有空白頁，等久了也會生氣 XD。</p>

<p>終於我做了一個決定，原先的目錄結構太爛了，不砍掉重寫可能就會永遠斷頭了XD。</p>

<p>於是我將原本寫好的幾章全部打散重排，所有已經寫好的內容，可以抽成章的就先整理出來。目前的草稿雖然有點多，但還算整理的完的。我會將草稿放在這裡: <a href="http://erp-book.heroku.com">http://erp-book.heroku.com</a>。</p>

<p>這次也算釋出正式版的全部大綱。我希望可以在今年二月，釋出現在手頭上絕大部分的 beta 內容。</p>

<p>如果有「等的不耐煩」的讀者，或者是「看完大綱覺得這本書不是你想要的」，或者是「這本書覺得不值得這個價錢的」，或者是「就是不爽 xdite 你這個大騙子」的，都可以寫信給我要求退錢。</p>

<p>再次為進度的緩慢，致上我深深的歉意。</p>

<p>===</p>

<p>不過如果你看完這本書的大綱和目前進度，還滿意這樣的內容和主題，想支持我繼續寫作的(其實寫這麼多字也是很累的..orz)，也歡迎加入<a href="http://rails-101.logdown.com/books/3-essential-rails-pattern">預購</a>支持我的作品，謝謝。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[出售] Macbook Air 攻頂款另贈 NDSi XL]]></title>
    <link href="http://blog.xdite.net/posts/2012/01/06/sell-my-macbook-air/"/>
    <updated>2012-01-06T00:30:00+08:00</updated>
    <id>http://blog.xdite.net/posts/2012/01/06/sell-my-macbook-air</id>
    <content type="html"><![CDATA[<p>蘋果今天在大特賣，我也打算特賣我的 Macbook Air。</p>

<p><a href="http://www.flickr.com/photos/xdite/6642182625/" title="Untitled by xdite, on Flickr"><img src="http://farm8.staticflickr.com/7024/6642182625_d32456e871.jpg" width="500" height="375" alt=""></a></p>

<p>打算在過年前把手上這一臺 Macbook Air 13&#8221; 賣掉換新的。</p>

<p>這台是 2011/03 從香港買的攻頂款。</p>

<p>配備:</p>

<ul>
<li>CPU: Intel Core2 Duo 2.13GHZ</li>
<li>RAM: 4G</li>
<li>HDD: 256 GB SSD</li>
<li>鍵盤: 全英文鍵盤</li>
</ul>


<p>還在 Apple Care 中。沒有貼紙在上面，保護得還算不錯。</p>

<p>當時台灣售價是 $ 62000，我從香港買進花了 $52xxx。</p>

<p>我打算賣 NT $41000。賣了之後會幫你還原到 10.6 出廠預設。</p>

<p>====</p>

<p>售價 41000 怎麼算特賣？</p>

<p>因為之前手上玩具不小心買太多了，有一臺也是當時買的，但是後來沒玩幾次的 NDSi XL 放在家裡沒在打…
應該也還值個幾千塊（這台在美國買的時候也花了 6-7000）。</p>

<p><a href="http://www.flickr.com/photos/xdite/6642193481/" title="Untitled by xdite, on Flickr"><img src="http://farm8.staticflickr.com/7164/6642193481_dfde9ce8b5.jpg" width="500" height="375" alt=""></a></p>

<p>如果你購買這台 Air 的話，這台 NDSi XL 就也順便送你啦。看你要拿去換現金還是收起來自用。</p>

<p>有興趣的朋友歡迎跟我聯絡。如果你已經是我 FB 好友的話，可以少收你 1000 元。</p>

<p>===
用 iPhone 4S 拍的現況圖，不知道解析度夠不夠</p>

<p><a href="http://www.flickr.com/photos/xdite/sets/72157628733737777/">http://www.flickr.com/photos/xdite/sets/72157628733737777/</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[進階] Make ActiveRecord includable]]></title>
    <link href="http://blog.xdite.net/posts/2012/01/04/make-activerecord-includable/"/>
    <updated>2012-01-04T16:58:00+08:00</updated>
    <id>http://blog.xdite.net/posts/2012/01/04/make-activerecord-includable</id>
    <content type="html"><![CDATA[<p>[警告] 這一篇是進階的文章，如果你看不懂可以跳過。</p>

<p>前幾天在 Twitter 看到一條值得慶賀的消息（印象已模糊，忘記誰慶賀，也不知慶賀的原因），是關於 Rails core 上的一串 commit，大意是 ActiveRecord::Base 已經從傳統的繼承使用，變成了可以用 include 的 ActvieRecord::Model。</p>

<p><a href="https://github.com/rails/rails/compare/58f69ba...00318e9#diff-0">https://github.com/rails/rails/compare/58f69ba&#8230;00318e9#diff-0</a></p>

<p>也就是從開始有 Rails 以來，傳統的使用方式</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Post</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>以後將變成</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Post</span>
</span><span class='line'>  <span class="kp">include</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Model</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>坦白說，我看不懂這一串的意義是什麼。而 commit 下面的留言也有人說他看不懂&#8230;.XDDDD</p>

<p>所以我就把這則收入記憶倉庫了。直到今天聽 podcast 時不小心觸發…</p>

<h2>Ruby Rogues Podcast</h2>

<p><a href="http://rubyrogues.com/">Ruby Rogues</a> 是這幾個月才興起的一個新的 Ruby Podcast，與較知名的 <a href="http://ruby5.envylabs.com/">Ruby 5</a> 或 <a href="http://rubyshow.com">The Ruby Show</a> 這兩個 podcast，性質很不同。後兩者著重於介紹本週有什麼 Ruby / Rails 的新消息，或者亮點 gem。Ruby Rouges 的則是每周邀請五個 Ruby 大師，上來針對一個特定主題，無盡的喇賽亂鬥 XD</p>

<p>當然這些大師也不是在講廢話，從他們的喇賽中可以學到不少觀念，甚至是有的時候你還可以聽到有的大師現場被其他人電：「什麼，你不知道可以這樣用？」「什麼，你一直用錯誤的觀念寫 code？」….XD</p>

<p>到目前為止一共有 35 集，每集大概 1 小時。這麼多&#8230;.所以當然我…沒有聽完 XDDDD</p>

<p>今天找資料時，翻到第 20 集 <a href="http://rubyrogues.com/object-oriented-programming-in-rails-with-jim-weirich/">RR Object Oriented Programming in Rails with Jim Weirich</a></p>

<p>為了要找其中的一段資料，就耐心的下載了這集，開始聽。結果原先的資料沒找到，倒是意外聽到一段重要的寫 code 觀念，讓我理解 Make ActiveRecord includable 的意義。</p>

<h2>Rails 誤導大家的觀念 : Model = DB</h2>

<p>這一段觀念可以從 <a href="http://rubyrogues.com/object-oriented-programming-in-rails-with-jim-weirich/">podcast</a> 中的大約 30:00 左右開始聽。</p>

<p>Rails 誕生以來，model 的設計就是長這樣，從 ActiveRecord::Base 繼承。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Post</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">has_many</span> <span class="ss">:comments</span>
</span><span class='line'>  <span class="n">belongs_to</span> <span class="ss">:user</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">scope</span> <span class="ss">:recent</span> <span class="p">,</span> <span class="n">order</span><span class="p">(</span><span class="s2">&quot;id DESC&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>當專案長大了，開發者免不了會往裡面塞一些 Business Logic，所以會變成這樣。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Post</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">has_many</span> <span class="ss">:comments</span>
</span><span class='line'>  <span class="n">belongs_to</span> <span class="ss">:user</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">scope</span> <span class="ss">:recent</span> <span class="p">,</span> <span class="n">order</span><span class="p">(</span><span class="s2">&quot;id DESC&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">aaa</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">bbb</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">ccc</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>但是 class 再繼續長大之後，大家可能就會受不了了。developer 開始把一些 method ( 所謂的 bussiness logic 抽出去)，用 include 的方式去做，然後把這些 logic 放在 lib/ 下。</p>

<p>變成</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Post</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">has_many</span> <span class="ss">:comments</span>
</span><span class='line'>  <span class="n">belongs_to</span> <span class="ss">:user</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">scope</span> <span class="ss">:recent</span> <span class="p">,</span> <span class="n">order</span><span class="p">(</span><span class="s2">&quot;id DESC&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="kp">include</span> <span class="no">AAA</span>
</span><span class='line'>  <span class="kp">include</span> <span class="no">BBB</span>
</span><span class='line'>  <span class="kp">include</span> <span class="no">CCC</span>
</span><span class='line'>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>儘量讓這個 model class 只保持著 db 的 association，logic 抽出去保持整潔。</p>

<p>寫到這裡看起來都沒問題？</p>

<h2>繼承自 ActiveRecord::Base 帶來的問題</h2>

<p>錯了，問題可大了。</p>

<p>這樣的設計導致了一個現象：因為繼承自 ActivRecord::Base，無可避免的寫測試一定要扯到 DB，於是就帶來了其他頭痛的問題</p>

<ol>
<li><p>寫測試變成在測試 query 和 ORM。寫測試的重點是在測 Business  Logic，其實應該要與 DB 資料與 DB 連線無關，結果測試都在測這個…</p></li>
<li><p>因為一定要過 DB，於是 model 測試很慢。</p></li>
</ol>


<h2>ORM 是配角，被誤以為主角，反客為主！！！</h2>

<p>在 MVC 裡面，Model 的定義－主要負責應用程式中的商業邏輯(Business Logic)。</p>

<p>看看這個範例，你覺得這個 model 寫法是正確的嗎！？</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Post</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">has_many</span> <span class="ss">:comments</span>
</span><span class='line'>  <span class="n">belongs_to</span> <span class="ss">:user</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">scope</span> <span class="ss">:recent</span> <span class="p">,</span> <span class="n">order</span><span class="p">(</span><span class="s2">&quot;id DESC&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="kp">include</span> <span class="no">AAA</span>
</span><span class='line'>  <span class="kp">include</span> <span class="no">BBB</span>
</span><span class='line'>  <span class="kp">include</span> <span class="no">CCC</span>
</span><span class='line'>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>這是一個 ORM 行為為主的 model，不是 Bussiness Logic 為主的 Model 啊 XD。真正的主角好像被趕走了，被趕到 lib/ 去。</p>

<p>podcast 中 30:00 - 33:00 主要討論的議題就是：</p>

<p>===</p>

<p>你將 Bussiness Logic 放在哪裡？你稱 Bussiness Model 為 Model 還是 SuperModel。然後 James Edward Gray 在這裡回答他放在 lib 下，就被電了 XDDDDD</p>

<p>===</p>

<p>事實上正確的寫法應該通通都是要放在 <code>app/models</code> 下。</p>

<p>而設計手法應該是</p>

<p>class Post 本身就放自己的 bussiness logic，然後去 claim 自己有用 ORM。至於過多複雜的邏輯就整理起來放在 Module 裡。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Post</span>
</span><span class='line'>  <span class="kp">include</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Model</span>
</span><span class='line'>
</span><span class='line'>  <span class="kp">include</span> <span class="no">AAA</span>
</span><span class='line'>  <span class="kp">include</span> <span class="no">BBB</span>
</span><span class='line'>  <span class="kp">include</span> <span class="no">CCC</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>而寫測試應該就是測 model 本身的商業邏輯而不是測 DB !!</p>

<h2>小結</h2>

<p>Rails 原生的機制讓開發者非常容易以為 Model 與 ORM 是一對一的關係。並且在此架構中，要將 code 整理得乾淨，就會無可避免的演變到反客為主的寫法。</p>

<p>這個 commit 其實只是剛起步，還沒有能夠完全避免一定要測到 DB 的問題。不過至少邁開了一大步。</p>

<p>聽完了這集 podcast，讓我完全看懂這個 commit 和下面的留言，還順便澄清了一個錯誤觀念…</p>

<p>（不過對現狀沒什麼幫助，因為這是 4.0 feature，所以目前還是不能用的 XD，開發者還是只能按照舊的寫法繼續當鴕鳥）</p>

<p>有空還是要多聽大師喇賽才能進步啊&#8230;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Ruby][教學] 如何打包一個 Asset Gem ]]></title>
    <link href="http://blog.xdite.net/posts/2012/01/04/how-to-pack-a-asset-gem/"/>
    <updated>2012-01-04T09:10:00+08:00</updated>
    <id>http://blog.xdite.net/posts/2012/01/04/how-to-pack-a-asset-gem</id>
    <content type="html"><![CDATA[<h2>What is Asset Gem</h2>

<p><a href="http://upgrade2rails31.heroku.com/asset-pipeline/">Asset Pipeline</a>的概念興起，不只是推動了 SASS 與 CoffeeScript 的廣泛流行。其實造成更重大的影響是 assets ( CSS / JavaScript / Images ) 不再被視為專案中難以「整理」與「管理」的頭痛元件。透過 Asset Pipeline 的架構，我們可以把 assets 包裝成一個 gem ，在其他專案中重複使用。</p>

<p>在以往，如果想使用 <a href="http://twitter.github.com/bootstrap/">bootstrap</a> 這個 CSS / JS Framework，我們必須將所有靜態檔案 COPY 一份到專案的靜態目錄中。當專案使用到大量 3rd party vendor assets，整個靜態目錄就會被這種拷貝行為弄得髒亂不堪，難以整理。</p>

<p>而透過 Asset Pipeline 的架構，開發者就可以停止這種草率但不得不為之的動作。要引用 3rd party vendor assets，只要在 application.css 或者 application.js 進行 require 就可以輕鬆使用了。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>//= require jquery
</span><span class='line'>//= require bootstrap
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>引用 asset gem 很簡單，但不少人想知道的是：<code>如何把手上想整理的 asset 包裝成一個 gem 進行使用</code>。</p>

<h2>Asset Pipeline 的 mount 位置</h2>

<p>談到這裡，就要稍微提一下 Asset Pipeline 對於 assets 位置的定義。by default，你可以把 assets 放在以下三個資料夾內：</p>

<ul>
<li>app/assets</li>
<li>lib/assets</li>
<li>vendor/assets</li>
</ul>


<p>理論上，你把 assets 丟在這三個資料夾內，在 application.cs|js 內 require 都可以動。</p>

<h3>如何整理目前專案中的 assets</h3>

<p>這其實是另外一個主題，不過我在這裡也順便整理出來。</p>

<p>如何整理歸類現在手頭上的 assets 呢？</p>

<ul>
<li>app/assets</li>
</ul>


<p>在 Rails 3.1.x 之後的版本，rails g controler posts，會自動在 assets/styelsheets/ 和 assets/javascripts/ 中產生對應的 scss 與 coffeescript 檔案。</p>

<p>所以 app/assets 是讓開發者放「自己為專案手寫的 assets」的地方。</p>

<ul>
<li>lib/assets</li>
</ul>


<p>lib 是 library 的簡寫，這裡是放 LIBRARY 的地方。所以如果你為專案手寫的 assets 漸漸形成了 library 規模，比如說 mixin 或者是自己為專案整理了簡單的 bootstrap，應該放在 lib/ 下。</p>

<ul>
<li>vendor/assets</li>
</ul>


<p>verdor 是「供應商」的意思，也就是 「別人寫的」assets 都應該放在這裡。比如說:</p>

<ul>
<li>jquery.*.js</li>
<li>fanfanfan icons</li>
<li>tinymce / ckeditor</li>
</ul>


<p>等等…</p>

<h2>透過 Rails Engine 機制實作</h2>

<p>為什麼剛剛要扯這麼大一圈去解釋如何整理手頭的 assets 呢？</p>

<p>因為 asset gem 其實就是透過 Rails Engine 的機制去實作出來的。</p>

<p>拿一個前幾個月幫 <a href="http://twitter.com/evenwu">@evenwu</a> 寫的 asset gem 作為示範好了。</p>

<p><a href="https://github.com/xdite/compass-ggs-framework/tree/rails-engine">https://github.com/xdite/compass-ggs-framework/tree/rails-engine</a></p>

<p>作法是將你整理好的 lib/assets 扔到 vendor/assets 裡(你寫的給別人用，你就變成 vendor 了)，再宣告一個「空的」Rails Engine Class 讓 Rails 可以將這個 gem 視為網站的一部分「掛起來」裡面的 vendor/assets。</p>

<p>沒錯，就是這麼簡單。</p>

<p>而宣告自己是一個 Rails Engine 的方式也很簡單：只要把 Rails Engine 塞進自定義的 module 就好了。
（還是看不懂的可以看我的 code…）</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">module</span> <span class="nn">Ggs</span>
</span><span class='line'>  <span class="k">module</span> <span class="nn">Rails</span>
</span><span class='line'>    <span class="k">class</span> <span class="nc">Engine</span> <span class="o">&lt;</span> <span class="o">::</span><span class="no">Rails</span><span class="o">::</span><span class="no">Engine</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>剩下來的流程就跟<a href="http://blog.xdite.net/posts/2012/01/04/how-to-pack-a-gem/">一般包 Gem 的流程</a>差不多了。</p>

<p>=====</p>

<p>現在我每週都固定有在回答一些問題，發現不少朋友對 Ruby / Rails 的一些疑惑，都大同小異。這些問題有一些我有寫過文件但沒有公開披露，有一些沒有寫過文件但有答案。所以順手把這些回答過的答案整理到 blog 上讓大家參考。</p>

<p>如果你在 Ruby / Rails 在使用有任何問題，都歡迎貼到 <a href="http://ruby-taiwan.org">http://ruby-taiwan.org</a>。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Ruby][教學] 如何打包一個 Gem ]]></title>
    <link href="http://blog.xdite.net/posts/2012/01/04/how-to-pack-a-gem/"/>
    <updated>2012-01-04T08:53:00+08:00</updated>
    <id>http://blog.xdite.net/posts/2012/01/04/how-to-pack-a-gem</id>
    <content type="html"><![CDATA[<h2>What is Gem</h2>

<p>RubyGems 是 Ruby 的 Package 管理系統。它的作用類似 Linux 系統下的 apt-get 或者是 yum。不同的是：RubyGems 是提供「打包」好的 Ruby Library 讓開發者能夠重複利用別人已造好的輪子，提高開發效率。</p>

<p>而目前 Rails 3.0+ 起，幾乎都也推薦使用 RubyGems 的方式，將 Plugin 打包成 Gem 的方式搭配 Bundler 使用。</p>

<h2>打包 Gem</h2>

<p>隨著時代進步，打包和發佈 Gem 的方式一直在進步。</p>

<p>最早以前大家都是手工製造 ( <a href="http://railscasts.com/episodes/135-making-a-gem">RailsCast #135</a> )，後來 Jeweler( <a href="http://railscasts.com/episodes/183-gemcutter-jeweler">RailsCast #183</a> ) 被發明出來，讓打包變得非常容易。</p>

<p>而到最後，更演變成了 Bundler 內建 ( <a href="http://asciicasts.com/episodes/245-new-gem-with-bundler">Rails 245</a> )。</p>

<p>包裝一個 Gem 變得越來越容易。</p>

<h2>Gem 的基本結構</h2>

<p>若以 Bundler 內建的指令 <code>bundle gem GEM_NAME</code> 自動生出來的檔案。其實 Gem 的結構也相當簡單。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>    [~/projects/exp] $ bundle gem my_plugin
</span><span class='line'>          create  my_plugin/Gemfile
</span><span class='line'>          create  my_plugin/Rakefile
</span><span class='line'>          create  my_plugin/.gitignore
</span><span class='line'>          create  my_plugin/my_plugin.gemspec
</span><span class='line'>          create  my_plugin/lib/my_plugin.rb
</span><span class='line'>          create  my_plugin/lib/my_plugin/version.rb
</span><span class='line'>    Initializating git repo in /Users/xdite/projects/exp/my_plugin</span></code></pre></td></tr></table></div></figure>


<ul>
<li><code>Gemfile</code> # 描述 dependency</li>
<li><code>Rakefile</code> # 發佈和打包的 rake tasks</li>
<li><code>GEM_NAME.gemspec</code> # gem 的 spec</li>
<li><code>GEM_NAME/lib/GEM_NAME.rb</code> 與 <code>GEM_NAME/lib/GEMNAME/</code> # gem 裡的 library</li>
<li><code>GEM_NAME/lib/GEM_NAME/version.rb</code> # 版本紀錄</li>
</ul>


<p>主要的 Library 需放置在 lib/ 底下。</p>

<p>若需使用到相依套件的話，需在 Gemfile 以及 .gemsepc 定義。</p>

<h3>Bundler 提供的基本 Task</h3>

<p>Bundler 基本上算是提供半自動的打包，只提供非常基本的三個 Task：</p>

<ul>
<li><code>rake build</code>    # Build my_plugin-0.0.1.gem into the pkg directory</li>
<li><code>rake install</code>  # Build and install my_plugin-0.0.1.gem into system gems</li>
<li><code>rake release</code>  # Create tag v0.0.1 and build and push my_plugin-0.0.1.gem to Rubygems</li>
</ul>


<h2>Jeweler</h2>

<p>若你有更多懶人需求，不妨 check <a href="https://github.com/technicalpickles/jeweler">Jeweler</a> 這個 gem，它提供了更多 rake tasks 讓打包更加方便。</p>

<h2>Best Practices</h2>

<p>Rails Core Team member 「Josh Peek」曾經在 Rails 官方 blog 寫過一篇文章 <a href="http://weblog.rubyonrails.org/2009/9/1/gem-packaging-best-practices">Gem Packaging: Best Practices</a> 講解如何寫出比較乾淨正確的 Gem。</p>

<h2>如何在專案中使用開發中的 gem</h2>

<p>以往的想法可能都是打包之後，在 local 安裝開發中的 gem 版本，或者是直接先放在 vendor/plugins 中測試。在有了 Bundler 的時代其實不需要這麼麻煩。</p>

<p>只要在 Gemfile 內加入這樣一行</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">gem</span> <span class="s1">&#39;my_plugin&#39;</span><span class="p">,</span> <span class="ss">:path</span> <span class="o">=&gt;</span> <span class="s2">&quot;~/projects/exp/my_plugin&quot;</span>  <span class="c1"># your local gem path </span>
</span></code></pre></td></tr></table></div></figure>


<p>就可以引用開發中的 gem，等到真的開發完。再換成 git repo 或 rubygems.org 上的版本。</p>

<p>=====</p>

<p>現在我每週都固定有在回答一些問題，發現不少人對 Ruby / Rails 的一些疑惑，都大同小異。這些問題有一些我有寫過文件但沒有公開披露，有一些沒有寫過文件但有答案。所以順手把這些回答過的答案整理到 blog 上讓大家參考。</p>

<p>如果你在 Ruby / Rails 在使用有任何問題，都歡迎貼到 <a href="http://ruby-taiwan.org">http://ruby-taiwan.org</a>。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rails 101 聖誕限時特價]]></title>
    <link href="http://blog.xdite.net/posts/2011/12/19/rails-101-xmas/"/>
    <updated>2011-12-19T11:55:00+08:00</updated>
    <id>http://blog.xdite.net/posts/2011/12/19/rails-101-xmas</id>
    <content type="html"><![CDATA[<p>Rails 101 - 火速學會 Ruby on Rails</p>

<p>因為聖誕節，所以再度特價 XD</p>

<p>USD $4.99 限時一週 2011/12/19~2011/12/26</p>

<p><img src="http://rails-101.logdown.com/images/rails-101-cover.png" alt="Rails-101" /></p>

<p><a href="http://rails-101.logdown.com/">http://rails-101.logdown.com/</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Github Flavored Ruby - by Tom Preston-Werner (1)]]></title>
    <link href="http://blog.xdite.net/posts/2011/12/10/github-flavored-ruby/"/>
    <updated>2011-12-10T11:23:00+08:00</updated>
    <id>http://blog.xdite.net/posts/2011/12/10/github-flavored-ruby</id>
    <content type="html"><![CDATA[<p>這是我近期裡面看到算比較有趣的演講，是 Github CTO Tom Preston-Werner 給的 talk</p>

<p>影片在這裡：
<a href="http://confreaks.net/videos/712-rubyconf2011-github-flavored-ruby">http://confreaks.net/videos/712-rubyconf2011-github-flavored-ruby</a></p>

<p>投影片在這裡：
<a href="http://speakerdeck.com/u/mojombo/p/github-flavored-ruby">http://speakerdeck.com/u/mojombo/p/github-flavored-ruby</a></p>

<p>本來先貼在社群內 <a href="http://ruby-taiwan.org/topics/69">http://ruby-taiwan.org/topics/69</a>。現在來補充貼我自己的筆記…</p>

<p>裡面提到非常多有趣的東西。</p>

<p>提到五個 Github 的開發哲學：</p>

<ul>
<li>Relentless Modularization</li>
<li>Readme Driven Development</li>
<li>Rake Gem</li>
<li>TomDoc</li>
<li>Semantic Version</li>
</ul>


<p>雖然這個 talk 長度不到一個小時，但是從中不少學到知識。</p>

<h2>Relentless Modularization</h2>

<p>當專案越來越大，身處其中的開發者就會越來越感覺到 codebase 帶來的壓力， code 會變得越來越 messay 和 tightly coupled。牽一髮而動全身。</p>

<p>把一些元件 modularize 應該會是好的解法。但我們總會困惑，那什麼東西應該是應該被 modularize ？</p>

<p>TOM 給出的答案：<strong>EVERYTHING</strong>。</p>

<p>Github 是這樣做的，當它們在建造 <a href="http://github.com">http://github.com</a> 時，因為 Github 是個 git services。
於是他們造了</p>

<ul>
<li>grit <a href="https://github.com/mojombo/grit">https://github.com/mojombo/grit</a></li>
</ul>


<p>接著他們為了要 scale up，造了</p>

<ul>
<li>smoke，讓 frontend 可以直接跟 backend 溝通。</li>
</ul>


<p><code>We then replace Grit::Git with a stub that makes RPC calls to our Smoke service. Smoke has direct disk access to the repositories and essentially presents Grit::Git as a service. It’s called Smoke because Smoke is just Grit in the cloud. Get it?</code></p>

<p><a href="https://github.com/blog/530-how-we-made-github-fast">https://github.com/blog/530-how-we-made-github-fast</a>
<a href="http://www.slideshare.net/rubymeetup/inside-github-with-chris-wanstrath">http://www.slideshare.net/rubymeetup/inside-github-with-chris-wanstrath</a></p>

<p>而 smoke 又用了 bertrpc</p>

<ul>
<li>bertrpc <a href="https://github.com/mojombo/bertrpc">https://github.com/mojombo/bertrpc</a></li>
</ul>


<p><code>For our data serialization and RPC protocol we are using BERT and BERT-RPC.</code></p>

<p>和</p>

<ul>
<li>proxymachine <a href="https://github.com/mojombo/proxymachine">https://github.com/mojombo/proxymachine</a></li>
</ul>


<p>保持連線平穩</p>

<p><code>ProxyMachine is my content aware (layer 7) TCP routing proxy that lets us write the routing logic in Ruby.</code></p>

<p><code>Each frontend runs four ProxyMachine instances behind HAProxy that act as routing proxies for Smoke calls.</code></p>

<p>再使用 chimney 控制 route</p>

<ul>
<li>chimney</li>
</ul>


<p><code>Chimney finds the route by making a call to Redis. Redis runs on the database servers. We use Redis as a persistent key/value store for the routing information and a variety of other data.</code></p>

<p>而每台 Fileserver 上面跑了兩組 Ernie Server。Erine 是 BERT-RPC server implementation that uses an Erlang server to accept incoming connections。</p>

<ul>
<li>ernine <a href="http://github.com/mojombo/ernie">http://github.com/mojombo/ernie</a></li>
</ul>


<p><code>Every file server runs two Ernie RPC servers behind HAProxy. Each Ernie spawns 15 Ruby workers. These workers take the RPC call and reconstitute and perform the Grit call. The response is sent back through the Smoke proxy to the Rails app where the Grit stub returns the expected Grit response.</code></p>

<p>當事情出錯了，用 Failbot 去掌握災情..</p>

<ul>
<li>failbot <a href="https://gist.github.com/1162437">https://gist.github.com/1162437</a></li>
</ul>


<p>===</p>

<ul>
<li>gerve</li>
</ul>


<p>用 Gerve 去管控 identity</p>

<p><code>GitHub user and this information is sent along with the original command and arguments to our proprietary script called Gerve (Git sERVE). Think of Gerve as a super smart version of git-shell.</code></p>

<p><code>Gerve verifies that your user has access to the repository specified in the arguments. If you are the owner of the repository, no database lookups need to be performed, otherwise several SQL queries are made to determine permissions</code></p>

<ul>
<li>resque <a href="https://github.com/defunkt/resque">https://github.com/defunkt/resque</a></li>
</ul>


<p>用 resque 實作 job queue</p>

<p><code>Resque (pronounced like "rescue") is a Redis-backed library for creating background jobs, placing those jobs on multiple queues, and processing them later.</code></p>

<ul>
<li>rock-queue <a href="https://github.com/grzegorzkazulak/rock-queue">https://github.com/grzegorzkazulak/rock-queue</a></li>
</ul>


<p>RockQueue 是用來把東西丟進 resque</p>

<p><code>Rock Queue is a simple, yet powerful unified interface for various messaging queues. In other words it allows you to swap your queuing back-end without making any modification to your application except changing the configuration parameters.</code></p>

<ul>
<li>jekyll <a href="https://github.com/mojombo/jekyll">https://github.com/mojombo/jekyll</a></li>
</ul>


<p>jekyll 用來生靜態檔案</p>

<p><code>Jekyll is a simple, blog aware, static site generator. It takes a template directory (representing the raw form of a website), runs it through Textile or Markdown and Liquid converters, and spits out a complete, static website suitable for serving with Apache or your favorite web server.</code></p>

<ul>
<li>nodeload <a href="https://github.com/blog/678-meet-nodeload-the-new-download-server">https://github.com/blog/678-meet-nodeload-the-new-download-server</a></li>
</ul>


<p>nodeload 是拿來 handling download files</p>

<ul>
<li>albino <a href="https://github.com/github/albino">https://github.com/github/albino</a></li>
</ul>


<p>albino 拿來處理 pygments 上色</p>

<p><code>Albino: a ruby wrapper for pygmentize</code></p>

<ul>
<li>markup <a href="https://github.com/github/markup">https://github.com/github/markup</a></li>
</ul>


<p>markup 用來處理不同 format 文檔的 rendering</p>

<p><code>We use this library on GitHub when rendering your README or any other rich text file.</code></p>

<ul>
<li>camo <a href="https://github.com/atmos/camo">https://github.com/atmos/camo</a></li>
</ul>


<p>camo 用來作 SSL proxy</p>

<p><code>Camo is all about making insecure assets look secure. This is an SSL image proxy to prevent mixed content warnings on secure pages served from GitHub.</code></p>

<ul>
<li>gollum <a href="https://github.com/github/gollum">https://github.com/github/gollum</a></li>
</ul>


<p>gollum 作 wiki-backend</p>

<p><code>Gollum wikis are simply Git repositories that adhere to a specific format. Gollum pages may be written in a variety of formats and can be edited in a number of ways depending on your needs. You can edit your wiki locally</code></p>

<ul>
<li>stratocaster <a href="https://github.com/technoweenie/allofthestars/tree/master/vendor/stratocaster">https://github.com/technoweenie/allofthestars/tree/master/vendor/stratocaster</a></li>
</ul>


<p>stratocaster 拿來作 event timeline</p>

<p><code>Stratocaster is a system for storing and retrieving messages on feeds. A message can contain any arbitrary payload. A feed is a filtered stream of messages. Complex querying is replaced in favor of creating multiple feeds as filters for the messages. Stratocaster uses abstract adapters to persist the data, instead of being bound to any one type of data store.</code></p>

<ul>
<li>amen</li>
</ul>


<p>amen is for graphing ( 我找不到資料 )</p>

<ul>
<li>heaven 用來作 deploy</li>
</ul>


<p><a href="http://bloggitation.appspot.com/entry/rubykaigi-2001-notes-day-1">http://bloggitation.appspot.com/entry/rubykaigi-2001-notes-day-1</a>
<a href="https://github.com/holman/feedback/issues/38">https://github.com/holman/feedback/issues/38</a></p>

<p>`Heaven - wrapper around capistrano for easy branch deployments:</p>

<p>heaven -a github -e production -h fe -b my_branch`</p>

<ul>
<li>haystack 拿來收集 Failbot 傳回來的 Exception log</li>
</ul>


<p><a href="http://www.slideshare.net/rubymeetup/inside-github-with-chris-wanstrath">http://www.slideshare.net/rubymeetup/inside-github-with-chris-wanstrath</a> # 173</p>

<p><code>We use in-house app called Haystack to monitor abitrary information treacked as JSON</code></p>

<ul>
<li>hubot</li>
</ul>


<p>就是…bot XD</p>

<p><a href="http://hubot.github.com/">http://hubot.github.com/</a></p>

<ul>
<li>github-services</li>
</ul>


<p><a href="https://github.com/github/github-services">https://github.com/github/github-services</a></p>

<p><code>Official GitHub Services Integration - You can set these up in your repo admin screen under Service Hooks</code></p>

<ul>
<li>help.github.com</li>
</ul>


<p><a href="https://github.com/github/help.github.com">https://github.com/github/help.github.com</a></p>

<p><code>opensource GitHub help guides</code></p>

<p>這一段只有七分鐘，但蒐集到的資料太多了…</p>

<p>開下一篇等等再接著寫。</p>

<h2>其他</h2>

<p>在翻一些相關資料時，還找到不少好東西</p>

<ul>
<li><a href="https://github.com/blog/530-how-we-made-github-fast">https://github.com/blog/530-how-we-made-github-fast</a></li>
<li><a href="http://www.slideshare.net/rubymeetup/inside-github-with-chris-wanstrath">http://www.slideshare.net/rubymeetup/inside-github-with-chris-wanstrath</a></li>
</ul>


<p>這兩篇也給了蠻多其他的 detail 的&#8230;</p>
]]></content>
  </entry>
  
</feed>
