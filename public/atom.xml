<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title>Blog.XDite.net</title>
  <link href="http://blog.xdite.net/atom.xml" rel="self"/>
  <link href="http://blog.xdite.net/"/>
  <updated>2011-10-09T14:59:17+08:00</updated>
  <id>http://blog.xdite.net/</id>
  <author>
    <name>xdite</name>
    
      <email>xdite@about.me</email>
    
  </author>

  
  <entry>
    <title>十個 Ruby Web Developer 應該熟悉的工具</title>
    <link href="http://blog.xdite.net/posts/2011/10/09/10-ruby-developer-must-have-tools/"/>
    <updated>2011-10-09T05:30:00+08:00</updated>
    <id>http://blog.xdite.net/posts/2011/10/09/10-ruby-developer-must-have-tools</id>
    <content type="html">&lt;p&gt;原本是承諾讀者要整理一篇我常用的工具集，後來想想其實應該要改成來寫一篇：「十個 Ruby Web Developer 應該熟悉的工具」。&lt;/p&gt;

&lt;h3&gt;1. Git&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;http://git-scm.com/&quot;&gt;Git&lt;/a&gt; 是進入 Ruby 這個生態圈首先最應該學會的工具。幾乎所有以 Ruby 開發出來的套件都放在 &lt;a href=&quot;http://github.com&quot;&gt;Github&lt;/a&gt; 上。也就是不管你要下載或修改協作都需要透過 Git。&lt;/p&gt;

&lt;h3&gt;2. RVM&lt;/h3&gt;

&lt;p&gt;Ruby 有很多種 implementation，比較多人在使用的有&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;標準的 MRI Ruby 1.8.7&lt;/li&gt;
&lt;li&gt;標準的 MRI Ruby 1.9.2&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.rubyenterpriseedition.com/&quot;&gt;REE&lt;/a&gt; ( Ruby Enterprise Edition)&lt;/li&gt;
&lt;li&gt;JRuby 等等&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;其實你用哪一種版本開發都無所謂，不過目前有一些 project 只能在 Ruby 1.9.2 上執行。切換 Ruby 環境跑實驗 project 在之前的時代是一件很痛苦的事。&lt;/p&gt;

&lt;p&gt;所以有人發明了 &lt;a href=&quot;http://beginrescueend.com/&quot;&gt;RVM&lt;/a&gt;，讓開發者可以無痛的可以切換各種 Ruby 環境，甚至透過 RVM 製造出獨立的 Gemset 環境，無負擔的盡情實驗新工具。&lt;/p&gt;

&lt;h3&gt;3. Mac&lt;/h3&gt;

&lt;p&gt;不可否認的開發 Ruby 程式，&lt;a href=&quot;http://www.apple.com/tw/mac/&quot;&gt;Mac&lt;/a&gt; 是第一首選環境。&lt;/p&gt;

&lt;p&gt;最初的原因是撰寫 Ruby / Rails 的利器: &lt;a href=&quot;http://marcomates.com&quot;&gt;TextMate&lt;/a&gt; ，是 Mac 上的軟體。而後來使用 Mac 開發 Ruby 程式的開發者越來越多，更加深這種情況，
造成一些實戰 best practices 以及友善的開發工具，幾乎都以 Mac 為優先或唯一平台發佈，如：Pow 與 Homebrew。&lt;/p&gt;

&lt;h3&gt;4. Homebrew&lt;/h3&gt;

&lt;p&gt;原先在 Mac 上，套件管理幾乎是 Macports 與 Fink 的天下。但這兩者因為 dependency 處理不佳，加上需要 sudo 執行。某些時候會造成套件管理上的災難。
在 OSX 10.6 之後的時代，就逐漸被後起之秀 Homebrew 取代。&lt;/p&gt;

&lt;p&gt;Homebrew 有兩大極優秀之點：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;by user，不需 sudo 就可以安裝套件。不會把檔案權限搞得一團髒。&lt;/li&gt;
&lt;li&gt;更新迅速以及乾淨。Homebrew 是 git-based 的 fomula sets，透過預設的 fomula 安裝程式。&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;安裝時如果發現有錯誤，可以自行修改，並透過 Github 的功能發 pull request 要求管理者 patch。用 Homebrew 建置出來的 Rails 開發環境通常極為乾淨且無惱人的套件 bug。&lt;/p&gt;

&lt;p&gt;（ Rails developer 最常會撞雷的兩大套件：MySQL 與 ImageMagick 在 brew 上裝，幾乎沒什麼問題&amp;#8230;）[註1]&lt;/p&gt;

&lt;h3&gt;5. Pow&lt;/h3&gt;

&lt;p&gt;這是由 &lt;a href=&quot;http://37signals.com&quot;&gt;37signals&lt;/a&gt; 所開發出來的網頁伺服器，可以跑任何 Rack Based 的網頁程式。特點是，你可以把某個開發中的 project，如：wiki，symlink 到自己的家目錄底下的 .pow/ 資料夾。&lt;/p&gt;

&lt;figure class=&#8217;code&#8217;&gt;&lt;figcaption&gt;&lt;span&gt;&lt;/span&gt;&lt;/figcaption&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&#8217;line-number&#8217;&gt;1&lt;/span&gt;
&lt;span class=&#8217;line-number&#8217;&gt;2&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#8217;code&#8217;&gt;&lt;pre&gt;&lt;code class=&#8217;bash&#8217;&gt;&lt;span class=&#8217;line&#8217;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; ~/.pow
&lt;/span&gt;&lt;span class=&#8217;line&#8217;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;ln -s ~/projects/wiki
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;


&lt;p&gt;再打開瀏覽器上的 http://wiki.dev/，就可以把 projects 掛起來了。&lt;/p&gt;

&lt;p&gt;(原理是攔截對 port 80 上的 request 導回 Pow)&lt;/p&gt;

&lt;p&gt;在從前，如果你要掛上 projects，通常得自己改 local 的 apache conf 和 /etc/hosts 加上設定。掛起、移除、重開都非常麻煩。&lt;/p&gt;

&lt;p&gt;而 &lt;a href=&quot;http://pow.cx&quot;&gt;Pow&lt;/a&gt; 的誕生，讓常常追許多新玩意的開發者，實驗的成本變得極度低廉。&lt;/p&gt;

&lt;h3&gt;6. Rack&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/rack/rack/wiki/List-of-Middleware&quot;&gt;Rack&lt;/a&gt; 是一個 Ruby 套件，也同時是 Ruby 界的網頁程式標準 interface。背後的想法與原理可以參考我以前寫的一篇舊文 &lt;a href=&quot;http://wp.xdite.net/?p=1557&quot;&gt;Rack 與 Rack middleware&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;現在只要看以 Ruby 開發的網站程式，幾乎都支援 Rack。不會再有以前哪一套框架，推薦獨家使用哪一套 web server 跑的亂象。&lt;/p&gt;

&lt;p&gt;而因為有了 Pow，掛起 Rack-based 的網站實驗程式成本也很低廉。&lt;/p&gt;

&lt;p&gt;同時因為採用 Rack 架構開發的緣故，開發者可以透過 Rack middleware 外掛實作一些框架或程式沒有的功能。&lt;/p&gt;

&lt;p&gt;比如說：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/logicaltext/rack-no-www&quot;&gt;rack-now-www&lt;/a&gt; 硬是幹掉網址的 www&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/jtrupiano/rack-rewrite&quot;&gt;rack-rewrite&lt;/a&gt; 在不支援 .htaccess 的環境下，直接使用 rack 硬 rewrite routing&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;也很自然而然的會知道：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;想惡搞，改 config.ru&lt;/li&gt;
&lt;li&gt;想重開，touch tmp/restart.txt&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;這些潛規則。&lt;/p&gt;

&lt;h3&gt;7. Bundler&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;http://gembundler.com/&quot;&gt;Bundler&lt;/a&gt; 原先是 Rails3 架構師 Yehuda Katz 開發出來解決 Rails 中 package dependency 的工具（ 在開發 Merb 這個 framework 時，Katz 就開始嘗試實作了）。&lt;/p&gt;

&lt;p&gt;package dependency 一直是相當麻煩的問題。解不開，就無法將程式 boot 起來。&lt;/p&gt;

&lt;p&gt;原先大家也只有拿 Bundler 搭配 Rails 使用。&lt;/p&gt;

&lt;p&gt;而後來 Bundler 也逐漸變成一般 Ruby 程式中預設的套件 dependency 管理程式。&lt;/p&gt;

&lt;p&gt;Bundler 中的 Gemfile 設計，不只能讓開發者能夠輕易的解決套件相依問題，並且可以直接引入「開發中」套件，解決 3rd gem 版本更新過慢，卡住自己開發進度的問題。&lt;/p&gt;

&lt;figure class=&#8217;code&#8217;&gt;&lt;figcaption&gt;&lt;span&gt;Gemfile&lt;/span&gt;&lt;/figcaption&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&#8217;line-number&#8217;&gt;1&lt;/span&gt;
&lt;span class=&#8217;line-number&#8217;&gt;2&lt;/span&gt;
&lt;span class=&#8217;line-number&#8217;&gt;3&lt;/span&gt;
&lt;span class=&#8217;line-number&#8217;&gt;4&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#8217;code&#8217;&gt;&lt;pre&gt;&lt;code class=&#8217;ruby&#8217;&gt;&lt;span class=&#8217;line&#8217;&gt;&lt;span class=&quot;n&quot;&gt;gem&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;nokogiri&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:git&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;git://github.com/tenderlove/nokogiri.git&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#8217;line&#8217;&gt;&lt;span class=&quot;n&quot;&gt;gem&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;nokogiri&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:git&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;git://github.com/tenderlove/nokogiri.git&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:branch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;stable-2&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#8217;line&#8217;&gt;&lt;span class=&quot;n&quot;&gt;gem&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;nokogiri&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:git&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;git://github.com/tenderlove/nokogiri.git&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:tag&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;tag-2&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#8217;line&#8217;&gt;&lt;span class=&quot;n&quot;&gt;gem&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;nokogiri&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:git&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;git://github.com/tenderlove/nokogiri.git&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:ref&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;23456&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;


&lt;h3&gt;8. Guard&lt;/h3&gt;

&lt;p&gt;在開發網頁程式時，開發者很常重複這樣的動作：寫一寫 -&gt; run test -&gt; refresh web browser -&gt; 繼續修改 -&gt; run test -&gt; refresh browser&lt;/p&gt;

&lt;p&gt;這些都是很機械式的行為，非常煩人。&lt;/p&gt;

&lt;p&gt;有沒有辦法只要「檔案變更，就自動作事」呢？&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/guard/guard&quot;&gt;Guard&lt;/a&gt; 就是這樣的一套工具。&lt;/p&gt;

&lt;p&gt;有趣的是，Guard 剛推出時，其實也只單純是一套監視檔案工具變動的工具，你可以透過寫 Guardfile，去自由監視需要監視的資料夾，再 do something。而因為 Guard 架構算設計的不錯，後來許多開發者更基於 Guard
做出更多其他的 rubygems。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/guard/guard-livereload&quot;&gt;guard-livereload&lt;/a&gt; 就是一個例子。&lt;/p&gt;

&lt;h3&gt;9. LiveReload&lt;/h3&gt;

&lt;p&gt;修改網頁 =&gt; refresh browser 是剛剛所提到的煩人事之一。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://github.com/mockko/livereload&quot;&gt;LiveReload&lt;/a&gt; 提供了監視檔案變動，並通知 browser reload 的功能。&lt;/p&gt;

&lt;p&gt;開發者如果螢幕夠大的話，可以同時開著文字編輯器與 browser，修改的任何變動馬上即時顯示在 browser 上。&lt;/p&gt;

&lt;p&gt;值得一提的是，LiveReload 在 10.7 以後是 broken 的。因此後來有人利用 guard 實作出了 guard-livereload 作為替代品。&lt;/p&gt;

&lt;p&gt;以前寫過舊文一篇：&lt;a href=&quot;http://wp.xdite.net/?p=1791&quot;&gt;LiveReload：你的套版好幫手！&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;10. Sass / SCSS / Compass&lt;/h3&gt;

&lt;p&gt;自從 Rails 3.1 引入 &lt;a href=&quot;http://sass-lang.com/&quot;&gt;SCSS&lt;/a&gt; 作為 &lt;a href=&quot;http://upgrade2rails31.com/asset-pipeline&quot;&gt;Asset Pipeline&lt;/a&gt; 當中的選項之後，這套本來沒多少開發者知道的 CSS framework 就開始瘋狂走紅。&lt;/p&gt;

&lt;p&gt;SCSS 的原理是透過寫編寫「巢狀」的 style，取代原本需要寫 CSS 時需要一直複製 DOM 結構名稱的動作。並且支援變數、數學、繼承、mixin 等功能&amp;#8230;&lt;/p&gt;

&lt;p&gt;如：&lt;/p&gt;

&lt;figure class=&#8217;code&#8217;&gt;&lt;figcaption&gt;&lt;span&gt;SCSS&lt;/span&gt;&lt;/figcaption&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&#8217;line-number&#8217;&gt;1&lt;/span&gt;
&lt;span class=&#8217;line-number&#8217;&gt;2&lt;/span&gt;
&lt;span class=&#8217;line-number&#8217;&gt;3&lt;/span&gt;
&lt;span class=&#8217;line-number&#8217;&gt;4&lt;/span&gt;
&lt;span class=&#8217;line-number&#8217;&gt;5&lt;/span&gt;
&lt;span class=&#8217;line-number&#8217;&gt;6&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#8217;code&#8217;&gt;&lt;pre&gt;&lt;code class=&#8217;scss&#8217;&gt;&lt;span class=&#8217;line&#8217;&gt;   &lt;span class=&quot;na&quot;&gt;$border-color&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;#3bbfce&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#8217;line&#8217;&gt;   &lt;span class=&quot;na&quot;&gt;$link-color&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;#3bbfcf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#8217;line&#8217;&gt;   &lt;span class=&quot;nc&quot;&gt;.content&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#8217;line&#8217;&gt;      &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;border-color&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$border-color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#8217;line&#8217;&gt;        &lt;span class=&quot;nt&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$link-color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#8217;line&#8217;&gt;   &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;


&lt;p&gt;可以生成&lt;/p&gt;

&lt;figure class=&#8217;code&#8217;&gt;&lt;figcaption&gt;&lt;span&gt;CSS&lt;/span&gt;&lt;/figcaption&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&#8217;line-number&#8217;&gt;1&lt;/span&gt;
&lt;span class=&#8217;line-number&#8217;&gt;2&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#8217;code&#8217;&gt;&lt;pre&gt;&lt;code class=&#8217;css&#8217;&gt;&lt;span class=&#8217;line&#8217;&gt;  &lt;span class=&quot;nc&quot;&gt;.content&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;border-color&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;#3bbfce&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#8217;line&#8217;&gt;  &lt;span class=&quot;nc&quot;&gt;.content&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;#3bbfcf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;


&lt;p&gt;而 &lt;a href=&quot;http://compass-style.org/&quot;&gt;Comass&lt;/a&gt; 是基於 SCSS 的 Framework。提供了更進一步的許多暴力 feature。&lt;/p&gt;

&lt;p&gt;有些人可能會搞不清楚 SASS / SCSS / Compass 的關係。如果你有興趣的話，可以參考我在 &lt;a href=&quot;http://upgrade2rails31.com&quot;&gt;Upgrade2Rails31&lt;/a&gt; 這個 project 中寫的兩篇文章：&lt;a href=&quot;http://upgrade2rails31.com/sass-scss&quot;&gt;Sass/SCSS&lt;/a&gt; 以及 &lt;a href=&quot;http://upgrade2rails31.com/compass&quot;&gt;Compass&lt;/a&gt;。&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>五年寫了 230 萬字</title>
    <link href="http://blog.xdite.net/posts/2011/10/08/wu-nian-xie-liao-230-wan-zi/"/>
    <updated>2011-10-08T00:17:00+08:00</updated>
    <id>http://blog.xdite.net/posts/2011/10/08/wu-nian-xie-liao-230-wan-zi</id>
    <content type="html">&lt;p&gt;這兩天因為本來嘗試要將 Wordpress 轉成 Octopress 的緣故。寫了不少 script。而壓出來的 MySQL 備份檔大概也有 11 M。原本以為是 spam 佔了很多份量。沒想到去掉 comment，還是足足有 10 多 M&amp;#8230;&lt;/p&gt;

&lt;p&gt;才發現自己好像還真的寫了不少字。&lt;/p&gt;

&lt;p&gt;好奇用 wc 跑自己的文章目錄夾，得出一些有趣的數字：&lt;/p&gt;

&lt;p&gt;文章：840 篇
字數：2312404 字。&lt;/p&gt;

&lt;p&gt;歷時 1902 days&lt;/p&gt;

&lt;p&gt;平均 2.23 天寫一篇文章&lt;/p&gt;

&lt;p&gt;平均每篇文章長 2752 字。&lt;/p&gt;

&lt;p&gt;這個數字跑出來我自己也嚇了一跳，因為實在是遠超乎自己的想像。&lt;/p&gt;

&lt;p&gt;這件事也在某種程度上提醒和鼓勵了自己：&lt;strong&gt;持續做一件微小的事，時日一久也可以匯集巨大成果&lt;/strong&gt;。&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Why Octopress?</title>
    <link href="http://blog.xdite.net/posts/2011/10/07/what-is-octopress/"/>
    <updated>2011-10-07T19:05:00+08:00</updated>
    <id>http://blog.xdite.net/posts/2011/10/07/what-is-octopress</id>
    <content type="html">&lt;p&gt;&lt;a href=&quot;http://octopress.org/&quot;&gt;OctoPress&lt;/a&gt; 是一套Blog Framework。也是我這個 blog 正在用的系統。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://octopress.org/images/logo.png&quot;&gt;&lt;/p&gt;

&lt;p&gt;用了這麼久（5 年）的 Wordpress，突然放棄，你一定會好奇背後真正轉換的原因。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://wordpress.org&quot;&gt;Wordpress&lt;/a&gt; 是一個很方便的 Blog 系統。&lt;/p&gt;

&lt;p&gt;但很可惜的，一直以來它一直是一個給文字書寫者用的部落格系統。&lt;/p&gt;

&lt;p&gt;怎麼說呢？若你是一個專門談論技術的 blogger，用 Wordpress 寫一篇技術文帶給你的感覺通常是無比…麻煩。&lt;/p&gt;

&lt;h2&gt;樣樣麻煩&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;貼圖很麻煩&lt;/strong&gt;。（我們有潔癖，不喜歡直接傳圖直接上 Wordpres，通常會傳上 flickr 再 embd script)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;程式排版很麻煩&lt;/strong&gt;。如果不裝一些 plugin，幾乎無法貼程式語法。但是通常 plugin 也需要你寫特殊語法排這些程式碼。生出來的東西也很差強人意。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Hosting 很麻煩&lt;/strong&gt;。安裝 Wordpress 需要租一個 &lt;a href=&quot;http://zh.wikipedia.org/zh-hant/LAMP&quot;&gt;LAMP&lt;/a&gt; 的 stack 去停泊，沒事你還要害怕機器炸掉，沒有備份。上班摸一整天機器了，下班根本不想再弄…&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;版本控制 很麻煩&lt;/strong&gt;。以前的 blog 系統沒有自動備份，視窗一炸掉，文章 99% 就是不見了。而雖然現在 Wordpress 還有一些其他 BSP 有自動儲存功能。但你我心知肚明那只是醫手殘。你只有辦法撈上最近幾個版本，去把文章存回來。若要看自己上次 &lt;strong&gt;因為什麼理由，修訂了這篇文章的草稿&lt;/strong&gt; 根本辦不到。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;改 theme 很麻煩&lt;/strong&gt;。如果需要自己訂一些 tips 等方塊，要自己另寫 CSS，但是改 wp-theme 再生效實在是很麻煩的一件事。而且可不可以讓我直接寫 &lt;a href=&quot;http://sass-lang.com&quot;&gt;SCSS&lt;/a&gt;就好？&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;寫作 很麻煩&lt;/strong&gt;。雖然這一點寫出來算有點雞蛋挑骨頭。但是使用 &lt;a href=&quot;http://markdown.tw&quot;&gt;Markdown&lt;/a&gt; 書寫文章，實在遠比用黏膩膩的 HTML 語法快多了。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;樣樣都煩啊！想到就懶！！&lt;/p&gt;

&lt;h2&gt;Developer Blogger 的需求&lt;/h2&gt;

&lt;p&gt;其實我們的需求也不多。若是可以：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;輕鬆的撰寫 Markdown&lt;/li&gt;
&lt;li&gt;輕鬆的貼圖&lt;/li&gt;
&lt;li&gt;輕鬆的貼程式碼&lt;/li&gt;
&lt;li&gt;改 CSS 超容易&lt;/li&gt;
&lt;li&gt;不用煩惱佈署問題&lt;/li&gt;
&lt;li&gt;檢視草稿變化，甚至是站台更動變化。&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;這樣就很開心了！&lt;/p&gt;

&lt;h2&gt;Octopress&lt;/h2&gt;

&lt;p&gt;而 Octopress 就是這樣一套會讓人開心的 Blog Framework。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;輕鬆佈署&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Octopress 背後是一套叫 Jekyll 的靜態網站產生引擎，可以輕鬆產生 static-file based 的網站，佈署出去。&lt;/p&gt;

&lt;p&gt;你可以選擇放到自己的機器，&lt;a href=&quot;http://heroku.com&quot;&gt;Heroku&lt;/a&gt;，甚至是 Github Page 上。&lt;/p&gt;

&lt;p&gt;佈署簡單到只要一個指令 rake deploy 就出去了！&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;輕鬆撰寫文章&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Octopress 支援 Markdown，直接解決了寫作和貼圖的問題。&lt;/p&gt;

&lt;p&gt;而程式碼的排版更不用煩惱，可以直接使用 Markdown 原先的 block 貼程式碼，只要註記語言種類，就會自動排版上色。（格式也與 Markdown 語法完全相容）&lt;/p&gt;

&lt;p&gt;更令人讚嘆的是可以內嵌 &lt;a href=&quot;http://gist.github.com&quot;&gt;Gist&lt;/a&gt;。這不知道有多酷啊…&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;使用 Git 版本控制&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Octopress 本身不需使用任何 database，架構本身靠的是文字檔案以及版本控制系統。可以透過使用 Git 觀看站體與文章的修改變化。&lt;/p&gt;

&lt;p&gt;而我現在寫文章還常使用進階的招數：開 Git branch 把 TODO 扔進 TODO branch，這樣就算我還有文章沒有寫好，或者是日後需要補充，都不需要另外管理以及害怕被人看見。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;更改網站配置更方便&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Octopress 雖然基於 Jekyll，但用起來比 Jekyll 更方便，不少功能都是內建模組化，比如：社群功能（Twitter / Google plus）、留言功能（&lt;a href=&quot;http://disqus.com/&quot;&gt;DISQUS&lt;/a&gt;）、統計功能（Google Analytics），這些都簡單到只要改 _config.yml 就可以改一改，馬上就可以有一個 Blog 上線了。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;對 Ruby Developer very very very friendly&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Octopress 是 Ruby-based 的。自然許多 feature 是取用 Ruby Ecosystem 熱門架構與套件打造的。&lt;/p&gt;

&lt;p&gt;熟悉 Ruby 的開發者，可以透過：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Rack&lt;/li&gt;
&lt;li&gt;Rake&lt;/li&gt;
&lt;li&gt;SCSS&lt;/li&gt;
&lt;li&gt;Guard&lt;/li&gt;
&lt;li&gt;LiveReload&lt;/li&gt;
&lt;li&gt;Heroku&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;就玩出更多花樣。&lt;/p&gt;

&lt;p&gt;寫出 Octopress plugin 更不是什麼難事。&lt;/p&gt;

&lt;h2&gt;小結&lt;/h2&gt;

&lt;p&gt;Wordpress 爛歸爛，但如果不挑的話，還算是可以用。一直以來，我都認為自己寫文章的速度，若不被平台和工具綁住的話，其實寫作速度還可以更快，寫作興致還可以更高昂。&lt;/p&gt;

&lt;p&gt;想歸想，但實際上找不出解法去解決問題。&lt;/p&gt;

&lt;p&gt;這件事，一直到了我漸漸接觸到了 Markdown 、 &lt;a href=&quot;www.iawriter.com&quot;&gt;iAWriter&lt;/a&gt; / &lt;a href=&quot;http://mouapp.com&quot;&gt;Mou&lt;/a&gt; 、 &lt;a href=&quot;https://github.com/mojombo/jekyll&quot;&gt;Jekyll&lt;/a&gt; / Octopress，慢慢被改變了。&lt;/p&gt;

&lt;p&gt;後來實際用了 Octopress 認真架了一個關於 「&lt;a href=&quot;http://upgrade2rails31.com/&quot;&gt;Upgred2Rails31&lt;/a&gt;」 的教學網站，放置升級到 Rails 3.1 的教學筆記。&lt;/p&gt;

&lt;p&gt;寫著寫著，更加深了我這樣的信念。我寫作的速度，文章的長度，還有文章的有趣度，無一不被提高了！&lt;/p&gt;

&lt;p&gt;加上我本身的職業就是 Ruby Developer，要 &lt;strong&gt;Hack&lt;/strong&gt; 這個系統根本不是什麼難事。這個職業反而有加分作用。&lt;/p&gt;

&lt;p&gt;最後，就是你看到的：我終於鼓起勇氣把用了五年的 Wordpress 扔掉了 XD&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Migrate to Octopress</title>
    <link href="http://blog.xdite.net/posts/2011/10/07/migrate-to-octopress/"/>
    <updated>2011-10-07T18:19:00+08:00</updated>
    <id>http://blog.xdite.net/posts/2011/10/07/migrate-to-octopress</id>
    <content type="html">&lt;p&gt;&lt;a href=&quot;http://wordpress.org/&quot;&gt;Wordpress&lt;/a&gt; 用到今年，也第五年了。發現越來越不敷我的需求。&lt;/p&gt;

&lt;p&gt;決定轉戰 &lt;a href=&quot;http://octopress.org/&quot;&gt;Octopress&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;原本是打算 host 在 Github 上，這樣比較炫（？）&lt;/p&gt;

&lt;p&gt;後來考慮到要支援舊 blog 上的文章。所以最後還是放在 &lt;a href=&quot;http://heroku.com&quot;&gt;Heroku&lt;/a&gt; 上，用 &lt;a href=&quot;https://github.com/jtrupiano/rack-rewrite&quot;&gt;rack-rewrite&lt;/a&gt; 對所有舊文章轉址。&lt;/p&gt;

&lt;p&gt;舊文章會通通放在 &lt;a href=&quot;http://wp.xdite.net&quot;&gt;http://wp.xdite.net&lt;/a&gt;。舊站的文章我就不繼續再更新了。feed 應該不受影響，本來就放在 feedburner 上。&lt;/p&gt;

&lt;p&gt;至於迴響也會轉放在 disqus 上。&lt;/p&gt;

&lt;p&gt;大概就這樣&amp;#8230;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;本來曾經考慮要連內容都轉過來，連中文亂碼都搞定了，不過排版要重弄就有點懶了。&lt;/p&gt;

&lt;p&gt;再來是 compile 的速度，我在舊站寫了大概約 850 篇文章。轉過來每 compile 一次對我來說就是一次折磨。&lt;/p&gt;

&lt;p&gt;算了 :Q&lt;/p&gt;
</content>
  </entry>
  
</feed>
