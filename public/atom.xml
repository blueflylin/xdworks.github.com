<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Blog.XDite.net]]></title>
  <link href="http://blog.xdite.net/atom.xml" rel="self"/>
  <link href="http://blog.xdite.net/"/>
  <updated>2011-11-19T12:10:30+08:00</updated>
  <id>http://blog.xdite.net/</id>
  <author>
    <name><![CDATA[xdite]]></name>
    <email><![CDATA[xdite@about.me]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[OmniAuth - 實作多方認證的最佳實踐 (2)]]></title>
    <link href="http://blog.xdite.net/posts/2011/11/19/omniauth-clean-auth-provider-2/"/>
    <updated>2011-11-19T03:33:00+08:00</updated>
    <id>http://blog.xdite.net/posts/2011/11/19/omniauth-clean-auth-provider-2</id>
    <content type="html"><![CDATA[<p><a href="https://github.com/intridea/omniauth">OmniAuth</a>  本身並不是一套被限於特定框架、特定認註冊系統上的認證方案，而是一個基於 Rack 的「認證策略提供者」。</p>

<h2>主要架構</h2>

<h3>Provider</h3>

<p>OmniAuth 將所有的認證提供方，通通視為不同的 Provider，每一種 Provider 有一個 Strategy。不管你是 Facebook、還是 LDAP，通通擁有各自的 Strategy。</p>

<h3>Strategy</h3>

<p>每一個 Strategy 分為兩個 Phase：</p>

<ul>
<li>request phase</li>
<li>callback phase</li>
</ul>


<p>而 Omniauth 提供了兩個主要的 url</p>

<ul>
<li>/auth/:provider</li>
<li>/auth/:provider/callback</li>
</ul>


<p>當使用者 visit /auth/github 時，OmniAuth 會將你導到 Github 去作認證。而認證成功之後，會 redirect 到 callback 網址。通常我們會在 callback 網址作 session create 動作（透過拿回來的資料 find_or_create user）</p>

<h4>使用 Strategy 的好處</h4>

<p>使用 Strategy 的好處很多。最明顯的我覺得有幾點：</p>

<h5>1.能夠將 routhing 切得很乾淨。</h5>

<p>這點顯而易見。</p>

<h5>2.能夠在網路不通下繼續實作認證。</h5>

<p>有時候開發中，可能正用本機網址，無法實作 callback。有時候是網路不通。OmniAuth 可以讓我們使用一套 developer strategy 去 &#8220;fake&#8221;。</p>

<p>所以在開發過程中，即便網路不通，我們還是可以透過寫 developer strategy 的方式，拿到同格式的假資料，完成假認證、假 callback。</p>

<figure class='code'><figcaption><span>lib/developer_straegy.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;omniauth/core&#39;</span>
</span><span class='line'><span class="k">module</span> <span class="nn">OmniAuth</span>
</span><span class='line'>  <span class="k">module</span> <span class="nn">Straegies</span>
</span><span class='line'>    <span class="k">class</span> <span class="nc">Developer</span>
</span><span class='line'>      <span class="kp">include</span> <span class="no">OmniAuth</span><span class="o">::</span><span class="no">Strategy</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">app</span><span class="p">,</span> <span class="o">*</span><span class="n">args</span><span class="p">)</span>
</span><span class='line'>        <span class="n">supper</span><span class="p">(</span><span class="n">app</span><span class="p">,</span> <span class="ss">:developer</span><span class="p">,</span> <span class="o">*</span><span class="n">args</span><span class="p">)</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">def</span> <span class="nf">request_phase</span>
</span><span class='line'>        <span class="no">OmniAuth</span><span class="o">::</span><span class="no">Form</span><span class="o">.</span><span class="n">build</span> <span class="n">url</span><span class="ss">:callback_url</span><span class="p">,</span> <span class="n">title</span><span class="p">:</span> <span class="s2">&quot;Hello developer&quot;</span> <span class="k">do</span>
</span><span class='line'>          <span class="n">text_field</span> <span class="s2">&quot;Name&quot;</span><span class="p">,</span> <span class="s2">&quot;name&quot;</span>
</span><span class='line'>          <span class="n">text_field</span> <span class="s2">&quot;Email&quot;</span><span class="p">,</span> <span class="s2">&quot;email&quot;</span>
</span><span class='line'>          <span class="n">text_field</span> <span class="s2">&quot;Nickname&quot;</span><span class="p">,</span> <span class="s2">&quot;nickname&quot;</span>
</span><span class='line'>        <span class="k">end</span><span class="o">.</span><span class="n">to_response</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">def</span> <span class="nf">auth_hash</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>          <span class="s1">&#39;provider&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;twitter&#39;</span>
</span><span class='line'>          <span class="s1">&#39;uid&#39;</span> <span class="o">=&gt;</span> <span class="n">request</span><span class="o">[</span><span class="s1">&#39;email&#39;</span><span class="o">]</span><span class="p">,</span>
</span><span class='line'>          <span class="s1">&#39;user_info&#39;</span> <span class="o">=&gt;</span>
</span><span class='line'>          <span class="p">{</span>
</span><span class='line'>            <span class="s1">&#39;name&#39;</span> <span class="o">=&gt;</span> <span class="n">request</span><span class="o">[</span><span class="s1">&#39;name&#39;</span><span class="o">]</span><span class="p">,</span>
</span><span class='line'>            <span class="s1">&#39;email&#39;</span> <span class="o">=&gt;</span> <span class="n">request</span><span class="o">[</span><span class="s1">&#39;email&#39;</span><span class="o">]</span><span class="p">,</span>
</span><span class='line'>            <span class="s1">&#39;nickname&#39;</span> <span class="o">=&gt;</span> <span class="n">request</span><span class="o">[</span><span class="s1">&#39;nickname&#39;</span><span class="o">]</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>（ 這是 0.3 範例，出處為 <a href="http://cn.intridea.com/2011/07/omniauth-intro/">OmniAuth, 昨天今天明天</a>）</p>

<p>而新的 1.0 Strategy Guide 已經 <a href="https://github.com/intridea/omniauth/wiki/Strategy-Contribution-Guide">釋出</a>，一個 Strategy 需要完成的部分大致上有這三個：</p>

<ol>
<li>request phase 如何完成</li>
<li>callback phase 如何完成</li>
<li>定義回傳需拿到的資料：如 provider name、uid、email、以及 extra info</li>
</ol>


<h3>User Info</h3>

<p>在 0.3 版的範例裡面，可以看到回傳的資訊是使用 auth_hash 去包。這也導致了另一個混亂的情形，各種不同的 Strategy 寫了不同的 auth_hash，把 auth_hash 拉回來時，create User 的介面相當混亂與醜陋。</p>

<p>而自 1.0 版起，這些使用者資訊將會切成四種 DSL methos : <code>info</code>, <code>uid</code>, <code>extra</code>, 和 <code>credentials</code>。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">OmniAuth</span><span class="o">::</span><span class="no">Strategies</span><span class="o">::</span><span class="no">MyStrategy</span> <span class="o">&lt;</span> <span class="no">OmniAuth</span><span class="o">::</span><span class="no">Strategies</span><span class="o">::</span><span class="no">OAuth</span>
</span><span class='line'>  <span class="n">uid</span> <span class="p">{</span> <span class="n">access_token</span><span class="o">.</span><span class="n">params</span><span class="o">[</span><span class="s1">&#39;user_id&#39;</span><span class="o">]</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">info</span> <span class="k">do</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>      <span class="ss">:first_name</span> <span class="o">=&gt;</span> <span class="n">raw_info</span><span class="o">[</span><span class="s1">&#39;firstName&#39;</span><span class="o">]</span><span class="p">,</span>
</span><span class='line'>      <span class="ss">:last_name</span> <span class="o">=&gt;</span> <span class="n">raw_info</span><span class="o">[</span><span class="s1">&#39;lastName&#39;</span><span class="o">]</span><span class="p">,</span>
</span><span class='line'>      <span class="ss">:email</span> <span class="o">=&gt;</span> <span class="n">raw_info</span><span class="o">[</span><span class="s1">&#39;email&#39;</span><span class="o">]</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">extra</span> <span class="k">do</span>
</span><span class='line'>    <span class="p">{</span><span class="s1">&#39;raw_info&#39;</span> <span class="o">=&gt;</span> <span class="n">raw_info</span><span class="p">}</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">raw_info</span>
</span><span class='line'>    <span class="n">access_token</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">&#39;/info&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>把基本資訊的存取切分的更清楚。</p>

<p>讓我把各家新版的 Strategy 翻出來介紹給大家吧：</p>

<p>看完這些 example，相信你可以更了解這些資訊架構後面的想法是什麼。</p>

<ul>
<li><a href="https://github.com/arunagw/omniauth-twitter/blob/master/lib/omniauth/strategies/twitter.rb">omniauth-twitter</a></li>
<li><a href="https://github.com/mkdynamic/omniauth-facebook/blob/master/lib/omniauth/strategies/facebook.rb">omniauth-facebook</a></li>
<li><a href="https://github.com/intridea/omniauth-github/blob/master/lib/omniauth/strategies/github.rb">omniauth-githuib</a></li>
</ul>


<h2>小結</h2>

<p>而因為 OmniAuth 是 rack-middleware，且介面單純的緣故（ 兩組統一 url），因此可以接在各種任何支援 Rack 的 Ruby Web Framework 上，在這一層之上就完成握手交換資訊的互動。<strong>於是整個認證過程就可以與「框架」和「框架上的傳統認證方案」完全切割分離</strong>，開發者可以透過這兩組介面完成傳送與接收資訊的動作，而不需像傳統實作，必須大幅客製 controller 與 routing 遷就 provider。</p>

<p>下一節我將繼續介紹，為何 OmniAuth 要自 0.3 大幅改版至 1.0 。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[OmniAuth - 實作多方認證的最佳實踐 (1)]]></title>
    <link href="http://blog.xdite.net/posts/2011/11/19/omniauth-clean-auth-provider-1/"/>
    <updated>2011-11-19T02:16:00+08:00</updated>
    <id>http://blog.xdite.net/posts/2011/11/19/omniauth-clean-auth-provider-1</id>
    <content type="html"><![CDATA[<p>這幾天在寫一個小玩具，因為要用到 Github 認證，於是採取了 <a href="https://github.com/intridea/omniauth">OmniAuth</a>  + <a href="https://github.com/plataformatec/devise">Devise</a> 這組作法。因為適逢 OmniAuth 在十月底一舉從 v0.3 大改版，直衝到 v1.0。版號大躍進，整個架構與 API 也幾乎全都不一樣了，網路上的教學幾乎等於作廢，加上 Github 原本實作的 OAuth 2.0 本來就不太標準，吃了幾個小時苦頭，終於才把認證搞定。不過也拜這一晚的折騰，讓我把 OmniAuth 架構摸個更加透徹。</p>

<h2>多方認證的需求</h2>

<p>現在作網站，使用者的要求比以往的高。在過往，幾乎都是站方的姿態較高，使用者要試用一個網站前，無不是必須填一堆資料，勾完一堆囉哩八縮的選項，才能加入這個網站。</p>

<p>但隨著時代的改變，Facebook Connect 的普及，現在網路生態卻跟以前完全相反，如果你的網站不提供傳統帳號密碼以外的方案（諸如 Facebook Connect、Google ID …etc.）使用者二話不說，絕對馬上就閃人。反正網站那麼多，不差哪一個…</p>

<p>於是提供傳統帳號密碼以外的註冊方案，對一個新創網站就顯得格外重要。</p>

<h2>實作上的困難</h2>

<p>話雖如此，但是實作上是真的有很大的困難的。就拿 Rails 生態圈好了，<a href="https://www.ruby-toolbox.com/categories/rails_authentication">傳統帳號密碼方案</a> 有非常多套：Devise、Authlogic、Restful-authenication 等等。而實作第三方認證的功能也是相當多元的，你可以拿 Facebook API 的 gem 或者是 Google OAuth 的 gem 直接硬幹整合這些方案，也是做的出來。</p>

<p>理想的境界應該是一個網站最好只要提供一個 3rd Party 的認證，而且認證 Library 與 API 存取機制，不能要有太大的變化。</p>

<p>但這真的只是理想而已，現實上你會遇到三類大挑戰：</p>

<h3>1. PM 亂開規格</h3>

<p>PM 不會管你死活，硬是要你同時既提供 Facebook / OpenID / Yahoo Auth / Google OpenID。天知道這些網站認證和存取 API 的規格完全都不一樣。</p>

<p>硬是把這些方案一起塞到一個 controller 和同一個 model，瞬間就會無法維護。不…很可能是 code 亂到讓自己狂跌倒，直接作不出來</p>

<h3>2. OAuth 版本規格間的問題</h3>

<p>理想的境界應該是大家都走 <a href="http://zh.wikipedia.org/wiki/OAuth">OAuth</a> 就能夠解決問題，但是 OAuth 1.0 推出時，鬧了一個大笑話：被發現有 security issue。於是 OAuth 推出了 1.0a 的修補方案，但這又衍生出另外一個問題：每一家解決 security issue 機制完全不一樣。</p>

<p>因為 service provider 的機制完全不一樣，就造成了已經上路使用 OAuth 的網站大囧。因為 1.0a 那步要變成客製。其實大家做的調整都差不多，但當時有一家是來亂的：Yahoo ….</p>

<p>因為 Yahoo 實在太特例，還造成當時 OAuth 這個 rubygem 的作者，拒絕支援 Yahoo（因為要做的修改不只是「小」修改而已）。</p>

<p>這件事實在是太囧了，於是 OAuth 在不久後，又提供了一個解決方案：直接提出 OAuth 2.0!</p>

<p>鬧劇到這裡就結束了嗎？</p>

<p>沒有。</p>

<p>因為 OAuth 2.0 不相容 1.0a 及 1.0 …</p>

<p>好吧，那算了，大家還是繼續裝死使用 1.0x …</p>

<p>還沒有結束喔！</p>

<p>原本完全不鳥 OAuth 的 Facebook 這時候宣布即將放棄自己的 Facebook Connect 架構，宣布未來直接擁抱 OAuth 2.0。</p>

<p>崩潰。一個專案上跑 n 種 OAuth library 是什麼鬼&#8230;.</p>

<p>[<strong> 如果你是沒什麼信念的 Web Developer，看到這裡我建議你可以轉行 </strong>]</p>

<h3>3. 大網站本身直接的 API 改版以及認證機制的改變</h3>

<p>一個網站只要還沒倒，就不可能一直停滯不前。更尤有甚者如 Facebook，它的 API 更是三天一小改，五天一大改。而 FB 的 認證架構 和 API 一改，相對的 library wrapper 就一定會跟著改。</p>

<p>這就苦到那一些直接使用 library 接認證的開發者。</p>

<p>而 FB 改版就已經夠令人苦惱，其他網站不可能也像一攤死水，Google 也改很大&#8230;.。從之前只是
OpenID + API 存取，改成直接走 OAuth &#8230;</p>

<p>你也許會問，為何要使用 library 直接接認證呢？那是不用獨立 library 接認證有時候也不太行得通，因為每一家提供使用者資訊的「方式」和「資料格式」幾乎不一樣。有時候還要分好幾步才能拿到令人滿意的結果</p>

<h2>理想的解決方案</h2>

<p>當 Web Developer 實在太苦了，賣雞排真的比較輕鬆 :/</p>

<p>理想中 Developer 們需要的解決方案應該是這樣的：</p>

<ol>
<li>開發者不需管最底層的傳統認證方案是哪一套 solution，甚至是不只局限於 Rails 這個框架</li>
<li>開發者不需管提供認證方使用的是哪一套協定</li>
<li>開發者拿到的使用者資料格式應該是接近一致的</li>
</ol>


<p>這套方案存在嗎？</p>

<p>存在，它就是 <a href="https://github.com/intridea/omniauth">OmniAuth</a> 。</p>

<h2>小結</h2>

<p>前言歷史寫太長了，決定拆成幾篇寫完。下集待續。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[魔球，一個搞清楚產業重點的棒球故事]]></title>
    <link href="http://blog.xdite.net/posts/2011/11/14/money-ball/"/>
    <updated>2011-11-14T23:56:00+08:00</updated>
    <id>http://blog.xdite.net/posts/2011/11/14/money-ball</id>
    <content type="html"><![CDATA[<p>今天下班回家，看到 Mr. Jamie 寫了這一篇 <a href="http://mrjamie.cc/2011/11/14/moneyball/">魔球 (Moneyball)：一個 Hack Everything 的棒球故事</a></p>

<p>電影《<a href="http://tw.movie.yahoo.com/movieinfo_main.html/id=3981">魔球 (Moneyball)</a>》終於在台灣上映了，一樣的我也還沒去看。但我同樣的也要說，就算你沒有要進電影院看故事，我也推薦你一定要去買<a href="http://www.books.com.tw/exep/prod/booksfile.php?item=0010522666">魔球</a>這本書。</p>

<p>但我要推薦的理由跟 inside 的 <a href="http://www.inside.com.tw/2011/11/13/moneyball-startups">fOx</a> 和 <a href="http://www.inside.com.tw/2011/11/13/moneyball-startups">Jamie</a> 都不一樣。我推薦的原因是，它是一本告訴你「要成為產業贏家就必須搞清楚競賽重點」的書。</p>

<p>魔球是一本 2002 年出版的書，現在這個版本是因應電影上映重新出過的書。中文書第一版出的時候，我正念大二。</p>

<p>而閱讀這本書，從此改變了我對經營事業的看法。</p>

<h2>不是 Hack ，而是抓住遊戲的重點</h2>

<p>Billy Beane 的故事相信大家都耳熟能詳。Mr. Jamie 整理了五段摘要：</p>

<ul>
<li>一個老產業 + 一支窮球隊</li>
<li>勝場數 = 營收</li>
<li>最珍貴的資源: 27 Outs</li>
<li>數字 > 天賦</li>
<li>第二年</li>
</ul>


<p>我就不重新寫了。</p>

<p>而 Billy Beane 的故事，讓我所領悟到很清楚的一件事是： Billy Beane 並不是個 Game Hacker，而他的成功，是因找到了這場金錢遊戲的本質。</p>

<p>（也許是我念數學系的關係，教授平常要求我們的不是去練各種技巧，而是去挖出問題本質，以自身累積出的理論與實力見題解題、見招拆招）</p>

<h3>在大聯盟賺到很多錢的方法？</h3>

<ul>
<li>如何賺大錢？勝場數 = 營收</li>
<li>如何贏球？在 27 個出局數中得到最多分</li>
<li>如何得到最多分？提高上壘率</li>
<li>如何提高上壘率？找出厲害的球員</li>
<li>沒那麼多錢買明星球員怎麼辦？找出上壘率高，但有其他缺陷導致薪水被嚴重低估的球員。</li>
</ul>


<p>而 Billy 所作的也很單純，就是：「用一分錢實實在在的買下一分錢的勝利」。想辦法讓他的錢花的有價值。</p>

<p>而其他人的手段卻是「買明星」，而說穿了也是用「用十塊錢去賭賺一塊錢的機會。」</p>

<p>所有人都能靠賭博賺錢，但是真正賺到錢的機率很低，所以絕大多數的球隊也幾乎都是花了大錢，但票房勝場慘兮兮。</p>

<h2>要從網路上賺錢，第一天就要作能有實質收入的生意</h2>

<p>本來我也覺得大聯盟的砸錢遊戲，荒謬可笑。</p>

<p>直到我踏入了網路界才發現，原來這樣的劇本在各個領域內無時無刻都在上演。只是賭博遊戲變成了：</p>

<ul>
<li>如何在網路上賺錢？做出 PV 幾百萬的網站。</li>
<li>網站如何長成 PV 幾百萬？ =>  做出很酷的網站 => 花大錢 Hire 明星團隊</li>
<li>網站如何長成 PV 幾百萬？ =>   生出很棒的內容 => 花很多錢找人產生內容、經營社群</li>
<li>PV 沒有成長怎麼辦 => 改版增加更多更屌的實驗新 feature => RD 不夠 => Hire 更多的 RD</li>
<li>PV 沒有成長怎麼辦 => 砸錢養更多的編輯生更多的 content => 編輯不夠 => Hire 更多的編輯</li>
</ul>


<p>一年半載下來。準備的幾千萬資本額不夠燒，就算有幾百萬 PV。等到你做到幾百萬 PV 的那一天，你才發現因為 PV 不能吃，轉換率太低，回收的利潤根本不夠龐大的人事費用，然後因為你的帳面太難看，又沒有 VC 想投你，最後就只能黯然收攤。</p>

<p>這不是在影射任何一家網路公司，而是幾乎所有倒掉的網路公司都是類似的劇本。只是誰的口袋比較淺，誰先死。</p>

<h3>從網路上賺到錢的秘密：「charge for your products.」</h3>

<p>37 Signals 的 DHH 曾經在 <a href="http://37signals.com/speaks#startupschool">2008 的 Startup School</a> 給過一場 Talk。這場 Talk 曾經震撼當時的矽谷，這個影片那時還在網路上傳來傳去好一陣子，蔚為風潮。</p>

<p>因為在這場 Talk 中，他講出 37signals 賺錢真正的秘方，這個秘方真的非常非常簡單：簡單到這個言論當時造成矽谷一陣騷動，那就是：「<strong>charge for your products.</strong>」</p>

<p>想從網路上「賺錢」？很簡單，那就是先「收錢」啊！</p>

<p>很好笑對吧？沒想到大家都在作「慈善」，做到忘記其實公司成立的目的，其實就是要「賺錢」。</p>

<h2>小結</h2>

<p>更有趣的是，這分別是 2002 以及 2008 的兩個故事。至今你還可以在各行各業中看到，大家還是拼了命的在下大注賭博：拿自己的老底賭，去借大錢賭。</p>

<p>很多程式設計師總打趣，若寫程式賺不到錢，那就應該回家賣雞排。</p>

<p>若你打算開雞排店，就算你炸的雞排很難吃，你會有可能從開業第一天，就每天雞排都免費，送到有人開始覺得你炸的雞排很好吃，然後你才決定開始賣 40 塊嗎？</p>

<p>你不會，因為如果你這樣作，店開一個月就會倒了。</p>

<p>為什麼你覺得你在網路上這樣送免費雞排不會倒？</p>

<p>從雞排銷售數字分析廚師手藝？Hack 雞排香料祕方？</p>

<p>我想我從這些故事裡，領悟到的是：「你要靠賣雞排賺錢就不要免費；你要靠賣雞排賺大錢就應該努力去把雞排炸的很好吃，讓更多人主動衝來買; 而租個豪華大攤位，挖個五星級廚師、開發榴槤雞排口味，客人不一定會更多，但更有可能的是會讓你虧到死而已&#8230;」。</p>

<p>我不知道你會在<a href="http://www.books.com.tw/exep/prod/booksfile.php?item=0010522666">魔球這本書</a> 和 <a href="http://37signals.com/speaks#startupschool">這場 Talk</a> 裡看到什麼。</p>

<p>希望有機會看到你想追求的答案。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Simple Form - 你的 Form Framework]]></title>
    <link href="http://blog.xdite.net/posts/2011/11/10/simple-form-your-form-framework/"/>
    <updated>2011-11-10T02:20:00+08:00</updated>
    <id>http://blog.xdite.net/posts/2011/11/10/simple-form-your-form-framework</id>
    <content type="html"><![CDATA[<p>今天在 RGBA 跟 <a href="http://blog.gslin.org">DK</a> 嘴砲聊 Twitter 釋出的 <a href="http://twitter.github.com/bootstrap">BootStrap</a> 這套 CSS Framework，才雄雄想起來我前幾週寫了一個小玩具，忘記拿出來講。</p>

<p>我曾經在 <a href="http://blog.xdite.net/posts/2011/10/18/asset-pipeline-version-control-assets/">Asset Pipeline 的重大意義：Version Control Your Asset Package</a> 提過 <a href="https://github.com/anjlab/bootstrap-rails">bootstrap-rails</a> 這個 gem。</p>

<p>Rails 社群這群狂徒當然不會放棄把 Bootstrap 扔進 Gem 做 Asset Pipeline 的機會。事實上，Bootstrap 還是大家練習包 Asset Gem 的絕佳練習對象。你可以在網路上 Google 到一堆 bootstrap-rails 的 gem，幾乎都是在做同樣的事 XD</p>

<p>不過 Asset Gem 包好了，剩下來的問題就是… Helper。Bootstrap 是提供了樣式，但是這些被指定了 class 的 HTML呢？</p>

<p>有麵包屑、列表、警告訊息、表單，別跟我說你還是想要手寫啊？</p>

<p>Rails Developer 要有骨氣一點，要繼續秉持著懶的寫 HTML 的精神繼續寫 Ruby XD</p>

<p>所以我的練習作業跟人家不一樣，我是跑去寫 Rails Helper，我把原先的 Asset Gem fork 出來 <a href="https://github.com/xdite/bootstrap-rails">一份</a>，然後寫了幾乎所有可以拿來練的 HTML Helper …XD</p>

<p>寫一般 HTML Helper 還算簡單，基本上也是拿 <a href="https://github.com/techbang/handicraft_helper">前輩寫過的 Helper</a> 改一改 DOM 結構扔進去包成 Gem。</p>

<p>但是寫 Form Helper 就很麻煩了。因為表單元件除了 text_field 與 text_area 這兩個選項外的，實在千奇百怪，什麼鬼 case 都有。本來之前也想秉著硬幹魂硬幹到底，折騰兩個小時以後就決定砍掉放棄了。</p>

<p>本來想說跑去看看其他 Form Gem 如何設計，自己也來寫一套 Form Helper。結果看完第一套 Gem <a href="https://github.com/plataformatec/simple_form">simple_form</a> 我就投降了。simple_form 考慮得<strong>很周全，幾乎什麼 case 都考慮到了</strong>。</p>

<p>要重造一台精密坦克，即便是只有 clone 履帶也可能超過我能力。</p>

<p>我馬上放棄自己寫 Form Helper 的念頭。方向換成鑽研如何使用 simple_form 自動產生出來的表單，改成可以直接 bootstrap 樣式的 HTML。</p>

<p>本來最初的想法也是直接 override helper method，這樣最快。因為 simple form 自己產生出來的表單欄位，外面還是會產生出來一堆包覆用的 styling div。</p>

<p>後來看完 source 繞了一大圈才發現，README 上面就有說明，simple_form 提供直接「抽換」template 的選項。</p>

<p>也就是可以透過 override <code>def input</code> 這個 method，可以達到改變 styling div 的目的。</p>

<p>所以我做的事就變成<a href="https://github.com/xdite/bootstrap-rails/blob/master/lib/bootstrap-rails/helper.rb">重寫 form builder</a></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">module</span> <span class="nn">Bootstrap</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">class</span> <span class="nc">CustomFormBuilder</span> <span class="o">&lt;</span> <span class="no">SimpleForm</span><span class="o">::</span><span class="no">FormBuilder</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">input</span><span class="p">(</span><span class="n">attribute_name</span><span class="p">,</span> <span class="n">options</span> <span class="o">=</span> <span class="p">{},</span> <span class="o">&amp;</span><span class="n">block</span><span class="p">)</span>
</span><span class='line'>       <span class="s2">&quot;&lt;div class=&#39;clearfix&#39;&gt;</span><span class="si">#{</span><span class="k">super</span><span class="si">}</span><span class="s2">&lt;/div&gt;&quot;</span><span class="o">.</span><span class="n">html_safe</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">button</span><span class="p">(</span><span class="n">type</span><span class="p">,</span> <span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">block</span><span class="p">)</span>
</span><span class='line'>      <span class="n">options</span> <span class="o">=</span> <span class="n">args</span><span class="o">.</span><span class="n">extract_options!</span>
</span><span class='line'>      <span class="n">options</span><span class="o">[</span><span class="ss">:class</span><span class="o">]</span> <span class="o">=</span> <span class="s2">&quot;btn primary&quot;</span>
</span><span class='line'>      <span class="n">args</span> <span class="o">&lt;&lt;</span> <span class="n">options</span>
</span><span class='line'>      <span class="s2">&quot;&lt;div class=&#39;actions&#39;&gt;</span>
</span><span class='line'><span class="s2">        </span><span class="si">#{</span><span class="k">super</span><span class="si">}</span><span class="s2"></span>
</span><span class='line'><span class="s2">      &lt;/div&gt;&quot;</span><span class="o">.</span><span class="n">html_safe</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>和 <a href="https://github.com/xdite/bootstrap-rails/blob/master/lib/bootstrap-rails/form_inputs/collection_input.rb">override input helper</a> 再包進自己的 Helper Gem 內。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">CollectionInput</span> <span class="o">&lt;</span> <span class="no">SimpleForm</span><span class="o">::</span><span class="no">Inputs</span><span class="o">::</span><span class="no">CollectionInput</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">input</span>
</span><span class='line'>    <span class="s2">&quot;&lt;div class=&#39;input&#39;&gt;</span><span class="si">#{</span><span class="k">super</span><span class="si">}</span><span class="s2">&lt;/div&gt;&quot;</span><span class="o">.</span><span class="n">html_safe</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>寫表單再也不需要辛苦的手包 div 調整 style。</p>

<p>可以維持用原先 simple_form 的這種標準寫法，卻產生出符合 bootstrap style 的 form。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&lt;</span><span class="sx">%= bootstrap_form_for :post, :url =</span><span class="o">&gt;</span> <span class="n">posts_path</span> <span class="k">do</span> <span class="o">|</span><span class="n">f</span><span class="o">|</span> <span class="sx">%&gt;</span>
</span><span class='line'><span class="sx">  &lt;%= f.input :username, :disabled =&gt;</span> <span class="kp">true</span><span class="p">,</span> <span class="ss">:hint</span> <span class="o">=&gt;</span> <span class="s2">&quot;You cannot change your username.&quot;</span> <span class="sx">%&gt;</span>
</span><span class='line'><span class="sx">  &lt;%= f.button :submit %&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="sx">% end </span><span class="o">%&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>如此一來，以後我 bootstrap 任何 project 就可以直接引入自己寫的 <a href="https://github.com/xdite/bootstrap-rails">xdite-bootstrap-rails</a> 這個 gem，一次搞定 Form , HTML , CSS , JavaScript 的問題。</p>

<p>繼續懶惰下去。甚至可能乾脆寫成 rails template，因為也許 template 可能才 3 行而已？</p>

<p>寫完這個 gem，我突然間理解為什麼 simple_form 打遍天下無敵手，因為它本身就是一套 Form Framework。其他人實在沒有再造一套輪子的必要，透過 override template，你幾乎可以造出各式各樣的表單欄位&#8230;.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[CoffeeScript 還可以用來做什麼？ -- Hubot]]></title>
    <link href="http://blog.xdite.net/posts/2011/10/27/coffeescript-nodejs-hubot/"/>
    <updated>2011-10-27T16:44:00+08:00</updated>
    <id>http://blog.xdite.net/posts/2011/10/27/coffeescript-nodejs-hubot</id>
    <content type="html"><![CDATA[<p><a href="http://github.com">Github</a> 內部自用的機器人 Hubot 一直是個神秘的產品，常常看到內部員工在<a href="http://speakerdeck.com/u/holman/p/how-github-uses-github-to-build-github">投影片</a>內炫耀 Hubot 多麼的屌：</p>

<p><a href="http://www.flickr.com/photos/xdite/6285733326/" title="Hubot1 by xdite, on Flickr"><img src="http://farm7.static.flickr.com/6031/6285733326_5754b16968.jpg" width="500" height="375" alt="Hubot1"></a></p>

<p><a href="http://www.flickr.com/photos/xdite/6285212725/" title="Hubot2 by xdite, on Flickr"><img src="http://farm7.static.flickr.com/6110/6285212725_7255bbcabc.jpg" width="500" height="374" alt="Hubot2"></a></p>

<p>但往往只是聞其聲，不見其蹤。</p>

<p>不過要是按照 Github 內部慣例，常常在員工投影片出現的東西，往往就是下一個 release 的標的。因此大家也都是迫不及待在等 Hubot 的釋出。按照大家的假想，Hubot 應該是某種 Perl 或 Ruby 的 client，而且 Ruby 的機率可能還大的多。</p>

<p>但 Github 官方 blog 貼的這篇<a href="https://github.com/blog/968-say-hello-to-hubot">公告文</a>章讓大家下巴掉下來：<a href="http://hubot.github.com/">Hubot</a> 是 <a href="http://jashkenas.github.com/coffee-script/">CoffeeScript</a> 寫的&#8230;&#8230;.XDDDDD</p>

<p>(註：以防你不知道什麼是 <a href="http://jashkenas.github.com/coffee-script/">CoffeeScript</a>，或者是它能帶來的好處，我曾經寫過這麼一篇<a href="http://upgrade2rails31.com/coffee-script">文章</a> 解釋原理以及用途 )</p>

<h3>CoffeeScript meets NodeJS</h3>

<p>更精確的來說，Hubot 是用 <a href="http://nodejs.org/">NodeJS</a> 架構作出來的一套機器人框架，而 Github 並非直接撰寫 JavaScript，他們是直接使用 CoffeeScript。整個專案的原始碼都只有 .coffee 而已。</p>

<h3>Support Campfire 與 IRC</h3>

<p>目前 Hubot 支援兩種 chatroom，預設是 <a href="http://37signals.com">37signals</a> 的產品 <a href="http://campfirenow.com">Campfire</a>，也有提供 <a href="http://en.wikipedia.org/wiki/Internet_Relay_Chat">IRC</a> 的 adapter。</p>

<h3>Provide tons of hubot-scripts example</h3>

<p>為了避免大家不知道怎樣擴展 Hubot 的功能，Github 在專案內提供了大概十支左右的 example，也另開了一個專案 <a href="https://github.com/github/hubot-scripts">hubot-scripts</a>，讓大家交流和 contribute。</p>

<h3>Hosted on Heroku</h3>

<p>你會覺得，要跑起這樣一隻 bot，也許又要找一台機器把 bot 跑起來？</p>

<p>Well，這次你錯了…</p>

<p>Hubot 的架構被設計為可以透過 <a href="http://heroku.com">Heroku</a> 的 <a href="http://devcenter.heroku.com/articles/node-js">Procfile 架構</a>掛起來，也就是可以把這一隻 Bot 養在雲端 XD （ Hubot 的文件有教你怎麼作 ）</p>

<h2>小結</h2>

<p>昨天晚上在 Twitter 上看到幾個 Rails core team member 在講 hubot-scripts 時，才突然發現 Hubot 竟然已經釋出了。早上認真想玩時，發現整個架構竟然是 CoffeeScript + NodeJS 時，內心其實有小震撼…</p>

<p>目前看到的幾個是 feature project 的 network program 都是以這樣的方式誕生，如 <a href="http://pow.cx">Pow</a>、Hubot。看來 network program 應該會越來越往 NodeJS 方向傾斜過去。</p>

<p>BTW，今天在玩 Hubot 時，有發現幾個比較值得注意的地方。</p>

<ol>
<li><p>請使用 trunk 版。雖然官方請你直接下載有版本號的打包檔，不過大概是剛釋出，bug 有一點點多，但社群都積極的在修補，這些修補檔目前都還在 master branch 上，還沒被 tag 成 release 版本。所以跑 master 通常會比較沒問題。</p></li>
<li><p>扔上 Heroku 時，要記得寫 Procfile，不然是不會動的。Procfile 的 sample 在 src/templates 下。記得一定要寫，然後再開 <code>heroku ps:scale app=1</code>。完整 Heroku 教學放在 <code>src/templates/README.md</code> 下。</p></li>
</ol>


<p>Good Luck!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Yahoo News 的 SEO 網址所帶來的問題]]></title>
    <link href="http://blog.xdite.net/posts/2011/10/25/yahoo-seo-url/"/>
    <updated>2011-10-25T17:08:00+08:00</updated>
    <id>http://blog.xdite.net/posts/2011/10/25/yahoo-seo-url</id>
    <content type="html"><![CDATA[<p>我不知道設計這個 feature 的是哪位。只是簡單講一下我覺得這個 feature <strong>畫虎不成反類犬</strong>了。</p>

<p>在為網站實作 SEO 改善工程時，我們通常會使用一個技巧：<strong>在 permalink 裡面塞關鍵字</strong>。</p>

<p>這樣的設計你可以在 <a href="htt://www.techbang.com.tw">T 客邦</a> 看到，也可以在 <a href="http://www.pixnet.net">PIXNET</a> 看到。</p>

<ul>
<li>T 客邦的設計是 /1234-seo-in-url</li>
<li>PIXNET 的設計是 /5678-SEO藏在網址裡</li>
</ul>


<p>中文是否適合塞在網址裡面，還是個見仁見智的問題，畢竟每一家處理 URL ENCODE 的方法不一樣。但</p>

<p>Yahoo 的網址是這樣的： /SEO藏在網址裡-7890.html。</p>

<p>看的出設計者應該覺得這是個 <strong>獨樹一格</strong> <strong>別出心裁</strong> 的設計。因為全世界幾乎沒有人這樣幹啊 =_=|||</p>

<p><a href="http://www.flickr.com/photos/xdite/6279632106/" title="螢幕快照 2011-10-25 下午5.25.23 by xdite, on Flickr"><img src="http://farm7.static.flickr.com/6215/6279632106_86d70297c7.jpg" width="324" height="130" alt="螢幕快照 2011-10-25 下午5.25.23"></a></p>

<p><a href="http://www.flickr.com/photos/xdite/6279633244/" title="螢幕快照 2011-10-25 下午5.26.29 by xdite, on Flickr"><img src="http://farm7.static.flickr.com/6054/6279633244_4951092121_z.jpg" width="530" height="71" alt="螢幕快照 2011-10-25 下午5.26.29"></a></p>

<p>這樣你應該看出問題了吧。</p>

<p>各家縮網址和 auto-link 的 library 不認得中文字。因此</p>

<ul>
<li>/1234-seo-in-url => 不會有問題</li>
<li><p>/5678-SEO藏在網址裡 => 會被 parse 成 /5678 ，但因為是動態網頁，所以還是沒問題</p></li>
<li><p>/SEO藏在網址裡-7890.html => 被 parse 成 / ，就算輸入 /7890.html 還是連不到。</p></li>
</ul>


<p>「將中文放在 URL 裡且是在數字之前」的設計，會造成在某些網站社群穿透力為 0，因為貼的連結會被自動 parse 成為根本不能動的連結。</p>

<p>不知道為什麼這個問題沒被測到，這應該在 beta 測試就要被檢驗出來了&#8230;</p>

<p>===</p>

<p><em>後續 update</em></p>

<p>網友 <a href="https://twitter.com/fauzty/status/128770619771850752">@fauzty</a> 說：</p>

<blockquote>
Android 手機的內建瀏覽器和海豚瀏覽器，就因此看不到新版奇摩新聞。Opera Mini 倒是可以，應該是 url encode 問題
</blockquote>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[我讀 Steve Jobs 傳 - 我不是要看瘋子傳]]></title>
    <link href="http://blog.xdite.net/posts/2011/10/24/i-read-steve-jobs/"/>
    <updated>2011-10-24T23:52:00+08:00</updated>
    <id>http://blog.xdite.net/posts/2011/10/24/i-read-steve-jobs</id>
    <content type="html"><![CDATA[<p>先聲明，這一篇純粹是個人讀後感而已。不是什麼嚴肅的 Book Review。</p>

<p>今天 <a href="http://www.books.com.tw/exep/prod/booksfile.php?item=0010522255">賈伯斯傳</a> 上市了。身為一個蘋果愛用者，自然是蠻高興這件事的。因此就花了「一點時間」把這本書讀完了。</p>

<p>但是讀完之後，坦白說我真的算蠻失望的。若要我形容這本書的讀後感，我會說 &#8211; 去把 2 L 悅氏礦泉水 一飲而盡，你就知道讀這本書的滋味了。</p>

<p>這麼好的題材，被這樣烹調實在很可惜。</p>

<p>沒有人說傳記「必須」要有趣，但我覺得「Jobs 傳」這本書平淡到過於異常。</p>

<p>怎麼說呢？也許你是 Jobs 的反對者，那麼你可能會覺得這本書 &#8212; 很有趣。因為裡面不少八卦小故事，關於他詭異作風、負面人格描述，關於不屑別人的行為的大量描述。</p>

<p>但有營養的呢？我覺得很少。如果這是採訪一百多個親友、同事、仇敵得出來的樣貌，我真的非常失望。</p>

<p>人們最敬佩也想了解的是 Jobs 的熱情、Vision、和推動他持續創造出偉大產品背後的秘密。而 Steve Jobs 會希望作者幫他作傳，也是基於他想讓「他的孩子」們知道他「所做的一切」、還有「這一切背後的想法與意義」。</p>

<p>但是 Walter Isaacson，他真的不理解 Jobs，這也就是我認為可惜的地方。我在書中只見作者一直不斷的描述周遭人覺得他多詭異、多暴君，而雖然看得出來作者試圖為 Jobs 說話解套，但是一直失敗。He just doesn&#8217;t get it.。</p>

<p>我想這也是 Jobs 這輩子始終為什麼認為別人為什麼愚蠢的原因：「He just doesn&#8217;t get it.」</p>

<p>如果你曾新創過某個事業，並 fell in love with it。你就能從書中就會看見閃閃發光的 Jobs。他能夠夠持續偉大的原因很簡單 &#8212; 那就是他熱愛自己的公司，熱愛持續打造偉大的成品。Willing to die for it，而他最後也作到了…</p>

<p>我想這也許是因為傳記作者始終是個作家。而不是個 some business founders。只要你是個 bussiness owner，曾經熱愛過某個事業，用盡了全力打造你深信的偉大的產品。你就能夠了解 Steve Jobs 的行為和心理模式。這是領人薪水，覺得別人家資金花不完的上班族很難領悟到的事：</p>

<p>It&#8217;s simple，<strong>只要你覺得這是別人的事業。你就不會想要 &#8211; 「做到最好」</strong>。反之亦然。</p>

<p>Steve 會有那麼大的動力打造產品，力求瘋狂的完美，講話時不時散發著令人攝服的現實扭曲場。這些都不是因為它是一個詭異瘋子，而是因為他真心相信且瘋狂熱愛它的事業。</p>

<p>用盡一切的氣力去熱愛作某一件事，去把產品打造到最好是很累的。有過這樣經驗的人，就會更敬佩  Steve Jobs，他真的夠厲害，遠遠不是熱情覺得讓人可敬而已。這也不只是熱情而已，當中還要有不動趨鞭自己進步的動力。</p>

<p>因為他走在世界最前端，這更加格外的辛苦。</p>

<p>We do want to see things behind these. 我們不是要看瘋子傳。</p>

<p>He just doesn&#8217;t get it.</p>

<p>===</p>

<p>Reed Jobs 都可能比 Water Issacson 懂 Steve Jobs 在想什麼（ according to some piece of this book ）。真是可惜了，這麼好的材料，這麼平淡的一本八卦書….</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Stickies Gem]]></title>
    <link href="http://blog.xdite.net/posts/2011/10/19/stickies-gem/"/>
    <updated>2011-10-19T14:38:00+08:00</updated>
    <id>http://blog.xdite.net/posts/2011/10/19/stickies-gem</id>
    <content type="html"><![CDATA[<p>stickies 這個 plugin 是我在開發中常用的一個 plugin。用來實作注意/警告訊息的。</p>

<p><img src="http://farm7.static.flickr.com/6114/6259519683_ae8e1d15b6.jpg"></p>

<p>stickies 是一個非常古早的 plugin，在 2008 年前左右就問世了，當時的特效還是使用 rjs 。後來 <a href="http://ihower.tw">ihower</a> 在 <a href="http://handlino.com">和多</a> 時把這個 plugin 翻成 jQuery 版本。</p>

<p>這套 plugin 我自己還蠻喜歡用的。T 客邦內部也用了很多，不過因為內部有 Gem （認證系統）預設訊息就綁 stickies，每次開新專案裝完認證，就要手動 copy plugin 到 vendor/ 和手動 copy assets 到 public/，有夠麻煩&#8230;</p>

<p>今天進公司大概跟同事聊了一下昨天寫的用 <a href="http://blog.xdite.net/posts/2011/10/18/asset-pipeline-version-control-assets/">Asset Pipeline 掛 Asset</a> 的概念。</p>

<p><a href="http://twitter.com/v1nc3ntlaw">vincent</a> 就覺得 stickies 應該要首先被拔出去，每次 copy asset 實在太麻煩了，將來最好還可以放在認證系統的 Gemfile dependency 上。於是剛剛我就接下來作了。</p>

<p>本來以為只是掛 asset 而已，小事一樁。不巧的我發現它還是 Rails 2.x 時代的 Rails Plugin。於是剛剛索性將架構作了一番重構。</p>

<p>（重寫 generator，用 Railtie / Engine 作 gem )</p>

<p>目前 stickies 已經被我包裝成 rubygems，並支援 Rails 3.0 / 3.1。
而且 3.1 版本可以直接用 asset pipeline 掛 assets。不需要再跑 copy tasks )</p>

<p>code 放在這裡：<a href="https://github.com/techbang/stickies">https://github.com/techbang/stickies</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Asset Pipeline 的重大意義：Version Control Your Asset Package]]></title>
    <link href="http://blog.xdite.net/posts/2011/10/18/asset-pipeline-version-control-assets/"/>
    <updated>2011-10-18T23:51:00+08:00</updated>
    <id>http://blog.xdite.net/posts/2011/10/18/asset-pipeline-version-control-assets</id>
    <content type="html"><![CDATA[<p>Asset Pipeline 是 Rails 3.1 引入的重大 feature。</p>

<p>之前我曾經為文撰寫過背後設計的意義以及哲學。若你有興趣的話可以觀看這一系列的文章：</p>

<ul>
<li><a href="http://upgrade2rails31.com/asset-pipeline">Asset Pipeline</a></li>
<li><a href="http://upgrade2rails31.com/sass-scss">Sass / SCSS</a></li>
<li><a href="http://upgrade2rails31.com/compass">Compass</a></li>
<li><a href="http://upgrade2rails31.com/coffee-script">CoffeeScript</a></li>
</ul>


<p>今天我要談的是 Assetp pipeline 帶來的另一個震撼：&#8221;Asset as rubygem&#8221;</p>

<h2>Asset as rubygem</h2>

<p>其實這個設計在 Rails 3.1 的蠻早期就有了，而且就藏在官方範例中。只是我初看時完全沒意識到這個設計背後的原理、哲學以及它的重大意義。而多數的鎂光燈也集中在 Asset Pipeline 可大幅獲益於 Compass 與 CoffeeScript 中，沒多少人提起這件事。</p>

<p>Rails 的 application.js 裡面有著這麼一段：</p>

<figure class='code'><figcaption><span>application.js</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">//= require jquery</span>
</span><span class='line'><span class="c1">//= require jquery_ujs</span>
</span></code></pre></td></tr></table></div></figure>


<p>而這是由 Gemfile 中的這個 gem : <a href="http://blog.xdite.net/todo">jquery-rails</a> 所提供的</p>

<figure class='code'><figcaption><span>Gemfile</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">gem</span> <span class="s2">&quot;jquery-rails&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>看得出來奧妙嗎？</p>

<h3>結合 Rails Engine 提供 asset 掛載</h3>

<p>yes。現在你可以透過結合 Rails Engine 把 gem 中的 asset 掛起來。所以 application.js 中</p>

<figure class='code'><figcaption><span>application.js</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">//= require jquery</span>
</span><span class='line'><span class="c1">//= require jquery_ujs</span>
</span></code></pre></td></tr></table></div></figure>


<p>的 jquery 以及 jquery_ujs 都是 jquery-rails 這個 gem 中的 javascript。</p>

<h3>Boost you project</h3>

<p>還看不出來意義嗎？讓我再給你一個例子吧：<a href="https://github.com/anjlab/bootstrap-rails">bootstrap-rails</a></p>

<p><a href="http://twitter.github.com/bootstrap/">Bootstrap</a> 是 Twitter 近期所推出的一個 CSS Framework opensource project，它能夠讓程式設計師，在做 project 的初期（設計師還沒把畫面設計好時），或者是在做小 project （不需要複雜 Style）時，很快的就把一些簡單的版面元素搞定，簡單大方。</p>

<p>但是在 Rails project 中 setup 還是小麻煩，因為你必須手動把 asset 搬到指定位址才行。</p>

<p>若是我跟你說，如果用這個 gem，你只要在 Gemfile 裡 require</p>

<figure class='code'><figcaption><span>Gemfile</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">gem</span> <span class="s1">&#39;anjlab-bootstrap-rails&#39;</span><span class="p">,</span> <span class="ss">:require</span> <span class="o">=&gt;</span> <span class="s1">&#39;bootstrap-rails&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>然後再到 application.css 中</p>

<figure class='code'><figcaption><span>application.css</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="o">//=</span> <span class="nt">require</span> <span class="nt">bootstrap</span>
</span></code></pre></td></tr></table></div></figure>


<p>接著即刻就可以寫 HTML，Bootstrap 馬上就生效了呢？</p>

<p>另一個程式設計師最愛的 <a href="https://github.com/pilu/web-app-theme">web-app-theme</a>，在 Rails 3.1 後的版本，也可以用同樣的方法，把 CSS 直接掛起來，馬上寫！</p>

<p>而不是像之前的作法，掛上 gem 之後，還得用 generator 把當時版本的 asset copy （算是半自動）到目錄資料夾裡！</p>

<p>不僅是這兩個 CSS framework，將來只要是有組織的 asset 套件，如 CSS Framework / jQuery plugin，都有可能可以這樣搞。</p>

<p>這樣夠<strong>震撼</strong>你的心靈了嗎？</p>

<h2>「萃取」 / 「打包」 / 「版本控制」core asset 的好處</h2>

<p>在從前，若我們同時維護多個系列 project，都會有 asset 其實都長得差不多，但是會有只要一份發現要更新，其他份沒有同步更新，就會相當麻煩的痛處。但是作這些更新，都必須要手動去調整。而且 asset 的 version control log 會與專案程式的 version control log 混在一起。若沒有馬上一併處理更新，時日一久，當你要更新其他 project 時，就會忘記自己需要改哪裡。</p>

<p>使用 SCSS 並沒有改變: 「你還是要 copy 好幾份 SCSS 到多個 project 」的事實。</p>

<p>但是如果你的 core SCSS / core JavaScript plugin 是一份 Gem 呢？</p>

<p><strong> 維護的方式可以變成只需要維護 Gemfile 中的版本號，複雜度幾乎趨近於 0。</strong></p>

<figure class='code'><figcaption><span>Gemfile</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">gem</span> <span class="s2">&quot;some-css-plugin&quot;</span><span class="p">,</span> <span class="s2">&quot;0.0.2&quot;</span>
</span><span class='line'><span class="n">gem</span> <span class="s2">&quot;some-js-plugin&quot;</span><span class="p">,</span> <span class="s2">&quot;0.5.7&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>你不需要再對「一包」檔案作版本控制，而是對「一個數字」作版本控制。</p>

<h3>使用 git submodule 不行嗎？</h3>

<p>當然你也會問，使用 git submodule 管理 asset 不行嗎？ 這當然也是一種作法。但問題在於</p>

<ul>
<li>git submodule 不管修改、刪除、更新都要特殊的步驟，否則就會弄爛你的 project</li>
<li>git submodule 是依 commit id</li>
<li>git submodule 沒有處理 dependency 問題</li>
</ul>


<p>而且當你想把 asset revert 到某一版本時，可能就會讓你的耐性爆炸 ….</p>

<h2>小結</h2>

<p>因為今天在練習寫 Generator 還有 Rails Engine。寫著寫著就有鬼點子，不知道 Rails 3.1 之後，Rails Engine 支不支援掛 asset。當然也沒有一股就栽下去，當然先去找找有沒人已經作過這件事，想想 Bootstrap 最近很紅，應該會變成大家練習的對象。沒想到真的就有人寫出來&#8230;.而且還有一堆。</p>

<p>看了別人有實作出來，就隨便找了一套 CSS 當練習包 Gem 的對象，熟悉一下結構。沒想到門檻也沒有說很高。既然 CSS 成功了，就開始繼續亂想 JavaScript 可不可以惡搞，這一想，才意識到 Rails 範例的</p>

<figure class='code'><figcaption><span>application.js</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">//= require jquery</span>
</span><span class='line'><span class="c1">//= require jquery_ujs</span>
</span></code></pre></td></tr></table></div></figure>


<p>就是在講這件事啊 XDDDDDD。</p>

<p>為什麼我這麼豬頭，都沒想到過啊…繼續往下想，就 blow my mind 了。</p>

<p>因為既然這樣可以 work，那就表示以後只要是 asset，就可以打包。CSS framework 和 jQuery plugin 市面上滿山滿谷，那就表示將來一定會出現更多更變態的玩法。不禁讓人越來越期待接下來的發展了。</p>

<p>越來越覺得身為一個 Rails Developer 是相當幸福快樂的事啊！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用 Github Pull Request 整合 CSS 設計]]></title>
    <link href="http://blog.xdite.net/posts/2011/10/13/using-pull-request-to-merge-design/"/>
    <updated>2011-10-13T14:47:00+08:00</updated>
    <id>http://blog.xdite.net/posts/2011/10/13/using-pull-request-to-merge-design</id>
    <content type="html"><![CDATA[<p>各位應該有注意到我的 theme 從 Octopress 換成了自定的 Theme 了。
LOGO 和背景色有做了一點小調整。</p>

<p>頭換成以前經典款的 LOGO，背景色改成藍色。hover LOGO 還會進行「Dell 跳」XD</p>

<p>不過這些都不是重點。</p>

<p>這次的改版比較特別的是，CSS 是 <a href="http://twitter.com/even">@evenwu</a> 直接 fork 我的 blog 改的。
我只要收它的 <a href="https://github.com/xdworks/xdworks.github.com/pull/1">pull request</a>，merge 進來就可以 deploy 改版了。</p>

<p>為什麼我以前沒想過要跟設計師這樣合作呢？</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Learn Ruby The Hard Way]]></title>
    <link href="http://blog.xdite.net/posts/2011/10/12/learn-ruby-the-hard-way/"/>
    <updated>2011-10-12T23:21:00+08:00</updated>
    <id>http://blog.xdite.net/posts/2011/10/12/learn-ruby-the-hard-way</id>
    <content type="html"><![CDATA[<p>跟各位介紹我剛剛做好的這一個翻譯 project <a href="http://lrthw.github.com/">「Learn Ruby The Hard Way」中文版</a>。</p>

<p>這是 Zed Shaw 2011 年 8 月新出版的書。其實也不算新了，它其實是<a href="http://learnpythonthehardway.org/">「Learn Python The Hard Way」</a> 的 Ruby 改編版。</p>

<p>Zed Shaw 目前正在積極出版 <a href="http://learncodethehardway.org/">Learn Code The Hard Way</a>，目前已經出了 Python、Ruby，下一本 <a href="http://c.learncodethehardway.org/">C</a> 正在撰寫中。</p>

<p>在 8 月時，看到這一本書剛推出，其實就很想翻，那時候也寫信取得 <a href="http://readthedocs.org/docs/learn-python-the-hard-way-zh_cn-translation/en/latest/index.html">「Learn Python The Hard Way」中譯版</a>的譯者授權，讓我可以將它的譯作也放到此書裡面（ 畢竟大部分關於原理敘述的段落是相通的）。</p>

<p>但那一陣子畢竟太忙。我也只有趁一個假日草草大概先翻了 10 幾篇，接著就把它放著了。這陣子放長假，才有機會將它從箱子裡面翻出來整理。剛好用 Octopress 也蠻熟練的。就把它也架了起來。</p>

<p>希望對大家學習 Ruby 有任何助益。</p>

<p>另外改一下 LPTHW 中文版的<a href="http://ducktypist.com/2011/06/08/%E4%B8%AD%E6%96%87%E7%89%88-learn-python-the-hard-way-%E7%BF%BB%E8%AF%91%E5%AE%8C%E6%AF%95/">譯序</a> 為大家介紹這本書。</p>

<hr />

<p>《 笨方法學 Ruby 》(Learn Ruby The Hard Way)是 Zed Shaw 編寫的一本Ruby 入門書籍。適合對電腦了解不多，沒有學過寫程式，但對寫程式感興趣的朋友學習使用。這本書以習題的方式引導讀者一步一步學習寫程式，從簡單的打印一直講到完整專案的實現。也許讀完這本書並不意味著你已經學會了寫程式，但至少你會對程式語言以及開發程式這個行業有一個初步的了解。</p>

<p>筆者認為本書區別於其它入門書籍的特點如下：</p>

<ul>
<li><strong>注重實踐</strong>。本書提供了足夠的練習代碼，如果你完成了所有的練習（包括加分習題），那你已經寫了上萬行的代碼。要知道很多職業程式設計師一年也就寫幾萬行程式碼而已。</li>
<li><strong>注重能力培養</strong>。除了原序言提到的「讀和寫」、「注重細節」、以及「發現不同」這樣的基本能力以外，本書還培養了讀者自己鑽研問題和尋求答案的能力。</li>
<li><strong>注重好習慣的養成</strong>。本書詳細地講解了怎樣寫出好的代碼、好的註釋、好的項目。這會讓你在後續的學習中少走很多彎路。</li>
</ul>


<p>本書結構非常簡單，其實就是52 個習題而已。其中26 個覆蓋了輸入輸出、變量、以及函式三個課題，另外 26 個覆蓋了一些比較進階的話題，如條件判斷、迴圈、類和物件、程式碼測試、以及專案的實現等。每一章節的格式基本都是一樣的，以程式碼練習題開始，讀者照著說明編寫程式碼（不允許複製貼上），運行並檢查結果，然後再做一下加分習題就可以了。當然如果你覺得加分習題對你來說有點難，你也可以暫時跳過，以後再完成也沒關係。</p>

<p>另外閱讀本書還需要你有一定的英文能力。其實學習寫程式不懂英語是很吃虧的，畢竟編程語言都是基於英語，而程式社群的主要交流方式也是英語。不會英語的人在程式界可能就只好當二等公民了。本書的翻譯盡量保留了所有的英文專業詞彙（可能會有中文說明），而且遵照 Zed 的建議，程式碼及答案部分沒有翻譯成中文，讀者看到不懂的地方，請自己查字典解決。</p>

<p>如果你對自己的英文能力比較有信心，譯者強烈推薦你直接去下載閱讀英文原版。這本書代碼較多，文字內容較少，因此英文原版的閱讀理解也比較容易。</p>

<p>LRTHW的風格和別的書差異很大。它沒有像一般的入門書籍一樣通過討好讀者以激發讀者興趣，而是直截了當地告訴你你需要做什麼，需要注意什麼。這種風格可能會讓人覺得枯燥乏味，讀者姑且把這也當做 Hard Way 的一部分吧。</p>

<hr />

<p>LPTHW 簡體中文的翻譯者是 <a href="&#x6d;&#x61;&#x69;&#108;&#x74;&#111;&#x3a;&#x77;&#x61;&#110;&#103;&#100;&#105;&#x6e;&#103;&#x77;&#x65;&#105;&#56;&#x32;&#64;&#103;&#x6d;&#97;&#105;&#x6c;&#x2e;&#x63;&#111;&#x6d;">&#x77;&#97;&#110;&#x67;&#100;&#x69;&#x6e;&#103;&#x77;&#101;&#105;&#x38;&#50;&#x40;&#103;&#109;&#97;&#x69;&#x6c;&#46;&#x63;&#x6f;&#x6d;</a>，而他的 blog 是 <a href="http://ducktypist.com/">http://ducktypist.com/</a></p>

<p>LRTHW 中文版是我基於 LPTHW 中文版的翻譯成果，改編成 Ruby 版，並修正當中繁簡以及不同程式（ Python / Ruby 環境所造成的差異改譯而成。</p>

<p>如果你對 LRTHW 的翻譯有任何意見和建議，請在這個 <a href="https://github.com/lrthw/lrthw.github.com">project</a> 的 Github issue 頁發 issue 給我，或者是直接 pull request 也行。</p>

<p>你也可以上 LRTHW <a href="http://ruby.learncodethehardway.org/">官網</a>購買本書正版，這也是對 Zed Shaw 的支持。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[如何從 Wordpress Migrate 到 Octopress]]></title>
    <link href="http://blog.xdite.net/posts/2011/10/09/how-to-migrate-blog-from-wordpress-to-octopress/"/>
    <updated>2011-10-09T18:09:00+08:00</updated>
    <id>http://blog.xdite.net/posts/2011/10/09/how-to-migrate-blog-from-wordpress-to-octopress</id>
    <content type="html"><![CDATA[<h3>文章轉換</h3>

<p>如果你不 Care 你的舊連結能不能動，只在乎內容和 Comment 能不能搬而已。</p>

<ul>
<li>使用 Jekyll Convertor</li>
</ul>


<p>我改了一支 <a href="https://gist.github.com/1273518">convertor</a>，可以從 Wordpress XML 匯入文章，並解決中文問題。</p>

<p>（是的，老外才不管 UTF8 死活。）
（有問題我不負責保固，請自行修理）</p>

<h3>留言轉換</h3>

<ul>
<li>把 Comment 倒進 DISQUS</li>
</ul>


<p>DISQUS 與 Wordpress 與 Octopress 都有良好的整合。你可以把 Woordpress XML 先 import 進 DISQUS 引擎，處理完後可以對應回剛剛轉的 markdown（裡面會有記 wordpress_id）。</p>

<h3>圖片轉換</h3>

<p>我個人習慣很好，平日貼圖都貼在 Flickr 上，沒有這樣的問題。</p>

<p>（有這樣問題的人，請自行解決。）</p>

<h3>RSS Feed</h3>

<p>我個人習慣很好，幾年前就將 feed 代管在 <a href="http://feedburner.com/">feedburner</a> 之上。</p>

<p>（有這樣問題的人，請自行解決。）</p>

<h3>Facebook Likes 數</h3>

<p>你瘋了嗎？</p>

<h3>使用舊有網址</h3>

<ul>
<li>如果你之前的 網址是使用 ?p=XXX 作為永久網址，目前此題無解。</li>
<li>如果你是之前有已經定義好的 permalinks，你可以使用修改 Jekyll Convertor，將 permalink 加入轉換選項裡</li>
</ul>


<p><a href="https://github.com/mojombo/jekyll/wiki/YAML-Front-Matter">https://github.com/mojombo/jekyll/wiki/YAML-Front-Matter</a></p>

<h2>大絕招</h2>

<p>如果你是像我一樣，覺得轉換成本代價過高，只是想另起爐灶而已。就不要管之前的 Blog 怎樣了，改個網址做 301 重新導向就好。</p>

<h3>301 轉址</h3>

<p>這招只適合使用在自己 hosting 或 heroku 之上。因為 Github pages 不支援 .htacess 設定，只能放置靜態檔案。
我是放在 Heroku 上，使用 <a href="https://github.com/jtrupiano/rack-rewrite">rack-rewrite </a> 做到對過去的網址 301 轉址。</p>

<figure class='code'><figcaption><span>Gemfile</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">gem</span> <span class="s2">&quot;rack-rewrite&quot;</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>config.ru</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;rack/rewrite&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">use</span> <span class="no">Rack</span><span class="o">::</span><span class="no">Rewrite</span> <span class="k">do</span>
</span><span class='line'>
</span><span class='line'> <span class="n">r301</span> <span class="sr">%r{/\?p=(.*)?}</span><span class="p">,</span>  <span class="s2">&quot;http://wp.xdite.net/?p=$1&quot;</span>
</span><span class='line'> <span class="n">r301</span> <span class="sr">%r{/\?s=(.*)?}</span><span class="p">,</span>  <span class="s2">&quot;http://wp.xdite.net/?s=$1&quot;</span>
</span><span class='line'> <span class="n">r301</span> <span class="sr">%r{/\?feed=(.*)?}</span><span class="p">,</span> <span class="s2">&quot;http://feeds.feedburner.com/xxddite&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>這簡單三行我可是琢磨了好幾個小時啊 :/</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mou -- the Missing Markdown Editor]]></title>
    <link href="http://blog.xdite.net/posts/2011/10/09/mou-the-missing-markdown-editor/"/>
    <updated>2011-10-09T17:03:00+08:00</updated>
    <id>http://blog.xdite.net/posts/2011/10/09/mou-the-missing-markdown-editor</id>
    <content type="html"><![CDATA[<p>這是我現在拿來寫 Blog 的 Editor。原先是使用付費軟體 <a href="http://www.iawriter.com/">iA Writer</a>，後來九月底在 twitter 上看到朋友推薦使用 <a href="http://mouapp.com">Mou</a>，毫不猶豫就放棄了原來的 solution，現在越寫越上手。</p>

<p>如果你是 Markdown 愛好者，一定會愛死它的。</p>

<p>不多說，直接來一張截圖。</p>

<p><img src="http://mouapp.com/images/Mou_Screenshot_1.png"></p>

<p>CJK 也是沒問題的</p>

<p><img src="http://mouapp.com/images/Mou_Screenshot_3.png"></p>

<p>知道為何我狂更新 blog 的原因吧&#8230;.XD</p>

<p>(目前支援 Mac OSX 10.7+，作者有說其實在 10.6 上也可以執行，但它不會修理任何 10.6 上出現的 bug )</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[十個 Ruby Web Developer 應該熟悉的工具]]></title>
    <link href="http://blog.xdite.net/posts/2011/10/09/10-ruby-developer-must-have-tools/"/>
    <updated>2011-10-09T05:30:00+08:00</updated>
    <id>http://blog.xdite.net/posts/2011/10/09/10-ruby-developer-must-have-tools</id>
    <content type="html"><![CDATA[<p>原本是承諾讀者要整理一篇我常用的工具集，後來想想其實應該要改成來寫一篇：「十個 Ruby Web Developer 應該熟悉的工具」。</p>

<h3>1. Git</h3>

<p><a href="http://git-scm.com/">Git</a> 是進入 Ruby 這個生態圈首先最應該學會的工具。幾乎所有以 Ruby 開發出來的套件都放在 <a href="http://github.com">Github</a> 上。也就是不管你要下載或修改協作都需要透過 Git。</p>

<h3>2. RVM</h3>

<p>Ruby 有很多種 implementation，比較多人在使用的有</p>

<ul>
<li>標準的 MRI Ruby 1.8.7</li>
<li>標準的 MRI Ruby 1.9.2</li>
<li><a href="http://www.rubyenterpriseedition.com/">REE</a> ( Ruby Enterprise Edition)</li>
<li>JRuby 等等</li>
</ul>


<p>其實你用哪一種版本開發都無所謂，不過目前有一些 project 只能在 Ruby 1.9.2 上執行。切換 Ruby 環境跑實驗 project 在之前的時代是一件很痛苦的事。</p>

<p>所以有人發明了 <a href="http://beginrescueend.com/">RVM</a>，讓開發者可以無痛的可以切換各種 Ruby 環境，甚至透過 RVM 製造出獨立的 Gemset 環境，無負擔的盡情實驗新工具。</p>

<h3>3. Mac</h3>

<p>不可否認的開發 Ruby 程式，<a href="http://www.apple.com/tw/mac/">Mac</a> 是第一首選環境。</p>

<p>最初的原因是撰寫 Ruby / Rails 的利器: <a href="http://macromates.com">TextMate</a> ，是 Mac 上的軟體。而後來使用 Mac 開發 Ruby 程式的開發者越來越多，更加深這種情況，
造成一些實戰 best practices 以及友善的開發工具，幾乎都以 Mac 為優先或唯一平台發佈，如：Pow 與 Homebrew。</p>

<h3>4. Homebrew</h3>

<p>原先在 Mac 上，套件管理幾乎是 Macports 與 Fink 的天下。但這兩者因為 dependency 處理不佳，加上需要 sudo 執行。某些時候會造成套件管理上的災難。
在 OSX 10.6 之後的時代，就逐漸被後起之秀 Homebrew 取代。</p>

<p>Homebrew 有兩大極優秀之點：</p>

<ol>
<li>by user，不需 sudo 就可以安裝套件。不會把檔案權限搞得一團髒。</li>
<li>更新迅速以及乾淨。Homebrew 是 git-based 的 fomula sets，透過預設的 fomula 安裝程式。</li>
</ol>


<p>安裝時如果發現有錯誤，可以自行修改，並透過 Github 的功能發 pull request 要求管理者 patch。用 Homebrew 建置出來的 Rails 開發環境通常極為乾淨且無惱人的套件 bug。</p>

<p>（ Rails developer 最常會撞雷的兩大套件：MySQL 與 ImageMagick 在 brew 上裝，幾乎沒什麼問題&#8230;）[註1]</p>

<h3>5. Pow</h3>

<p>這是由 <a href="http://37signals.com">37signals</a> 所開發出來的網頁伺服器，可以跑任何 Rack Based 的網頁程式。特點是，你可以把某個開發中的 project，如：wiki，symlink 到自己的家目錄底下的 .pow/ 資料夾。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span><span class="nb">cd</span> ~/.pow
</span><span class='line'><span class="nv">$ </span>ln -s ~/projects/wiki
</span></code></pre></td></tr></table></div></figure>


<p>再打開瀏覽器上的 http://wiki.dev/，就可以把 projects 掛起來了。</p>

<p>(原理是攔截對 port 80 上的 request 導回 Pow)</p>

<p>在從前，如果你要掛上 projects，通常得自己改 local 的 apache conf 和 /etc/hosts 加上設定。掛起、移除、重開都非常麻煩。</p>

<p>而 <a href="http://pow.cx">Pow</a> 的誕生，讓常常追許多新玩意的開發者，實驗的成本變得極度低廉。</p>

<h3>6. Rack</h3>

<p><a href="https://github.com/rack/rack/wiki/List-of-Middleware">Rack</a> 是一個 Ruby 套件，也同時是 Ruby 界的網頁程式標準 interface。背後的想法與原理可以參考我以前寫的一篇舊文 <a href="http://wp.xdite.net/?p=1557">Rack 與 Rack middleware</a>。</p>

<p>現在只要看以 Ruby 開發的網站程式，幾乎都支援 Rack。不會再有以前哪一套框架，推薦獨家使用哪一套 web server 跑的亂象。</p>

<p>而因為有了 Pow，掛起 Rack-based 的網站實驗程式成本也很低廉。</p>

<p>同時因為採用 Rack 架構開發的緣故，開發者可以透過 Rack middleware 外掛實作一些框架或程式沒有的功能。</p>

<p>比如說：</p>

<ul>
<li><a href="https://github.com/logicaltext/rack-no-www">rack-now-www</a> 硬是幹掉網址的 www</li>
<li><a href="https://github.com/jtrupiano/rack-rewrite">rack-rewrite</a> 在不支援 .htaccess 的環境下，直接使用 rack 硬 rewrite routing</li>
</ul>


<p>也很自然而然的會知道：</p>

<ul>
<li>想惡搞，改 config.ru</li>
<li>想重開，touch tmp/restart.txt</li>
</ul>


<p>這些潛規則。</p>

<h3>7. Bundler</h3>

<p><a href="http://gembundler.com/">Bundler</a> 原先是 Rails3 架構師 Yehuda Katz 開發出來解決 Rails 中 package dependency 的工具（ 在開發 Merb 這個 framework 時，Katz 就開始嘗試實作了）。</p>

<p>package dependency 一直是相當麻煩的問題。解不開，就無法將程式 boot 起來。</p>

<p>原先大家也只有拿 Bundler 搭配 Rails 使用。</p>

<p>而後來 Bundler 也逐漸變成一般 Ruby 程式中預設的套件 dependency 管理程式。</p>

<p>Bundler 中的 Gemfile 設計，不只能讓開發者能夠輕易的解決套件相依問題，並且可以直接引入「開發中」套件，解決 3rd gem 版本更新過慢，卡住自己開發進度的問題。</p>

<figure class='code'><figcaption><span>Gemfile</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">gem</span> <span class="s1">&#39;nokogiri&#39;</span><span class="p">,</span> <span class="ss">:git</span> <span class="o">=&gt;</span> <span class="s1">&#39;git://github.com/tenderlove/nokogiri.git&#39;</span>
</span><span class='line'><span class="n">gem</span> <span class="s1">&#39;nokogiri&#39;</span><span class="p">,</span> <span class="ss">:git</span> <span class="o">=&gt;</span> <span class="s1">&#39;git://github.com/tenderlove/nokogiri.git&#39;</span><span class="p">,</span><span class="ss">:branch</span> <span class="o">=&gt;</span> <span class="s1">&#39;stable-2&#39;</span>
</span><span class='line'><span class="n">gem</span> <span class="s1">&#39;nokogiri&#39;</span><span class="p">,</span> <span class="ss">:git</span> <span class="o">=&gt;</span> <span class="s1">&#39;git://github.com/tenderlove/nokogiri.git&#39;</span><span class="p">,</span><span class="ss">:tag</span> <span class="o">=&gt;</span> <span class="s1">&#39;tag-2&#39;</span>
</span><span class='line'><span class="n">gem</span> <span class="s1">&#39;nokogiri&#39;</span><span class="p">,</span> <span class="ss">:git</span> <span class="o">=&gt;</span> <span class="s1">&#39;git://github.com/tenderlove/nokogiri.git&#39;</span><span class="p">,</span><span class="ss">:ref</span> <span class="o">=&gt;</span> <span class="s1">&#39;23456&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>8. Guard</h3>

<p>在開發網頁程式時，開發者很常重複這樣的動作：寫一寫 -> run test -> refresh web browser -> 繼續修改 -> run test -> refresh browser</p>

<p>這些都是很機械式的行為，非常煩人。</p>

<p>有沒有辦法只要「檔案變更，就自動作事」呢？</p>

<p><a href="https://github.com/guard/guard">Guard</a> 就是這樣的一套工具。</p>

<p>有趣的是，Guard 剛推出時，其實也只單純是一套監視檔案工具變動的工具，你可以透過寫 Guardfile，去自由監視需要監視的資料夾，再 do something。而因為 Guard 架構算設計的不錯，後來許多開發者更基於 Guard
做出更多其他的 rubygems。</p>

<p><a href="https://github.com/guard/guard-livereload">guard-livereload</a> 就是一個例子。</p>

<h3>9. LiveReload</h3>

<p>修改網頁 => refresh browser 是剛剛所提到的煩人事之一。</p>

<p><a href="http://github.com/mockko/livereload">LiveReload</a> 提供了監視檔案變動，並通知 browser reload 的功能。</p>

<p>開發者如果螢幕夠大的話，可以同時開著文字編輯器與 browser，修改的任何變動馬上即時顯示在 browser 上。</p>

<p>值得一提的是，LiveReload 在 10.7 以後是 broken 的。因此後來有人利用 guard 實作出了 guard-livereload 作為替代品。</p>

<p>以前寫過舊文一篇：<a href="http://wp.xdite.net/?p=1791">LiveReload：你的套版好幫手！</a></p>

<h3>10. Sass / SCSS / Compass</h3>

<p>自從 Rails 3.1 引入 <a href="http://sass-lang.com/">SCSS</a> 作為 <a href="http://upgrade2rails31.com/asset-pipeline">Asset Pipeline</a> 當中的選項之後，這套本來沒多少開發者知道的 CSS framework 就開始瘋狂走紅。</p>

<p>SCSS 的原理是透過寫編寫「巢狀」的 style，取代原本需要寫 CSS 時需要一直複製 DOM 結構名稱的動作。並且支援變數、數學、繼承、mixin 等功能&#8230;</p>

<p>如：</p>

<figure class='code'><figcaption><span>SCSS</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='scss'><span class='line'>   <span class="na">$border-color</span><span class="o">:</span> <span class="mh">#3bbfce</span><span class="p">;</span>
</span><span class='line'>   <span class="na">$link-color</span><span class="o">:</span> <span class="mh">#3bbfcf</span><span class="p">;</span>
</span><span class='line'>   <span class="nc">.content</span>
</span><span class='line'>      <span class="p">{</span> <span class="na">border-color</span><span class="o">:</span> <span class="nv">$border-color</span><span class="p">;</span>
</span><span class='line'>        <span class="nt">a</span><span class="p">{</span><span class="na">color</span><span class="o">:</span> <span class="nv">$link-color</span><span class="p">}</span>
</span><span class='line'>   <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>可以生成</p>

<figure class='code'><figcaption><span>CSS</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'>  <span class="nc">.content</span><span class="p">{</span> <span class="k">border-color</span><span class="o">:</span> <span class="m">#3bbfce</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>  <span class="nc">.content</span> <span class="nt">a</span><span class="p">{</span><span class="k">color</span><span class="o">:</span> <span class="m">#3bbfcf</span><span class="p">;</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>而 <a href="http://compass-style.org/">Comass</a> 是基於 SCSS 的 Framework。提供了更進一步的許多暴力 feature。</p>

<p>有些人可能會搞不清楚 SASS / SCSS / Compass 的關係。如果你有興趣的話，可以參考我在 <a href="http://upgrade2rails31.com">Upgrade2Rails31</a> 這個 project 中寫的兩篇文章：<a href="http://upgrade2rails31.com/sass-scss">Sass/SCSS</a> 以及 <a href="http://upgrade2rails31.com/compass">Compass</a>。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[五年寫了 230 萬字]]></title>
    <link href="http://blog.xdite.net/posts/2011/10/08/wu-nian-xie-liao-230-wan-zi/"/>
    <updated>2011-10-08T00:17:00+08:00</updated>
    <id>http://blog.xdite.net/posts/2011/10/08/wu-nian-xie-liao-230-wan-zi</id>
    <content type="html"><![CDATA[<p>這兩天因為本來嘗試要將 Wordpress 轉成 Octopress 的緣故。寫了不少 script。而壓出來的 MySQL 備份檔大概也有 11 M。原本以為是 spam 佔了很多份量。沒想到去掉 comment，還是足足有 10 多 M&#8230;</p>

<p>才發現自己好像還真的寫了不少字。</p>

<p>好奇用 wc 跑自己的文章目錄夾，得出一些有趣的數字：</p>

<p>文章：840 篇
字數：2312404 字。</p>

<p>歷時 1902 days</p>

<p>平均 2.23 天寫一篇文章</p>

<p>平均每篇文章長 2752 字。</p>

<p>這個數字跑出來我自己也嚇了一跳，因為實在是遠超乎自己的想像。</p>

<p>這件事也在某種程度上提醒和鼓勵了自己：<strong>持續做一件微小的事，時日一久也可以匯集巨大成果</strong>。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Why Octopress?]]></title>
    <link href="http://blog.xdite.net/posts/2011/10/07/what-is-octopress/"/>
    <updated>2011-10-07T19:05:00+08:00</updated>
    <id>http://blog.xdite.net/posts/2011/10/07/what-is-octopress</id>
    <content type="html"><![CDATA[<p><a href="http://octopress.org/">OctoPress</a> 是一套Blog Framework。也是我這個 blog 正在用的系統。</p>

<p><img src="http://octopress.org/images/logo.png"></p>

<p>用了這麼久（5 年）的 Wordpress，突然放棄，你一定會好奇背後真正轉換的原因。</p>

<p><a href="http://wordpress.org">Wordpress</a> 是一個很方便的 Blog 系統。</p>

<p>但很可惜的，一直以來它一直是一個給文字書寫者用的部落格系統。</p>

<p>怎麼說呢？若你是一個專門談論技術的 blogger，用 Wordpress 寫一篇技術文帶給你的感覺通常是無比…麻煩。</p>

<h2>樣樣麻煩</h2>

<ul>
<li><p><strong>貼圖很麻煩</strong>。（我們有潔癖，不喜歡直接傳圖直接上 Wordpres，通常會傳上 flickr 再 embd script)</p></li>
<li><p><strong>程式排版很麻煩</strong>。如果不裝一些 plugin，幾乎無法貼程式語法。但是通常 plugin 也需要你寫特殊語法排這些程式碼。生出來的東西也很差強人意。</p></li>
<li><p><strong>Hosting 很麻煩</strong>。安裝 Wordpress 需要租一個 <a href="http://zh.wikipedia.org/zh-hant/LAMP">LAMP</a> 的 stack 去停泊，沒事你還要害怕機器炸掉，沒有備份。上班摸一整天機器了，下班根本不想再弄…</p></li>
<li><p><strong>版本控制 很麻煩</strong>。以前的 blog 系統沒有自動備份，視窗一炸掉，文章 99% 就是不見了。而雖然現在 Wordpress 還有一些其他 BSP 有自動儲存功能。但你我心知肚明那只是醫手殘。你只有辦法撈上最近幾個版本，去把文章存回來。若要看自己上次 <strong>因為什麼理由，修訂了這篇文章的草稿</strong> 根本辦不到。</p></li>
<li><p><strong>改 theme 很麻煩</strong>。如果需要自己訂一些 tips 等方塊，要自己另寫 CSS，但是改 wp-theme 再生效實在是很麻煩的一件事。而且可不可以讓我直接寫 <a href="http://sass-lang.com">SCSS</a>就好？</p></li>
<li><p><strong>寫作 很麻煩</strong>。雖然這一點寫出來算有點雞蛋挑骨頭。但是使用 <a href="http://markdown.tw">Markdown</a> 書寫文章，實在遠比用黏膩膩的 HTML 語法快多了。</p></li>
</ul>


<p>樣樣都煩啊！想到就懶！！</p>

<h2>Developer Blogger 的需求</h2>

<p>其實我們的需求也不多。若是可以：</p>

<ul>
<li>輕鬆的撰寫 Markdown</li>
<li>輕鬆的貼圖</li>
<li>輕鬆的貼程式碼</li>
<li>改 CSS 超容易</li>
<li>不用煩惱佈署問題</li>
<li>檢視草稿變化，甚至是站台更動變化。</li>
</ul>


<p>這樣就很開心了！</p>

<h2>Octopress</h2>

<p>而 Octopress 就是這樣一套會讓人開心的 Blog Framework。</p>

<ul>
<li>輕鬆佈署</li>
</ul>


<p>Octopress 背後是一套叫 Jekyll 的靜態網站產生引擎，可以輕鬆產生 static-file based 的網站，佈署出去。</p>

<p>你可以選擇放到自己的機器，<a href="http://heroku.com">Heroku</a>，甚至是 Github Page 上。</p>

<p>佈署簡單到只要一個指令 rake deploy 就出去了！</p>

<ul>
<li>輕鬆撰寫文章</li>
</ul>


<p>Octopress 支援 Markdown，直接解決了寫作和貼圖的問題。</p>

<p>而程式碼的排版更不用煩惱，可以直接使用 Markdown 原先的 block 貼程式碼，只要註記語言種類，就會自動排版上色。（格式也與 Markdown 語法完全相容）</p>

<p>更令人讚嘆的是可以內嵌 <a href="http://gist.github.com">Gist</a>。這不知道有多酷啊…</p>

<ul>
<li>使用 Git 版本控制</li>
</ul>


<p>Octopress 本身不需使用任何 database，架構本身靠的是文字檔案以及版本控制系統。可以透過使用 Git 觀看站體與文章的修改變化。</p>

<p>而我現在寫文章還常使用進階的招數：開 Git branch 把 TODO 扔進 TODO branch，這樣就算我還有文章沒有寫好，或者是日後需要補充，都不需要另外管理以及害怕被人看見。</p>

<ul>
<li>更改網站配置更方便</li>
</ul>


<p>Octopress 雖然基於 Jekyll，但用起來比 Jekyll 更方便，不少功能都是內建模組化，比如：社群功能（Twitter / Google plus）、留言功能（<a href="http://disqus.com/">DISQUS</a>）、統計功能（Google Analytics），這些都簡單到只要改 _config.yml 就可以改一改，馬上就可以有一個 Blog 上線了。</p>

<ul>
<li>對 Ruby Developer very very very friendly</li>
</ul>


<p>Octopress 是 Ruby-based 的。自然許多 feature 是取用 Ruby Ecosystem 熱門架構與套件打造的。</p>

<p>熟悉 Ruby 的開發者，可以透過：</p>

<ul>
<li>Rack</li>
<li>Rake</li>
<li>SCSS</li>
<li>Guard</li>
<li>LiveReload</li>
<li>Heroku</li>
</ul>


<p>就玩出更多花樣。</p>

<p>寫出 Octopress plugin 更不是什麼難事。</p>

<h2>小結</h2>

<p>Wordpress 爛歸爛，但如果不挑的話，還算是可以用。一直以來，我都認為自己寫文章的速度，若不被平台和工具綁住的話，其實寫作速度還可以更快，寫作興致還可以更高昂。</p>

<p>想歸想，但實際上找不出解法去解決問題。</p>

<p>這件事，一直到了我漸漸接觸到了 Markdown 、 <a href="www.iawriter.com">iAWriter</a> / <a href="http://mouapp.com">Mou</a> 、 <a href="https://github.com/mojombo/jekyll">Jekyll</a> / Octopress，慢慢被改變了。</p>

<p>後來實際用了 Octopress 認真架了一個關於 「<a href="http://upgrade2rails31.com/">Upgred2Rails31</a>」 的教學網站，放置升級到 Rails 3.1 的教學筆記。</p>

<p>寫著寫著，更加深了我這樣的信念。我寫作的速度，文章的長度，還有文章的有趣度，無一不被提高了！</p>

<p>加上我本身的職業就是 Ruby Developer，要 <strong>Hack</strong> 這個系統根本不是什麼難事。這個職業反而有加分作用。</p>

<p>最後，就是你看到的：我終於鼓起勇氣把用了五年的 Wordpress 扔掉了 XD</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Migrate to Octopress]]></title>
    <link href="http://blog.xdite.net/posts/2011/10/07/migrate-to-octopress/"/>
    <updated>2011-10-07T18:19:00+08:00</updated>
    <id>http://blog.xdite.net/posts/2011/10/07/migrate-to-octopress</id>
    <content type="html"><![CDATA[<p><a href="http://wordpress.org/">Wordpress</a> 用到今年，也第五年了。發現越來越不敷我的需求。</p>

<p>決定轉戰 <a href="http://octopress.org/">Octopress</a>。</p>

<p>原本是打算 host 在 Github 上，這樣比較炫（？）</p>

<p>後來考慮到要支援舊 blog 上的文章。所以最後還是放在 <a href="http://heroku.com">Heroku</a> 上，用 <a href="https://github.com/jtrupiano/rack-rewrite">rack-rewrite</a> 對所有舊文章轉址。</p>

<p>舊文章會通通放在 <a href="http://wp.xdite.net">http://wp.xdite.net</a>。舊站的文章我就不繼續再更新了。feed 應該不受影響，本來就放在 feedburner 上。</p>

<p>至於迴響也會轉放在 disqus 上。</p>

<p>大概就這樣&#8230;</p>

<hr />

<p>本來曾經考慮要連內容都轉過來，連中文亂碼都搞定了，不過排版要重弄就有點懶了。</p>

<p>再來是 compile 的速度，我在舊站寫了大概約 850 篇文章。轉過來每 compile 一次對我來說就是一次折磨。</p>

<p>算了 :Q</p>
]]></content>
  </entry>
  
</feed>
